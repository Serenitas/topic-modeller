
Прежде чем выполнять верификацию для конкретной системы, необходимо сформулировать те ее свойства, наличие или отсутствие которых требуется доказать.
Данные логики лишены недостатков с точки зрения однозначности формулируемых на их базе свойств.
Однако, как показывает практика, их мощность позволяет формулировать лишь относительно небольшое количество однотипных условий, а этого, в свою очередь, может быть недостаточно для проверки тех или иных свойств модели конкретной системы.
Рассмотрим, например, модель работы светофора, представленную на рисунке 1 структурой Крипке [6].
Предикаты модели принимают следующие значения: g включен зеленый сигнал светофора, r красный, y желтый.
Как видим, светофор из своего некоторого первоначального состояния переходит в режим, в котором наступает строгое чередование зеленого, красного и желтого сигналов.
Предположим, что стоит задача верификации работы этого режима с доказательством строгого чередования сигналов.
Представить это можно в виде развертки, изображенной на рисунке 2.
И здесь встает проблема, решение которой невозможно в рамках любой из имеющихся логик: определить свойство строгого чередования трех предикатов на бесконечном интервале в случае необходимости его проверки и сформулировать чередование любого произвольного конечного числа предикатов.
Этот пример иллюстрирует неэффективность оператора G в задачах определения строгого чередования предикатов на бесконечной последовательности состояний.
Таким образом, встает проблема разработки некоторого механизма формулировки свойств системы, который позволял бы расширить базовое множество типовых выражений и был бы достаточно удобным для выполнения проверки на моделях.
Под символом, далее именуемым предикатом неопределенности, будем понимать неопределенное множество предикатов для конкретного состояния вычислительной последовательности относительно тех предикатов, которые принимают в нем истинностные значения.
В таблице 1 представлены все операторы, используемые в LTL.
Поскольку все основные операторы LTL могут быть приведены к своим рекурсивным представлениям, авторы полагают, что приведение их к некоторому унифицированному виду, который в последующем именуется эквациональной характеристикой, позволит существенно расширить описательную способность логики LTL и упростит процесс верификации ее формул.
Сочетания операторов LTL также могут быть выведены с помощью аксиом в рамках эквациональной характеристики.
В таблице 2 приведены некоторые сочетания операторов LTL.
Одним из таких типов будет тип строго чередующихся последовательностей предикатов на бесконечной вычислительной последовательности состояний.
В общем виде данный тип представлен на рисунке 3.
Пример данного типа уже был рассмотрен при описании модели работы светофора.
Под символом в дальнейшем будем понимать пустое множество предикатов, означающее, что ни один из предикатов множества AP [6] не принимает значение истина.
Таким образом, сформулированное условие представляет собой систему из четырех рекурсивных уравнений, строго задающих необходимую последовательность предикатов .
Еще одним типом свойств, которые нельзя выразить стандартными формулами LTL, является вхождение  вложенных последовательностей предикатов на бесконечной вычислительной последовательности состояний.
В общем виде данный тип изображен на рисунке 4.
Условно данный тип может быть описан как тип постепенного переключения режимов работы системы, где переход в каждый последующий режим возможен лишь в случае корректного выполнения предыдущего, причем последовательности включения и выключения этих режимов строго взаимообратные.
В качестве примера можно рассмотреть модель работы подсистемы космического спутника, отвечающую за работу передатчика и приемника радиосигнала.
Таким образом, развертка данной модели будет выглядеть так, как показано на рисунке 6.
Для выполнения верификации формул RLTL будет использована та же самая методика верификации, что и для формул LTL, описанная в [6].
На втором этапе для полученной системы рекурсивных уравнений построим контрольный автомат.
На третьем этапе необходимо представить в виде автомата Бюхи B.
Для этого построим такой автомат, в котором состояниям будут сопоставлены переменные F нашей рекурсивной системы уравнений, а переходам предикаты.
Как видно из рисунка 7, сделать это достаточно просто.
Допускающими состояниями являются те, в которые существует хотя бы один переход по предикату, отличному от предиката неопределенности.
Теперь построим композицию автомата B и автомата Bm нашей модели светофора согласно методу, описанному в [6].
Результатом композиции перехода, помеченного предикатом неопределенности, с переходом, помеченным некоторым предикатом, является переход, помеченный, так как неопределенность устраняется.
Результат композиции представлен на рисунке 9.
Жирными стрелками показаны переходы, которые достижимы из начального состояния .
Очевидно, что из начального состояния невозможно попасть ни в одно из допускающих состояний, что означает невыполнимость, а следовательно, выполнимость.
Таким образом, свойство со второго состояния светофора начинается строгое чередование зеленого, красного и желтого сигналов действительно выполняется.
В заключение отметим, что в статье была рассмотрена проблема формулирования сложных верифицируемых свойств.
Как показала практика, LTL и CTL не позволяют формулировать большой спектр условий, среди которых могут оказаться именно те, что необходимы для верификации конкретной модели.
Предложенный в работе механизм эквациональной характеристики для логики LTL позволяет существенно расширить возможности ее описательных свойств.
На основе данного механизма были рассмотрены два конкретных примера, относящихся к конкретным типам вычислительных последовательностей, представление которых невозможно в рамках стандартных формул LTL.
Для первого примера продемонстрирован алгоритм верификации, показавший, что процесс построения контрольного автомата на базе системы рекурсивных уравнений является гораздо более удобным, интуитивно понятным и наглядным.
Авторы полагают, что использование данного представления формул временной логики позволит существенно увеличить гибкость и практичность верификации, поскольку предлагаемый метод может быть с легкостью внедрен в уже существующие технологии верификации на базе метода Model Checking или проверки на моделях.
