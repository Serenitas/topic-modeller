Построение ассоциативных правил в задаче медицинской диагностики



Трудно назвать какую-либо область деятельности, где не происходило бы накопление данных: банки сохраняют информацию о своих клиентах и их вкладах, магазины хранят данные о покупках, социальные сети – о запросах пользователей сети, их высказываниях, на промышленных предприятиях записываются параметры технологических процессов, медики хранят данные пациентов.

Создаваемые БД содержат полезную информацию, которая с успехом может использоваться для улучшения эффективности деятельности в той области, где эти данные собраны.

По этой причине все большую популярность приобретают различные алгоритмы, получившие общее название Data Mining, что буквально можно перевести как «раскопки данных». Пионерами Data Mining можно назвать Лафонтена и Маяковского. Первый в басне, известной нам в переводе Крылова, писал: «Навозну кучу разгребая, петух нашел жемчужное зерно». Маяковский прямо говорил о текстах: «Изводишь единого слова ради тысячи тонн словесной руды». В обоих случаях подчеркиваются суть и сложность алгоритмов этого класса: данных много, в них есть ценная информация, найти и извлечь ее непросто.

Технический термин Data Mining введен Григорием Пятецким-Шапиро в 1989 году. Другое часто используемое название для этих алгоритмов – Knowledge Data Discovery, или KDD, что можно перевести как «извлечение (обнаружение) знаний из данных». Как это всегда бывает с модным направлением исследований, сегодня под алгоритмами Data Mining понимают самый широкий класс алгоритмов, от давно известных алгоритмов математической статистики, алгоритмов, применяемых в области ИИ (искусственного интеллекта), до алгоритмов, созданных специально для раскопки данных.

В данной статье рассматривается алгоритм, характерный именно для Data Mining. Он позволяет извлекать из БД ассоциативные правила. Впервые такой алгоритм, получивший название Apriori, был предложен в работе . Рассмотрим эффективную модификацию этого алгоритма, основанную на шкалах, и его применение к задачам медицинской диагностики. Существует достаточно много реализаций алгоритма Apriori. Описание некоторых из них можно найти в работах . Большинство из них ориентировано на анализ потребительских корзин.

Постановка задачи. Рассмотрим БД db, содержащую множество объектов.

Каждый объект vk БД характеризуется некоторым набором свойств Pk.

Наборы Pk являются подмножествами общего для всех объектов множества свойств Properties.

Будем полагать, что все свойства объектов являются бинарными, то есть объект vk может либо обладать, либо не обладать свойством pj. Позже будет показано, как можно ослабить это ограничение для случая количественных показателей.

Поскольку в дальнейшем предметом исследований будут не сами объекты, а только их свойства, введем в рассмотрение БД dbp, содержащую только конкретные свойства объектов.

Пусть X – некоторый набор свойств.

Частоту набора или его поддержку в базе dbp будем определять как долю тех наборов БД, которые содержат набор X.

Ассоциативным правилом Rule будем называть правило вида.

Здесь X и Y – непересекающиеся наборы свойств.

Важной характеристикой правила является его частота (support), которая определяется следующим образом.

Правило Rule следует рассматривать как импликацию, правило вида «если, то». Если в некотором наборе имеет место X, то в нем имеет место и Y. Другими словами, появление X влечет появление Y. Чтобы правило имело практическую ценность, оно должно обладать высокой степенью достоверности.

Достоверность, или качество (confidence), является второй важнейшей характеристикой правила, которая определяется как доля всех наборов БД, содержащих X и Y, среди тех наборов, которые содержат X.

Нетрудно заметить, что качество правила можно выразить через функцию поддержки Support.

Цель алгоритма Apriori: найти все ассоциативные правила, у которых частота и качество выше заданных минимальных значений.

Основная идея алгоритма Apriori. Идея, предложенная еще в работе , позволяет избавиться от полного перебора всех возможных наборов при построении ассоциативных правил. Суть идеи такова. Назовем набор свойств X частым, если . Справедливо следующее утверждение: если X – частый набор, то и все его подмножества являются частыми наборами.

Более важным является утверждение, следующее из отрицания этой импликации: если X не является частым набором, то и все его надмножества не являются частыми наборами.

Это свойство наборов, называемое антимонотонностью, при построении правил позволяет исключить из рассмотрения большое число наборов. Так, например, обнаружив, что некоторое свойство p редко появляется в наборах БД, можно не рассматривать все наборы БД, содержащие p.

Отсюда следует и общая схема реализации алгоритма Apriori. Вначале строится множество частых наборов F, содержащее наборы длины 1, и множество правил R, где посылка и заключение содержат наборы из F. Затем в цикле на основе уже построенных множеств частых наборов F и R длины k строятся множества F и R длины. Цикл завершается, когда вновь создаваемое множество F длины пусто, то есть не существует частых наборов длины.

Эту схему будем использовать и в нашем алгоритме AprioriScale, где рассмотрим ее более детально.

Алгоритм AprioriScale. Основные идеи 

В основе модификации классического алгоритма AprioriScale лежат две основные идеи: первая связана со способом представления данных, вторая носит более фундаментальный характер и связана со способом построения достоверных правил.

Представление данных в алгоритме AprioriScale. Как представлять записи БД, которые описывают свойства, характеризующие запись? Естественный способ состоит в том, чтобы каждую запись рассматривать как переменную типа. В этом случае запись БД представляет собой список, число элементов которого задает число свойств, которыми этот элемент обладает, а каждый элемент списка задает описание соответствующего свойства.

Такое представление хорошо тем, что сохраняет содержательный смысл свойств, а это крайне важно в прикладных задачах, когда пользователями программной системы являются специалисты в соответствующей прикладной области. Недостатками являются достаточно большой объем памяти, необходимый для хранения данных, и сложность обработки текстовых данных в сравнении с числовым представлением.

Оценим при таком способе представления данных сложность функции Support(X), лежащей в основе всех вычислений. При расчете поддержки набора X необходимо в цикле по числу записей в БД определять, содержится ли список свойств набора X в списке, характеризующем k-ю запись Pk БД. Проверка вхождения данных одного списка в другой список требует достаточно трудоемких операций, когда данными являются строки текста. Общая сложность функции Support представима как, где N – число записей в БД, а M – число свойств.

Можно ускорить вычисления этой функции, сохраняя тот же порядок сложности, но уменьшив константу, если перейти от текстов к числовому представлению данных, учитывая бинарный характер свойств. В этом случае каждая запись БД будет представляться набором из m чисел, значение которых равно 1, если свойство присутствует в записи, и 0 в противном случае. Недостатком такого подхода является то, что труднее обеспечить содержательный смысл данных, представленных числами.

В алгоритме AprioriScale авторы постарались избежать указанных трудностей. С этой целью для представления свойств объектов выбран тип Enumeration (Перечисление). Особенностью этого типа является то, что внутреннее представление данных задается целыми числами, на которые отображаются элементы перечисления. Внешним представлением данных, с которым работает пользователь, остаются строки текста, описывающие свойства объектов.

Более того, для представления данных выбран не просто тип Enumeration, а специальный вид этого типа, называемый шкалой. Шкала характеризуется тем, что k-й элемент перечисления отображается в число 2k. Такое представление позволяет для множества из M свойств установить взаимно однозначное соответствие между всевозможными наборами свойств и целыми числами из диапазона . Таким образом, каждый элемент БД, задающий набор свойств, представляется одним целым числом. В двоичном представлении этого числа единица в k-м разряде означает, что соответствующий объект обладает k-м свойством в перечислении. Подробности работы со шкалами даны в .

Представление данных перечислением, заданным шкалой, имеет еще одну немаловажную полезную особенность. Над элементами перечисления определены логические побитовые операции. Это позволяет крайне эффективно решать базовую для алгоритма операцию – определение вхождения элементов одного множества в другое. Пусть X – заданный набор свойств, а Pk – элемент БД. Объекты X и Pk принадлежат типу Enumeration, заданному шкалой. Тогда для установления того, что, достаточно вычислить следующее булевское выражение,  где & – побитовая конъюнкция, выполняемая над двоичными представлениями X и Pk.

Будем также использовать знак операции | для логической побитовой операции дизъюнкции. Операции & и | можно рассматривать как операции пересечения и объединения соответствующих множеств.

Выбранное представление позволяет сложную операцию определения вхождения множества X в множество Y выполнять за константное время, не зависящее от размера множеств, практически мгновенно, поскольку для выполнения требуются две машинные операции компьютера. Отсюда существенно упрощается сложность вычисления функции Support. При выбранном представлении сложность вычисления этой функции линейно зависит от размера БД с минимальной константой.

Итеративный расчет достоверных ассоциативных правил. Уже отмечалось, что основная идея алгоритма Apriori связана с итеративной схемой построения частых наборов. Частые наборы длины k строятся на основе частых наборов длины и единичных частых наборов. Нечастые наборы в построении не участвуют. В этом суть алгоритма Apriori.

Предлагаемая в алгоритме Apriori схема построения правил такова. Пусть уже построены правила и частые наборы длины. Тогда для построения правил на следующем шаге вначале строится множество частых наборов длины k. Элементы этого множества выбираются в качестве посылки (заключения) вновь строящихся правил. В качестве заключения (посылки) такого правила используются частые наборы длины от 1 до k. Такая схема требует хранения всех частых наборов любой длины и достаточно затратна как по памяти, так и по сложности вычислений.

В алгоритме AprioriScale, помимо свойства антимонотонности, характеризующего частые наборы, используется похожее свойство, характеризующее достоверные правила. Это свойство позволяет строить достоверные правила на шаге k на основании достоверных правил, построенных на шаге. В основе алгоритма лежит следующее утверждение: если  – достоверное правило, то и любое правило , где собственное подмножество, является достоверным.

Докажем справедливость этого утверждения.

Так как подмножество ,  можно представить в виде. Эта запись учитывает, что переменные заданы перечислением, так что, объединение множеств выражается через операцию дизъюнкции.

Достоверность правила вычисляется следующим образом.

Достоверность правила вычисляется как.

Знаменатели в формулах  и  совпадают, а числитель в формуле  по свойству частоты множеств меньше или равен числителю в формуле . Отсюда следует справедливость утверждения.

Следствие. Важнее не само утверждение, а его отрицание. И здесь имеет место антимонотонность. Если правило  недостоверно, то недостоверно и правило . Отсюда следует, что достоверные правила с заданной посылкой X можно строить на основе ранее построенных достоверных правил с той же посылкой.

Заметим, что утверждение касается только правил с заданной посылкой. Возможна ситуация, когда правила  и недостоверны, а правило достоверно. Поэтому недостаточно построить достоверные правила на шаге k, используя только достоверные правила шага. К этому множеству правил достаточно добавить достоверные правила, посылка которых выбирается из множества частых правил длины k, а заключение является частым единичным набором.

Отсюда следует схема алгоритма AprioriScale. Вначале строится множество частых достоверных правил с единичной посылкой и заключением. Далее итеративно уже построенное множество достоверных частых правил на шаге расширяется. Затем к этому множеству добавляются достоверные правила, посылка которых выбирается из множества частых правил длины k, а заключение является частым единичным набором. Процесс продолжается, пока можно строить новые правила.

Рассмотрим, как происходит расширение множества достоверных правил на каждом шаге.

Пусть на шаге построено частое достоверное правило.

Пусть cand – частый единичный набор. Тогда данное правило позволяет породить четыре правила.

Заметим, все четыре правила имеют одинаковую поддержку. Так что, если значение поддержки меньше минимального значения, то ни один из четырех кандидатов не включается в список правил следующего шага. Для подсчета достоверности правил достаточно вычислить два значения функции.

Теорема. Алгоритм AprioriScale строит все частые достоверные правила.

Доказательство этого утверждения по сути приведено выше.

Подводя промежуточные итоги, отметим, что алгоритм AprioriScale позволяет  существенно упростить и сократить объем БД; БД из N записей может быть представлена файлом из N целых чисел;  для пользователя программы сохраняется естественное для данной проблемной области описание свойств рассматриваемых объектов;  вычисление базисной для алгоритма функции Support может быть выполнено за линейное время, пропорциональное размеру БД и не зависящее от числа исследуемых свойств;  в отличие от классического алгоритма Apriori, учитывающего только свойство антимонотонности частых множеств, в алгоритме учитывается свойство антимонотонности достоверных правил, позволяющее строить достоверные правила на основе ранее построенных достоверных правил меньшего размера.

Ограничения алгоритма и их преодоление 

Рассмотрим ограничения, присущие алгоритму AprioriScale, и возможные способы их преодоления.

Количественные свойства. В алгоритме AprioriScale предполагается, что все свойства носят бинарный характер: свойство либо наличествует у объекта, либо нет. В то же время на практике свойство может быть представлено числом из некоторого диапазона. Подтверждений тому можно привести сколь угодно много, например, температура или давление, измеряемое у пациента, цена товара, длина запроса. Как поступать в таких случаях? 

Нужно понимать, что ассоциативные правила носят качественный, а не количественный характер. Поэтому, как правило, точные значения измеряемых параметров не столь важны. В большинстве ситуаций достаточно разбить диапазон возможных значений параметра на несколько непересекающихся интервалов, обычно не более пяти. Например, при разбиении на три интервала каждому интервалу можно поставить в соответствие три свойства: норма, ниже нормы, выше нормы. В этом случае каждый количественный параметр заменяется k бинарными свойствами, где k – это число разбиений диапазона возможных значений исходного параметра. Следует заметить, что свойства «норма» или «ниже нормы» носят качественный характер и для ассоциативных правил более важны, чем знание количественных значений.

Так, для педиатрии большинство измеряемых параметров зависят от возраста. В таком случае при сопоставлении данных о функции органов и систем (таких как частота дыхания, частота сердечных сокращений, величина артериального давления, количество клеток крови, биохимические показатели крови и др.) у детей выделенных групп неправильным является использование средних величин, так как возрастной состав пациентов сравниваемых групп может существенно различаться.

Число свойств. Важной особенностью алгоритма AprioriScale является то, что набор свойств объекта имеет тип перечисления, представленного шкалой. Но это означает, что каждому свойству ставится в соответствие число 2 в степени k. При проецировании перечисления на целочисленный тип ulong это означает, что максимальное число свойств не должно быть больше 64.

Можно заметить, что для исследователя, занимающегося анализом ассоциативных правил, 60 – это большое число. Так что вряд ли при построении правил следует вводить более 60 свойств. Тем не менее, если такая задача возникает, то можно модифицировать алгоритм так, чтобы он учитывал такую ситуацию. Для этого достаточно исходное число свойств разбить на группы, в каждой из которых число свойств будет менее 60.

Правила можно строить как внутри каждой группы, так и связывая параметры разных групп, например, посылка правила принадлежит одной группе свойств, а заключение принадлежит другой группе.

Недавно одному из авторов данной статьи пришлось анализировать результаты обработки большой БД покупок в супермаркете, содержащей около сотни тысяч записей. Данные обрабатывались с использованием инструментов Data Mining for Excel и Microsoft SQL Server. Данные не подвергались предварительной обработке, поэтому в записях присутствовали десятки названий сортов водки, пива, вина. Это касалось не только алкоголя, но и других видов продукции. В результате правила и рекомендации не представляли особого интереса, были в основном одиночными – типа «водка беленькая – селедка тихоокеанская». Конечно, такая БД без предварительной обработки не может использоваться в алгоритме AprioriScale. Но подобную базу непосредственно и не следует использовать для построения ассоциативных правил. Вероятно, следовало разбить алкогольную продукцию на три группы в соответствии с ценами – средние цены, высокие и низкие. В этом случае правила могли нести более содержательную информацию. Вообще предварительный этап подготовки данных в соответствии с задачами исследователя играет важную роль в получении не только достоверных, но и несущих содержательный смысл для исследователя правил.

Параллельные версии. В основе построения ассоциативных правил лежит работа с БД, возможно, большого размера. В этой ситуации существует естественное распараллеливание по данным, что позволяет реализовать параллельные версии алгоритма. Конечно, если время построения правил находится в пределах нескольких секунд, распараллеливание вычислений не имеет особого смысла, а лишь усложняет алгоритм и его отладку. Тем не менее, параллельные версии могут быть весьма полезны как для очень больших БД, так и при большом числе свойств. Особенности построения параллельных алгоритмов и обсуждение возникающих в этом случае проблем приведено в .

О времени работы алгоритма 

Из описания алгоритма следует, что он должен работать эффективно. Приведем результаты эксперимента, где оценивалось время построения правил в зависимости от размера БД. Исходная БД, используемая для решения задач медицинской диагностики, была относительно небольшой и содержала 150 записей. Чтобы оценить время решения на больших базах, данные исходной базы копировались и были построены БД на 2 000 записей и 20 000 записей. При размере БД 150, 2 000 и 20 000 записей время вычисления ассоциативных правил составляет 28, 57, 342 миллисекунды соответственно.

Эти данные подтверждают линейный характер зависимости времени вычислений от размера БД. Они также свидетельствуют о малом значении коэффициента в этой зависимости. БД из 20 000 записей обрабатывается менее одной секунды.

Задача медицинской диагностики и построение ассоциативных правил. Рассмотрим задачу диагностики в медицине и посмотрим, как построение ассоциативных правил может помочь в решении задач, стоящих перед медиками. Общая постановка задачи такова. Объектами в задаче являются пациенты. БД db содержит сведения о пациентах и их заболеваниях. Среди свойств, характеризующих пациента, выделены бинарные свойства, влияющие, по мнению медиков, на возникновение заболеваний, имеющихся у пациентов. Медиков интересуют ассоциативные правила вида, где X – совокупность измеряемых факторов, с высокой достоверностью приводящая к появлению заболевания P. Для них также крайне важно определить, является ли совокупность факторов X классифицирующей, то есть таковой, что появление X с высокой вероятностью свидетельствует о возможном появлении заболевания P, тогда как достоверность правил низкая, когда Q – другое заболевание, отличное от P.

Дальнейшее рассмотрение будем вести на примере конкретной задачи из области педиатрии, когда рассматривается БД, содержащая данные о детях, страдающих различными заболеваниями – ожирением и метаболическим синдромом . Указанные патологические состояния объединены наличием общего признака – ожирения. Однако, согласно современным представлениям , метаболический синдром диагностируется у детей, имеющих, помимо ожирения, еще целый ряд дополнительных признаков.

Подготовленная медиками БД построена на основании результатов многолетних наблюдений. Ее особенность в том, что для детей в возрасте 13–14 лет, которым поставлен диагноз «ожирение» или «метаболический синдром», имеются данные, полученные на самых ранних этапах его развития. Свойства, сохраняемые в БД, относятся к трем периодам: беременность матери, непосредственно роды и первые недели жизни ребенка. Эти свойства традиционно рассматриваются в медицине в качестве факторов риска. Традиционным подходом при анализе данных медицинских исследований является выделение наиболее значимых факторов риска.

Согласно современным представлениям, большинство патологических состояний развивается в результате воздействия не одного, а совокупности факторов риска, то есть является многофакторной проблемой. В связи с этим актуальной задачей медицинских исследований является выделение комплекса факторов, способствующих развитию той или иной патологии, получение количественного и/или качественного представления о суммарном интегральном риске .

Перед медиками стоят две задачи.

1. Выявить, какие совокупности параметров, то есть факторы риска, определяемые на ранних этапах развития ребенка, могут свидетельствовать о возникновении заболеваний в подростковом возрасте. В случае выявления таких совокупностей может быть разработан комплекс мероприятий по снижению риска или, если факторы риска являются управляемыми и могут быть устранены, по предотвращению развития данного патологического состояния. Тем самым может быть решена задача по первичной профилактике данной патологии.

2. Определить возможность различения (дифференцирования) ожирения и метаболического синдрома. По данному вопросу в настоящее время не существует единого мнения, ибо в литературе метаболический синдром рассматривается и как осложнение ожирения, и как самостоятельная нозологическая форма.

Одна из практических целей данной работы состоит в анализе того, можно ли из накопленной БД извлечь ассоциативные правила, помогающие медикам в решении их задач (табл. 1–3).

Приведем несколько исходных записей БД.

Реализация алгоритма AprioriScale на языке C# 

Рассмотрим ключевые моменты реализации алгоритма на языке программирования C#.

Задание перечисления. Класс Properties представляет перечисление анализируемых факторов, включая диагнозы. Вот его описание.  

В перечислении указаны все 18 анализируемых факторов. Атрибут класса  и указание для каждого элемента числа, задающего внутреннее представление элемента, показывает, что перечисление является шкалой. Запись является C# аналогом математической записи.

Построение правил. Основной метод построения правил достаточно прост, так что можно привести его полную реализацию.  

Вначале создается список правил, где посылка и заключение имеют длину 1, то есть содержат по одному элементу. Затем в цикле по уже построенным правилам и множеству частых примеров длины строятся правила длины k, когда на 1 расширяется длина посылки и/или заключения.

Процесс построения заканчивается, когда новые правила построить не удается.

Функция Support. Как уже отмечалось, функция Support при данном выборе представления данных имеет линейную сложность и вычисляется просто.  

В цикле по записям БД счетчик count увеличивается на единицу, если все свойства объекта bask содержатся в записи БД. Выражение if построено в полном соответствии с ранее приведенным выражением .

Построение частых наборов и правил длины 1. Метод Create_Rules_1, строящий список частых примеров и правил длины 1, достаточно прост и понятен. Его реализация очевидна, так что нет необходимости приводить его полный текст. Достаточно лишь упомянуть, что редкие одиночные свойства и недостоверные правила в соответствии с принципом антимонотонности удаляются из дальнейшего рассмотрения.

Построение частых наборов и правил длины k. Метод Create_Rules_k, строящий достоверные правила длины k, является центральным методом в реализации алгоритма. Его основные идеи достаточно подробно описаны. Приводить здесь его полную реализацию на языке программирования не имеет смысла.

Инструментарий для решения задач медицинской диагностики 

Для проведения исследований и решения задач, стоящих перед медиками, авторами был разработан программный инструментарий. Его главной задачей является построение на основе алгоритма AprioriScale достоверных ассоциативных правил, извлекаемых из БД. Не менее важным являлось создание средств, удобных для проведения анализа правил, выбор из множества правил тех, которые имеют содержательный смысл и позволяют отвечать на поставленные медиками вопросы.

Основная форма построения правил. На рисунке 1 показана основная форма, позволяющая создавать правила на основе заданной БД и граничных характеристик частоты и достоверности правил.

Элемент управления ListBox «Факторы» содержит cписок анализируемых свойств в краткой форме, в которой они используются в правилах, и их более полное содержательное описание.

Элемент управления ListBox «Базы данных» содержит список БД, которые могут использоваться для построения правил.

Два текстовых поля «Частота правил» и «Качество (достоверность) правил» содержат минимальные значения частоты и качества правила, ниже которых правила не строятся.

Ряд командных кнопок позволяют пользователю выполнять различные действия, необходимые для построения правил.

Выбрав из списка БД и нажав кнопку «Выбрать базу», получаем имя БД, с которой будем работать, и путь к соответствующему файлу, хранящему БД.

Задав в текстовых полях значения минимальной частоты и минимального качества и нажав кнопку «Задать характеристики», получаем характеристики правил, которые будут использоваться при построении правил.

Нажатие кнопки «Связаться с БД» приводит к открытию соответствующей БД.

Нажатие кнопки «Показать БД» приводит к отображению соответствующей БД в элементе управления ListBox «База данных».

Предполагается, что командные кнопки нажимаются в указанном порядке. Если БД открыта и характеристики правил заданы, при нажатии кнопки «Построить правила» строятся ассоциативные правила, частота и достоверность которых выше заданных минимальных характеристик.

Последняя в ряду командная кнопка «Перейти к работе с правилами» открывает новую форму.

Важную роль играет текстовое окно «Сообщение». При нажатии каждой командной кнопки в этом окне появляется информация о результатах выполнения действия, заданного командной кнопкой. Если действие выполнено в соответствии со спецификациями, сообщение подтверждает успешность его выполнения. Так, на рисунке 1 показано, что после нажатия командной кнопки «Построить правила» в окне «Сообщение» отображается текст, уведомляющий, что правила успешно построены и на их построение потребовалось 28 микросекунд. Если же по каким-либо причинам действие выполнить не удалось, в окне появляется сообщение, указывающее причину невыполнения. Например, если пользователь нажал кнопку «Выбрать базу», не выбрав предварительно базу в списке БД, появится сообщение: «Выберите из списка имя БД, после чего нажмите кнопку <Выбрать базу>».

Форма для работы с построенными правилами. После того как в основной форме построены правила и нажата командная кнопка «Перейти к работе с правилами», открывается новая форма, позволяющая выполнять некоторые действия над правилами.

Основная операция, выполняемая на этом этапе, – фильтрация правил. Алгоритм чаще всего строит правила, лишь часть из которых интересуют исследователя при решении его специфических задач. Поэтому возникает необходимость фильтрации правил. Конечно, фильтр можно было бы задавать еще на этапе построения правил, но это осложнило бы алгоритм построения. Учитывая, что правила строятся быстро, удобнее иметь возможность задавать фильтр для уже построенного полного множества правил.

На рисунке 2 показана форма для работы с построенными правилами.

Два элемента управления ListView отображают в нескольких столбцах все исследуемые свойства. В каждом из них можно выбрать ряд свойств. В элементе управления «Посылка правила» задаются свойства, накладываемые фильтром на посылку правила. Фильтр из всех правил будет отбирать лишь те, свойства которых содержатся в свойствах, заданных фильтром. На рисунке 2 показано задание фильтра посылки правила. В этом случае из рассмотрения исключаются правила, посылка которых содержит свойства, указывающие на диагноз МС и ОЖ. Аналогично в элементе управления «Заключение правила» можно выбрать свойства, которые будут включаться в заключение правила.

Выбрав свойства в «Посылке правила» и нажав командную кнопку «Задать посылку фильтра показа», задаем первую часть фильтра – фильтр посылки правил. Аналогично, выбрав свойства в «Заключении правила» и нажав командную кнопку «Задать заключение фильтра показа», задаем вторую часть фильтра – фильтр заключения правила. После этого можно перейти к показу отфильтрованных правил, нажав командную кнопку «Перейти к показу правил».

Еще одна полезная возможность, предоставляемая этим инструментом, состоит в том, что исследователя может интересовать некоторое конкретное правило. Используя те же элементы управления «Посылка правила» и «Заключение правила», можно выбрать свойства, которые будут включены в посылку и заключение конкретного правила. Командные кнопки «Задать посылку индивидуального правила» и «Задать заключение индивидуального правила» выполняют указанные действия. Командная кнопка «Построить индивидуальное правило» строит правило с заданной посылкой и заключением, рассчитывает его характеристики – частоту и достоверность – и выводит результаты в текстовое окно «индивидуальное правило». На рисунке 2 показан результат построения одного из таких правил.

Форма показа правил. На рисунке 3 показана форма завершающего этапа работы с правилами.

Нажав командную кнопку «Показать правила», в списке «Правила» можно видеть все правила, соответствующие фильтру, построенному на предыдущем этапе. Командная кнопка «Показать все правила» позволяет просмотреть полный список построенных ассоциативных правил без учета фильтрации. Правила, отображаемые в окне списка, можно сохранить в файле, имя которого указывается в соответствующем текстовом окне. Результат выполнения этой операции и полный путь к файлу отображаются в окне «Сообщение».

На рисунке 4 показан сохраненный файл правил, открытый в блокноте.

Анализ результатов 

Алгоритм построения ассоциативных правил может применяться в разных ситуациях. При анализе БД, где записями являются корзины покупателей, содержащие различные товары, все товары имеют один и тот же статус. В торгующем книгами интернет-магазине покупателю, положившему в корзину некоторую книгу, рекомендуют и другие книги. Рекомендации построены на основе правил, определяющих, какие книги обычно заказывают в сочетании с выбранной книгой.

В задачах медицинской диагностики свойства имеют различный статус: одни представляют диагнозы, другие – факторы, влияние которых на возникновение того или иного заболевания и является целью исследования. Как и в рассматриваемой авторами конкретной медицинской задаче, факторы могут относиться к различным временным периодам.

Прежде всего медиков интересуют ассоциативные правила, связывающие измеряемые факторы и заболевания. Если эти правила обладают высокой степенью достоверности, они могут свидетельствовать о рисках появления заболевания, когда у пациента обнаруживаются факторы, стоящие в посылке правила.

Если факторы риска выявляются на ранних стадиях, заболевание можно предотвратить или, по крайней мере, ослабить его тяжесть.

Рассмотрим вопрос о репрезентативности данных. Как уже отмечалось, БД состоит из 150 записей. БД такого размера относятся к малым БД. Можно ли доверять результатам, построенным на базах такого размера? Можно, если выборка, представленная БД, сохраняет свойства генеральной совокупности. Фактически важен не столько сам размер БД, сколько ее репрезентативность, то, насколько эта база отражает генеральную совокупность. Уже отмечалось, что, увеличив размер БД до 20 000 записей путем их репликации, никакой дополнительной информации не получено. Базы и на 150 записей, и на 20 000 записей в одинаковой степени отражают свойства генеральной совокупности. В данном случае генеральную совокупность составляет множество детей, страдающих указанными недугами. Число их не столь велико. Можно считать, что в приведенной в статье выборке представлена существенная часть детей Тверской области.

Рассмотрим построенные правила и проанализируем их. На рисунке 4 показаны двадцать девять правил, прошедших фильтрацию. Их достоверность превосходит значение 0,5, которое выбрано в качестве порогового значения. Рассмотрим первое из этих правил: Токсикоз  МС, частота = 0,49, достоверность = 0,53. Заметим, что среди построенных правил нет правила Токсикоз  ОЖ. Наш инструмент позволяет построить такое правило и оценить его характеристики. Выполним этот эксперимент. Вот соответствующее правило: Токсикоз  ОЖ, частота = 0,44, качество = 0,47. Правило не попало в список из-за ограничений на качество правила. Высокая частота обоих правил, близкая к максимальной, в данном случае равной 0,5, говорит о том, что токсикоз сопровождает оба заболевания. Что касается достоверности правил, то оба они имеют близкие значения, не позволяющие фактически различать заболевания на основании одного этого признака. Заметим, что в нашей выборке каждая запись содержит один из двух диагнозов – МС или ОЖ. Потому правила с одной и той же посылкой, но с разными диагнозами связаны по достоверности. Если достоверность правила  равна P, то достоверность правила  равна. По этой причине правила, имеющие достоверность в пределах, по сути не могут использоваться для различения диагнозов.

Правила, позволяющие отличать один диагноз от другого, должны иметь высокую степень достоверности. И такие правила в нашем случае есть. Можно видеть, что существуют 12 правил, достоверность которых выше 0,75. Все они указывают на метаболический синдром. В целом это позволяет сделать важный с точки зрения медиков вывод о том, что по результатам наблюдений, выполненных на ранних стадиях, можно выявить риск возникновения метаболического синдрома у детей, склонных к ожирению.

Проанализируем более подробно два из таких правил: Токсикоз, УПБ, С частота = 0,16 качество = 0,83; Токсикоз, УПБ, ЭЗМ, частота = 0,09 качество = 0,93.

Заметим, что альтернативные правила с той же посылкой, свидетельствующие об ожирении, не сопровождаемом метаболическим синдромом, имеют вид Токсикоз, УПБ, частота = 0,03 качество = 0,17; Токсикоз, УПБ, ЭЗМ, частота = 0,01 качество = 0,07.

Переходя от частоты и достоверности к соотношениям в БД, можно видеть, что первое из этих правил основано на том, что из 30 пациентов, имеющих подобное сочетание тройки факторов, у 25 впоследствии имел место метаболический синдром. Отсюда следует, что вероятность проявления этого синдрома при таком сочетании факторов равна 0,83.

Еще более впечатляют результаты второго правила. Если у пациента встретилась четверка факторов, то вероятность метаболического синдрома равна 0,93, в то время как вероятность проявления только ожирения равна 0,07.

В целом правила, извлекаемые из БД, позволяют сделать следующий вывод: если на ранних стадиях развития ребенка наблюдаются такие факторы, как Токсикоз, УПБ, ЗЗМ, сопровождаемые позже такими факторами, как СлабРД, ППГ, то риск проявления метаболического синдрома велик, вероятность его проявления находится в пределах 0,8–0,9.

Таким образом, в работе предложен эффективный алгоритм построения ассоциативных правил, имеющий линейную сложность относительно размера БД, построен программный инструментарий на языке C#, достаточно удобный при проведении исследований в процессе построения ассоциативных правил, извлекаемых из БД.

Алгоритм с успехом был применен для решения конкретной задачи медицинской диагностики.

Построенные ассоциативные правила позволили сделать важный вывод о возможности выявления на ранних стадиях параметров, свидетельствующих о риске возникновения метаболического синдрома.

Предложенный алгоритм и программный инструментарий могут с успехом применяться при решении различных задач диагностики в медицине, а также в других прикладных областях.

