
Глобальная информационная сеть охватывает сегодня все сферы современного общества от частной жизни людей, образования, науки, медицины до государственной безопасности.
Поэтому можно с уверенностью утверждать, что благополучие современного мира зависит от надежности и эффективности функционирования информационных систем.
В настоящей статье отражены результаты исследования вопросов нагрузочного тестирования этих систем.
Отметим, что научные исследования в данной сфере сосредоточены на вопросах создания тестов [17], автоматизации процессов анализа результатов тестирования [8, 9], а также адаптации существующих методов к проведению нагрузочного тестирования распределенных систем [10].
Многие методы имеют ad hoc-природу, то есть создаются для конкретного тестирования.
Однако вопросы создания нагрузки, которая представляет собой множество тестовых запросов, направленных на тестируемую систему, исследованы недостаточно.
Абсолютное большинство информационных систем глобальной сети построено с помощью клиент-серверной архитектуры.
В соответствии с ней в ответ на запросы со стороны клиента программы сервера предоставляют свои ресурсы в виде данных либо сервисных функций.
Сами запросы представляют собой набор байтов.
На начальных этапах нагрузочного тестирования до стадии запуска тестов  осуществляется создание тестовых скриптов, которые представляют собой имитацию типичных действий пользователя с тестируемой системой.
Каждое конкретное действие пользователя это запрос к тестируемой системе.
Эффективность стадии создания нагрузки и сбора результатов зависит от качества реализации программного обеспечения.
Под эффективностью автор понимает количество тестовых запросов, которые может сгенерировать один компьютерный узел в единицу времени с одновременным сбором результатов.
В большинстве случаев для создания требуемой нагрузки ресурсов одного компьютерного узла не хватает.
Поэтому разработчики ПО для нагрузочного тестирования предлагают различные механизмы ее повышения.
Эти механизмы основаны на применении совокупности соединенных компьютерных узлов и представлены в виде облачных, кластерных и распределенных вычислений на базе локальной сети.
Ввиду того, что для применения облачных и кластерных вычислений необходимо подключение к глобальной сети, данным способом тестируют уже готовые информационные системы.
В остальных случаях применяют распределенные вычисления на базе локальной сети.
Несмотря на обилие приложений для проведения нагрузочного тестирования, логика их функционирования в целом совпадает.
Она построена на том, что после создания тестов их исполнение осуществляется программой-нагрузчиком, а сбор данных отдельными процессами.
Программа-нагрузчик порождает большое количество процессов виртуальных пользователей, а мощностей процессора компьютера зачастую не хватает для создания достаточной нагрузки на тестируемую систему.
Поэтому создают распределенную систему, состоящую из нескольких компьютеров, объединенных в сеть.
Один компьютер выступает при этом в роли ведущего, который раздает тесты и получает результаты от ведомых.
На ведомых компьютерах запускаются упрощенные программы-нагрузчики без графического интерфейса, их задачами являются получение задания, создание нагрузки, сбор данных и отправка результатов ведущему компьютеру.
В данном исследовании предлагается иной подход.
Вместо дополнительных компьютеров используется специализированный аппаратный блок на базе .
Его задачами являются создание нагрузки и сбор данных.
Современные ПЛИС представляют собой мощные и удобные инструменты для решения различных задач от цифровой обработки сигналов до управления авиационной электроникой [11, 12].
Как показывают результаты работы ученых Англии и США, применение ПЛИС для решения прикладных задач, связанных с сетью, имеет высокую эффективность [1315].
В своих исследованиях они применяли подтип ПЛИС .
Разработанная автором система представляет собой нагрузчик, не зависящий от тестируемого приложения и реализованный в виде прошивки для кристалла ПЛИС.
Его задачи формирование запросов, сбор метрик и отправка результатов в БД.
Итогом работы являются записи в БД, состоящие из запросов, ответов, времени отправки запросов и времени получения ответов.
В качестве аппаратной основы выступает плата Altera DE2-115 Development and Education Board компании Terasic с кристаллом ПЛИС типа FPGA Altera Cyclone IV EP4CE115 [16].
Данная плата обладает большим количеством современных интерфейсов и достаточной памятью.
Используемая FPGA имеет следующие характеристики: 114 480 логических элементов, 3 888 Кбит встроенной памяти, 266 встроенных умножителей 18x18, 528 пользовательских портов ввода/вывода, 4 элемента   общего назначения.
Взаимодействие с ПЛИС осуществляется посредством интерфейса USB JTAG.
Прошивка создается с помощью САПР Quartus II.
Обобщенная структура аппаратного нагрузчика представлена на рисунке 1.
При работе с аппаратным нагрузчиком загружаются запросы для тестируемого приложения, конфигурируются сетевые параметры и параметры тестирования.
Далее аппаратный нагрузчик начинает в автоматическом режиме создавать нагрузку и собирать метрики.
При этом он генерирует большое количество сетевых пакетов с запросами, предназначенными для удаленного узла.
Процесс генерации запросов включает выборку информации о TCP  сессии из памяти, создание сетевых заголовков, подготовку данных к отправке и собственно передачу данных контроллеру Ethernet.
Благодаря архитектуре ПЛИС некоторые стадии могут быть совмещены.
Общее время, необходимое для генерации пакета и его отправки в контроллер среды передачи, рассчитывается по формуле, где длина отправляемого пакета; ширина шины, по которой отправляются данные; период синхросигналов.
После завершения отправки сетевого пакета генерируется новый пакет в зависимости от состояния TCP-сессии.
Таким образом, характеристики аппаратного нагрузчика зависят от производительности тестируемого узла.
Например, перед передачей запроса необходимо отправить запрос на создание соединения, после чего ожидать подтверждения от тестируемого узла.
Соответственно при ожидании ответов от удаленного узла растет время.
Благодаря возможностям и ресурсам ПЛИС можно измерить созданного нагрузчика.
Для этого разработана дополнительная логика, вычисляющая количество тактов, необходимых для генерации и отправки пакета, с одновременным вычислением их размеров.
Эти данные позволяют рассчитать.
Измерения сначала записываются в динамическую память, а после завершения эксперимента переписываются на инструментальный компьютер.
В ходе проведенного эксперимента за 10 секунд аппаратный нагрузчик сгенерировал 108 050 пакетов.
В процессе этого были выделены две стадии.
В ходе первой аппаратный нагрузчик создает большое количество соединений с тестируемым компьютером.
Во время второй стадии тестируемой системе отправляются запросы.
Производительность аппаратного нагрузчика во время первой стадии не зависит от тестируемого узла, а в ходе второй стадии зависит.
Соответственно первая стадия позволяет определить характеристики аппаратного нагрузчика.
Изменение времени генерации обусловлено ожиданием доступа к памяти сессий.
В то время, когда аппаратный нагрузчик создает соединения, тестируемая система отправляет подтверждения на создание соединений.
Получая эти подтверждения, аппаратный нагрузчик обновляет информацию, находящуюся в памяти сессий.
Поэтому во время обновления информации блоку создания нагрузки приходится ожидать освобождения памяти.
Эти данные отражают пропускную способность для пакетов длиной 56 байт, содержащих служебную TCP-информацию.
Зависимость интенсивности генерации сообщений от размера сообщения показана на рисунке 2.
Представленные графики демонстрируют высокую нагрузочную способность аппаратного нагрузчика с предельной пропускной способностью около 380 Мб в секунду.
В худшем случае разработанной системе требуется 340 наносекунд для генерации одного сообщения.
Для сравнения: время, необходимое одной лишь операционной системе компьютерного узла для обработки и формирования одного запроса, по данным английских исследователей [13], составляет около 1520 микросекунд.
Эти данные были получены на компьютере с четырехъядерным процессором 2,4 ГГц AMD Opteron и операционной системой RedHat Enterprise Linux 5.
Автор данной статьи участвовал в серии экспериментов с целью определения нагрузочной способности компьютерных узлов.
В рамках этих экспериментов измерялось время, необходимое операционной системе для обработки одного сообщения.
В процессе работы применялись следующие компьютерные узлы:  1, компьютер Intel Core i7 920 2,67 ГГц, DDR3-1066 9 Гб, CentOS 6.4; ЭП 2, ноутбук Samsung R580-JS03 Intel Core i5 430M 2,26 ГГц, DDR3-1066 3 Гб, Ubuntu 12.10; ЭП 3, ноутбук MacBook Air Intel Core i7 3667U 2 ГГц, DDR3L-1600 МГц 8 Гб, OS X 10.9.2.
Результаты проведенных измерений представлены в таблице.
Таким образом, характеристики разработанного аппаратного нагрузчика на порядок превышают возможности существующих компьютерных систем.
Применение подобного устройства позволит значительно повысить эффективность проведения стадии создания нагрузки и сбора результатов.
На базе таких устройств можно строить распределенные вычисления, позволяющие создавать эксплуатационную нагрузку для крупнейших информационных систем глобальной сети.
При этом для построения аппаратного нагрузчика могут применяться платы с FPGA, стоимость которых меньше стоимости полноценного компьютера или на уровне стоимости офисного компьютера.
Предлагаемая версия разработанной системы может применяться для нагрузочного тестирования различных приложений, использующих транспортный протокол TCP.
Учитывая распространенность этого протокола, устройство может применяться для тестирования широкого круга приложений от веб-серверов и БД до систем пирингового обмена файлами и ряда мультимедиа-приложений.
Аппаратный нагрузчик фактически является сетевым стеком, лишенным прикладного уровня.
Соответственно выбор приложения зависит от того, какие запросы будут загружены в устройство из инструментального компьютера.
Кроме того, благодаря реконфигурируемости этих устройств имеется возможность добавлять новые протоколы, функции и возможности, легко адаптировать аппаратный нагрузчик для различных целей нагрузочного тестирования.
Возможности аппаратного нагрузчика позволяют применять его не только для задач нагрузочного тестирования, но и для стресс-тестирования и тестирования безопасности информационных систем.
Нагрузочное тестирование является одним из основных способов проверки работоспособности информационной системы в ходе эксплуатационной нагрузки.
Исследование было направлено на поиск наиболее эффективных методов его проведения.
Результатом исследования стал метод, основанный на применении аппаратного нагрузчика на базе FPGA ПЛИС.
1921 февраля 2015 г.в Минске  пройдет V Международная конференция Открытые семантические технологии проектирования интеллектуальных систем .
Конференция посвящена семантическим технологиям проектирования интеллектуальных систем.
Мероприятия совпадут с 20-летием открытия специальности Искусственный интеллект в Белорусском государственном университете информатики и радиоэлектроники, а также создания кафедры интеллектуальных информационных технологий.
На круглом столе будут обсуждаться вопросы подготовки специалистов в области искусственного интеллекта и перспективы развития образования, технологий и инженерии в этой области.
В рамках конференции будут проводиться конкурсы студенческих проектов интеллектуальных систем; докладов молодых ученых; проектов молодых ученых.
Под облачными вычислениями обычно подразумевают технологии удаленного хранения и обработки данных, то есть процесс предоставления через Интернет компьютерной инфраструктуры, сервисов и ПО конечному пользователю [13].
Облако в компьютерном значении  есть набор услуг в области информационных технологий, доступных по сети через широкий спектр терминальных устройств.
Специалисты выделяют следующие ключевые характеристики облачных вычислений.
Облачные услуги предоставляются через Интернет из удаленных высокотехнологичных центров обработки данных.
Соответствующие серверные кластеры часто располагаются рядом с источниками дешевой энергии, их местонахождение не всегда известно конечному пользователю.
Устройства хранения информации, процессоры, оперативная память и пропускная способность сети образуют общий пул вычислительных ресурсов и динамически выделяются пользователям.
Ресурсы могут распределяться между несколькими центрами обработки данных, что повышает безопасность хранения данных и улучшает характеристики устойчивости системы.
Вычислительная эластичность  одна из ключевых характеристик облачных вычислений.
Доступ к системе и ее производительность сохраняются даже при неожиданном пике запросов, таким образом, у конечного пользователя создается впечатление, что вычислительные ресурсы можно увеличивать до бесконечности.
Самообслуживание по требованию, без явного взаимодействия с представителем поставщика услуг.Услуги могут быть предоставлены, расширены, сужены в любой момент.
Провайдер обеспечивает средства автоматизированного учета реального потребления услуг, конечный пользователь оплачивает лишь фактически потребленные ресурсы.
При использовании облачных вычислений выделяют различные модели обслуживания, которые условно можно разбить на три уровня.
Первый уровень Инфраструктура как услуга .
На этом уровне пользователи получают базовые вычислительные ресурсы  и используют их для создания своих собственных операционных систем и приложений.
Второй уровень Платформа как услуга .
Здесь пользователи имеют возможность устанавливать собственные приложения на технологической платформе, предоставляемой провайдером услуги.
В качестве примера можно привести сервис Google Apps Engine, позволяющий разработчикам создавать и устанавливать приложения на языках Java, Python, PHP, Go.
Третий уровень ПО как услуга .
Именно этот уровень представляет наибольший интерес для образовательных учреждений.
В облаке хранятся не только данные, но и связанные с ними приложения, а пользователю для работы требуется только веб-браузер.
Примерами такого подхода являются сервисы Google Apps for Education и Microsoft Live@edu, предоставляющие средства поддержки коммуникаций, офисные приложения и удаленные хранилища данных.
При экспоненциальном росте трафика ИТ-специалисты университетов вынуждены тратить все больше времени и средств на обеспечение соответствующей пропускной способности каналов связи.
С каждым годом проблема масштабируемости компьютерных сетей и ПО обостряется.
В то же время ИТ-бюджеты университетов зачастую отстают от необходимых темпов роста.
Поэтому учебным заведениям нужны экономичные, надежные и технологичные способы удовлетворения растущих информационных потребностей при одновременном контроле расходов.
Задача создания в России национальной платформы облачных вычислений предусмотрена государственной программой Информационное общество .
Для ее решения было предусмотрено значительное бюджетное финансирование, на роль исполнителя работ выбрано ОАО Ростелеком.
В 2013 году создание национальной платформы облачных вычислений в РФ было приостановлено.
На момент подготовки настоящей статьи остается неизвестным, кем и когда будут продолжены данные разработки и будет ли эта работа завершена.
В настоящее время компании Google и Microsoft предоставляют образовательным учреждениям многих стран на бесплатной основе или за минимальную плату набор стандартных готовых инструментов, которые могут быть рекомендованы преподавателям и учащимся.
Все инструменты свободны от рекламы и доступны через мобильные устройства.
Google Apps for Education и Microsoft Live@edu располагают средствами поддержки коммуникаций в виде электронной почты, конференцсвязи, средств мгновенного обмена сообщениями наряду с электронной адресной книгой, календарем и планировщиком занятий.
Документы размещаются в удаленных хранилищах данных и могут редактироваться совместно с другими пользователями.
Для хранения документов всех типов на сервисе Google Drive каждому пользователю бесплатно предоставляется до 15 Гб, на сервисе Microsoft SkyDrive до 7 Гб дискового пространства.
Google дополнительно предлагает хостинг и инструменты для создания и размещения википодобных сайтов.
Данные платформы при минимальных ограничениях доступны университетам для обучения ИТ-специалистов, выполнения НИР и создания собственных информационно-обучающих ресурсов.
Другой вариант использования облачных технологий, который начинает распространяться в сфере образования, это перемещение в облако систем управления обучением .
Речь идет о поддержке таких популярных систем, как Moodle и Blackboard.
Moodle это система управления курсами  с открытым исходным кодом, также известная как система управления обучением  или виртуальная обучающая среда .
Moodle успешно применяется в ряде российских высших учебных заведений, например, в МАТИ, на физическом факультете МГУ, в МГТА.
Система управления обучением Blackboard относится к коммерческим программным продуктам, в настоящее время внедряется в СПбГУ.
Передача поддержки систем, подобных Moodle и Blackboard, внешним провайдерам имеет смысл для образовательных учреждений, которые не могут позволить себе покупку и поддержку дорогостоящего оборудования и ПО.
Важнейшие компоненты продукта Кафедра онлайн имеют следующие условные наименования: Облачный кабинет работа онлайн с учебными материалами и другими документами; Специализированный поиск адаптированный поиск учебных материалов в удаленных хранилищах данных и в глобальной сети; Учебный форум коммуникации, консультации онлайн, внутренняя электронная почта; Блоги, статьи, обзоры, заметки публикации студентов, преподавателей, выпускников; Открытая библиотека, Проекты студентов, Электронная энциклопедия, Рыбий глаз.
При спецификации функциональных требований к компонентам ПО Кафедра онлайн за основу были приняты фактические функциональные возможности существующих готовых решений для высшей школы.
Относительно системных требований к ПО не предусмотрено существенных ограничений.
Серверная часть использует стандартные средства языка PHP и СУБД MySQL, задействованы общедоступные системы управления контентом с открытым исходным кодом phpBB, WordPress, MediaWiki.
Клиентская часть представляет собой код на JavaScript, который активно использует библиотеку Dojo Toolkit [4].
Требования к пользовательскому интерфейсу сводятся к многослойной блочной верстке вебстраниц с применением стандартных компоновочных решений и виджетов Dojo Toolkit.
Главное требование к производительности ПО при скорости сетевого соединения от 15 Мбит/с время загрузки и время отклика веб-приложений не должно превышать психологически приемлемой величины в 78 секунд.
Требования к защите информации предусматривают разграничение прав доступа к документам для различных категорий пользователей.
Всего предусмотрены четыре уровня доступа к документам.
1.
Общедоступные документы .
2.
Документы для студентов .
3.
Документы для преподавателей .
4.
Каждый документ знает своего владельца, который его создал.
Только владелец может перемещать свои документы по хранилищу, обновлять их и удалять.
Никто иной этого сделать не сможет.
Права на скачивание и редактирование документов владельцы устанавливают самостоятельно в том удаленном хранилище данных, где документ фактически размещен.
Разграничение прав доступа к документам и иным учебным материалам для различных категорий пользователей показано на рисунке 2 в нотации UML-диаграмм классов .
Произвольные хранилища данных, имеющие средства отображения документов, например: Google Drive, Microsoft SkyDrive, Яндекс.Диск, DropBox и многие другие.
Специализированные хранилища графического и видеоконтента, использующие протоколы публикации ресурсов  Atom и RSS, например: веб-альбомы Picasa, Flickr, Яндекс.Фотки, видеоканалы YouTube и др.
Выбор конкретного вида хранилища данных непринципиален.
На рисунке 3 показана укрупненная диаграмма компонентов, задействованных при работе с удаленными хранилищами данных.
Учебные материалы  на логическом уровне структурируются по направлениям подготовки студентов  и по учебным курсам.
Документы и другие учебные материалы Облачного кабинета логически организованы в древовидные иерархические структуры в соответствии с рекомендациями W3C IndexedDB object store API [5].
Данные структуры представлены в формате JSON и размещаются в хранилищах Dojo Storage [6] на том же хостинге, где и ПО Кафедра онлайн.
На рисунке 4 показаны основные этапы асинхронного взаимодействия между рабочим кодом Облачного кабинета, хранилищами Dojo Storage и удаленными хранилищами документов.
Количество документов в Облачном кабинете может исчисляться многими тысячами единиц.
Документы расположены в удаленных хранилищах, поэтому не всегда индексируются публичными поисковыми машинами.
Доступ ко многим документам изначально ограничен (например, только для студентов, для преподавателей, для членов проектных групп).
Навигация по таким документам возможна через деревья Облачного кабинета или через компонент Специализированный поиск.
В данном контексте целесообразно отметить несколько характерных проблем публичных поисковых машин, о которых Гугл с Яндексом обычно умалчивают, но они известны пользователям: чрезмерное количество результатов поиска, не соответствующих запросу; пользователь тратит много времени и сил, просматривая первые страницы результатов, и ему не всегда хватает терпения перейти к оставшимся ссылкам; найденные документы ранжируются поисковой машиной в соответствии с ее внутренним алгоритмом, который не всегда отвечает интересам конкретного пользователя; ссылки на коммерческие сайты имеют больший рейтинг по сравнению с прочими результатами поиска; пользователям не всегда удобно управлять семантическим контекстом поискового запроса, уточнять и направлять поиск.
При работе компонента Специализированный поиск глобальный поиск документов, как и поиск по конкретным специализированным ресурсам, выполняется штатной поисковой машиной Google Ajax Search, взаимодействие с которой по сети происходит асинхронно.
Это практически та же поисковая машина, которой пользуются люди, когда они просто гуглят что-то в Интернете.
Документы Облачного кабинета образуют древовидные иерархические структуры .
Указанные структуры хранятся в файлах формата JSON на домашнем хостинге ПО Кафедра онлайн, в то время как собственно документы физически размещаются в удаленных хранилищах данных где угодно в глобальной сети.
Работа с деревьями JSON в основном выполняется внутренней поисковой машиной библиотеки Dojo Toolkit.
Соответствующая диаграмма развертывания показана на рисунке 5.
Результаты поиска проходят дополнительную обработку, селекцию и сортировку, прежде чем появятся на мониторе.
Под релевантностью документа понимается мера его соответствия поисковому запросу.
В частности, весь тяжелый контент рекомендуется располагать на облачных сервисах.
Прежде всего это касается видео-, аудиои графического контента, а также объемных документов.
Портал Кафедра онлайн в известном смысле можно рассматривать как развитый веб-интерфейс для других сетевых ресурсов, которые работают через стандартные сетевые протоколы.
По этой причине предусмотрена единая система авторизации и регистрации пользователей портала с учетом уровня их полномочий и требований разграничения прав доступа к документам для различных категорий.
Единый центр авторизации и регистрации пользователей интегрирован с компонентом Учебный форум.
Соответствующую диаграмму развертывания и диаграмму последовательности см.на рисунках 6, 7.
Тестирование выполнялось при средней скорости сетевого соединения 15 Мбит/с; для сбора статистики использовался сервис Яндекс.Метрика; были задействованы браузеры Mozilla Firefox 27, Google Chrome 33, Internet Explorer 9.
Посещаемость портала Кафедра онлайн характеризуется следующими среднемесячными показателями: количество уникальных посетителей 2 690; количество визитов 7 280; количество просмотров 50 500; глубина просмотра 7; время на сайте 8,5 мин.
Измеренная производительность компонентов ПО Кафедра онлайн и их сравнительная популярность показаны в таблице 2.
В заключение отметим следующее.
Защита авторских прав на учебные материалы и другие документы портала Кафедра онлайн обеспечивается путем ограничения доступа к конкретным документам , а также возможностью установления запрета на скачивание и редактирование документов.
Предусмотрены дополнительные меры информационной безопасности, в том числе средства фильтрации спама и средства парирования хакерских атак известных типов.
Процесс развертывания ПО Кафедра онлайн предполагает размещение на хостинге собственно рабочего кода и сопутствующих артефактов, а также создание необходимых таблиц в реляционной БД.
Суммарный объем дистрибутива ПО не превышает 45 Мбайт.
Для бюджетных образовательных учреждений России ПО Кафедра онлайн доступно на безвозмездной основе.
Как показал трехлетний опыт развития и эксплуатации портала Кафедра онлайн в учебных подразделениях, осуществляющих подготовку специалистов по направлению Информатика и вычислительная техника, данный программный продукт может служить в качестве учебного полигона для студентов старших курсов, которые специализируются в области веб-программирования.
