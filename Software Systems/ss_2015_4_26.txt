:656.2.001.57+06.
В данной работе рассматриваются аспекты моделирования широкого класса систем, причем именно признаки событийности являются наиболее существенными для адекватного составления математических моделей.
Признаки событийности и построенные на них методы моделирования [13] существенно отличают исследуемый подход от методов моделирования, общепринятых, например, в теории систем и теории автоматического управления, основными инструментами которых являются интегро-дифференциальные уравнения, методы теории вероятностей, математической статистики и случайных процессов.
В теории систем и теории автоматического управления обычным описанием исследуемой системы является описание вход-выход, а изменение выхода относительно входа, то есть пространство состояний системы, задается передаточными функциями в матричном виде.
Большинство систем, являющихся объектами моделирования, нелинейные, и в данном случае существенные усилия моделирования направлены на линеаризацию систем, выполняемую путем решения систем дифференциальных уравнений в матричном виде.
Результатами моделирования являются восстановленное фазовое пространство моделируемых систем и характеристики звеньев управления и регулирования.
Другим подходом является имитационное моделирование [4], использующее методы теорий и  [5, 6], в которых рассматриваются различные модели входных, выходных потоков и правил обслуживания, построенных на базе соответствующих законов распределения случайных величин и процессов.
Заметим, что и в общей теории систем, и в теориях СМО и СеМО неявно предполагается использование процессного времени.
Однако во втором случае иногда рассматривают потоки  типа, в которых основным соотношением является рекуррентное уравнение Линдли [7], что по сути близко к рассматриваемому далее подходу с идейной стороны, но не со стороны реализации методов моделирования.
В целом процессное время означает, что изменение состояний системы, а также ее модели можно отметить на некоторой временной шкале; если шкала является непрерывной, то естественным будет непрерывное моделирование состояний системы, иначе дискретное, а также соответствующий им математический аппарат.
В основу дискретно-событийного моделирования, развиваемого появления известной системы GPSS [8] и сетей Петри [9, 10] положена другая концепция: состояния системы изменяются под воздействием некоторых событий, в общем случае безотносительно к их точной привязке к временной шкале.
Существенными являются лишь факты возникновения этих событий и взаимодействие их между собой, то есть синхронизация .
Примером таких информационных систем являются сетевые компьютерные системы.
Для сетевых компьютерных систем как многопользовательских многозадачных, многомашинных, многопроцессорных систем характерным является еще один аспект событийности конкуренция за сетевые распределенные вычислительные ресурсы с целью увеличения производительности, минимизации простоев и тому подобное.
Оба этих аспекта  делают сетевые компьютерные системы существенно нелинейными, что усложняет их аналитическое и имитационное моделирование, а рассматриваемый далее в работе подход можно воспринимать как возможную линеаризацию таких систем.
Как уже упоминалось, большинство систем моделируется по принципу входсостояниевыход.
В зависимости от вида функций и, способа фиксации моментов времени в  осуществляется непрерывное  моделирование нелинейной  динамической системы.
Еще раз следует заметить, что изменение состояний динамической системы в таких случаях моделирования всегда привязано ко времени, какими бы его измерениями мы ни пользовались, непрерывными или дискретными.
Получается, что событие первично, а время вторично.
В работе [11] имеются иллюстрации к вышесказанным положениям, которые приведены в доработанном виде на рисунке 1.
В верхней части показано пространство состояний непрерывной системы, в средней дискретной системы, а в нижней дискретно-событийной системы.
Ясно, что пространство состояний дискретно-событийной системы является дискретным и составляет события, , , а переключение между этими состояниями происходит в соответствии с наступлением некоторых событий, ,.
Естественно, при динамической смене состояний системы может происходить возврат к предыдущим состояниям, поэтому моделирование пространства состояний будет составлять при упорядочении по хронологии цепочек событий и совпадении момента времени и события  последовательность пар .
 Событийное функционирование обнаруживается у широкого класса современных систем.
В области информационных систем и технологий событийными являются объектно-ориентированные программные системы, сетевые компьютерные, интерактивные, диалоговые системы и другие.
В формальном виде дискретно-событийная система это некая разновидность временнго автомата [11], который представляется в следующем виде.
Рассмотрим их более подробно.
Событийно-ориентированное моделирование в дискретно-событийной системе проиллюстрировано на рисунке 2.
Список событий является динамической структурой, а модельные часы содержат время последнего исполняемого события.
В алгоритмическом виде моделирование заключается в следующей последовательности действий.
1.
Установить модельные часы в 0.
Инициализировать начальный список событий, расположив их в хронологическом порядке следования.
Элемент списка событий имеет структуру .
;.
2.
Выбрать событие из начала списка.
Если список пуст, завершить моделирование.
3.
Установить модельные часы в.
.
Проверить длительность события и при превышении времени, отведенного на моделирование, завершить его.
4.
В соответствии с типом события и состояния.
исполнить подпрограмму-обработчик события.
5.
Обновить список событий, системные переменные и структуры, поместить новое событие в список событий.
6.
Продолжить моделирование, перейдя к п.
2.
Элементы возможной программной реализации алгоритма 1 показаны в примере 1.
Обработчик устанавливает начальное время, инициализирует список событий и в цикле, выбирая следующее событие, переустанавливает модельные часы, проверяя, чтобы не было превышения максимально допустимого времени моделирования, вызывает подпрограмму exec_event.
При ее реализации имеет смысл запрограммировать хотя бы простейшее планирование списка событий в виде динамической очереди FIFO .
Во втором подходе, процессно-ориентированном исполнении событий, есть возможность исполнения группы событий при их логическом объединении в процессы, как показано на рисунке 3.
Основным отличием данного вида от предыдущего является не только возможность объединять процессы в группы, но и планировать переключение между процессами, разделяя при этом совместные ресурсы моделируемой системы.
Общая схема такого моделирования представлена в виде алгоритма 2.
1.
Установить модельные часы в 0.
Инициализировать начальный список событий, расположив их в хронологическом порядке следования.
Элементы списков событий группируются в процессы, имеющие структуру .
;.
Запустить основной цикл моделирования.
2.
Создать активный процесс из списка планируемых к исполнению событий.
Если список пустой, завершить моделирование.
3.
Проверить превышение максимального времени, отведенного на моделирование.
Если есть превышение, моделирование завершить.
4.
Присвоить процессу дескриптор исполнения и передать его планировщику процессов.
5.
Выполнить планирование процессов: исполнение, ожидание, переключение, завершение.
6.
В рамках процесса требуется исполнить обработчики событий, генерировать новые события.
7.
Перейти к п.
2.
В примере 2 приведена схема возможной программной реализации.
Таким образом, научные исследования в области дискретно-событийного моделирования сейчас достаточно широко развиты в различных направлениях [1215], а также являются значительным дополнением к методам имитационного моделирования систем.
Существуют также программные реализации дискретно-событийных систем моделирования, например AnyLogic, SimPy, SimEvents и другие программные системы.
Процессы обнаружения и устранения ошибок моделируются случайными точечными процессами, а времена обнаружения ошибок сопоставляются с событиями, при возникновении которых требуется рассчитать вероятностные оценки надежности программных компонентов, которые в зависимости от реализуемых ими алгоритмов будут иметь разные формулы для расчета.
Процедуры моделирования в предлагаемом подходе можно разделить на две группы.
Первая группа предназначена для генерации процессов, имитирующих появление ошибок в ПО.
Сгенерированные модельные значения разделяются на несколько классов и составляют исходные данные для следующей группы процедур, которая предназначена для оценки системной надежности компонентного ПО.
Модельные значения, разделенные на классы, сопоставляются с различными классами ошибок в событийной модели типа входструктуравыход.
При этом анализируемый с точки зрения надежности программный компонент также относится к одному из классов в зависимости от используемых в нем программных конструкций.
Каждому варианту программной конструкции соответствует отдельный вариант расчета оцениваемой надежности ПО.
Рассмотрим подробнее модели первой группы.
1.
1.1.
Ошибки ПО возникают в случайные интервалы времени, отсчитываемые последовательно на одной временной оси; имеется некоторое число скрытых ошибок ПО, которые можно обнаружить на этапах разработки и тестирования.
1.2.
Ошибка в ПО вызывает ошибочное состояние всей системы и требует ее исправления для восстановления функциональности системы.
1.3.
Процесс исправления ошибки выполняется немедленно, новые ошибки при этом не вносятся.
2.
2.1.
2.3.
в один момент времени обнаруживается не более одной ошибки.
3..
4.
В дальнейшем вместо выражения  могут использоваться другие различные дискретные аналоги выражения .
Рассмотрим один из таких аналогов, построенный на основе экспоненциальной модели роста.
Пусть обозначает кумулятивное число обнаруженных ошибок за некоторые периодов эксплуатации ПО, его тестирования, отладки и тому подобное.
Процесс роста надежности ПО описывается разностным уравнением,  где некоторая константа; ожидаемое число ошибок на бесконечно длинном интервале времени; интенсивность обнаружения ошибок.
Перейдем к процедурам второй группы, где разработана компонентная модель оценки надежности ПО, учитывающая несколько классов ошибок.
5.
Компонентную модель оценки надежности ПО, учитывающую структуру программных конструкций и классы ошибок, определим следующим образом.
Имеются три класса ошибок: 1) некритические, не воздействующие на выход своего и вход другого блока; 2) переходящие, воздействующие на выход своего и вход другого блока; 3) критические, воздействующие на выход своего и не воздействующие на вход другого блока.
6.
В связи с заявленным типом модели вход структуравыход рассмотрим варианты расчета вероятности возникновения события, вызванного ошибкой в зависимости от структуры программного компонента.
6.1.Последовательная структура.
На рисунке 5 показана последовательная структура исполнения алгоритмов, , , программного компонента.
2.
3.
4.
6.2.
Разветвляющаяся структура.
Если программный компонент имеет структуру разветвления с ветвями, из которых первые 1 являются ветвями еслито, а.
2.
Для имитации возникновения ошибки рассчитывается.
6.3.
Циклическая структура.
Если программный компонент имеет циклическую структуру, ее можно трансформировать вкомпонента.
Таким образом, для циклической структуры оказывается подходящей вычислительная схема из п.
6.1.
6.4.
Параллельная структура.
Если программный компонент предусматривает параллельное исполнение алгоритмов, , , , то моделируется возникновение событий, связанных с классами некритичных и критичных ошибок.
Структура исполнения алгоритмов в этом случае показана на рисунке 7.
2.
Если 1 параллельных ветвей имеют корректный выход, арассчитывается.
3.
Если 1 параллельных ветвей имеют некритическую ошибку, а.
На основании изложенного сделаем следующие выводы.
В статье предложен дискретно-событийный подход к оценке надежности ПО, использующий покомпонентную технологию моделирования событий возникновения ошибок на входе и выходе программного компонента.
Процессы обнаружения и устранения ошибок моделируются случайными точечными процессами, а времена обнаружения ошибок сопоставляются с событиями, при возникновении которых требуется рассчитать вероятностные оценки надежности программных компонентов, которые в зависимости от реализуемых ими алгоритмических структур имеют разные формулы для расчета.
