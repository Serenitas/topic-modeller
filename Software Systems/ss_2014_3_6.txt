
Актуальность и практическая значимость задачи автоматического синтаксического анализа текстов на естественном языке не вызывает сомнений.
Ее часто приходится решать в рамках более крупных задач, таких как информационный поиск, извлечение информации, автоматическое реферирование, машинный перевод.
Главной причиной, обусловливающей сложность задачи автоматического синтаксического анализа, является присущее любому естественному языку явление омонимии: одни и те же языковые знаки, помещенные в различные контексты, могут интерпретироваться по-разному.
В подавляющем большинстве текстов на естественном языке омонимия может быть без труда разрешена, то есть текст обычно строится так, что человек  способен воспринять его однозначно.
Для качественного автоматического синтаксического анализа необходимо уметь моделировать контексты всех перечисленных типов и учитывать их в процессе автоматического анализа.
Заметим, что на сегодняшний день большинство синтаксических анализаторов умеют работать с контекстом только в рамках одного предложения.
Лишь немногие анализаторы учитывают контексты соседних предложений и всего текста в целом .
Прагматический контекст не учитывает ни один из известных авторам синтаксических анализаторов.
Способность воспринимать и динамически модифицировать систему контекстов в процессе коммуникации является, по-видимому, одной из важных составляющих языковой компетенции человека.
Заметим, что в естественных языках, помимо омонимии, можно наблюдать еще одно явление, в рамках которого эта способность проявляется не менее ярко.
Речь идет об эллипсисе.
Эллипсис широко распространен и встречается во всех известных естественных языках.
В качестве примера приведем предложение.
Здесь подразумевается, что у сына тоже был стол, но синего цвета.
Итак, можно констатировать, что умение человека использовать контексты различных видов в процессе анализа текстов выражается в способности не только снимать омонимию, но и восстанавливать эллипсис.
Однако, несмотря на общую природу этих двух явлений, омонимия являлась предметом изучения компьютерной лингвистики на протяжении десятилетий, а эллипсис лишь вскользь упоминается в отдельных работах.
В теоретической лингвистике ситуация другая.
Эллипсис достаточно хорошо изучен лингвистами [2, 3].
Даже простейшие случаи эллипсиса на сегодняшний день являются труднопреодолимым препятствием для алгоритмов синтаксического анализа.
Эллипсис до сих пор рассматривается многими исследователями как нечто периферийное и незначительное .
В данной работе предложен подход к автоматическому анализу естественного языка, в рамках которого разрешение омонимии и восстановление эллипсиса оказываются двумя сходными аспектами одного и того же процесса, выполняемого тремя взаимодействующими механизмами: механизмом предсказаний, механизмом слияний и оценочным механизмом.
Все описанные механизмы функционируют в рамках алгоритма взвешенного chart parsing, основанного на идеях из [4].
Программная разработка предложенного подхода ведется в рамках исследовательской среды Treeton [5, 6].
Эти вершины виртуальны, в отличие от остальных вершин они не соотнесены явным образом со словами анализируемого предложения.
Будем называть такие вершины [6].
На рисунке 1 представлен пример синтаксического разбора предложения, который содержит нулевые вершины.
В ряде работ по синтаксическому анализу понятие нулевого узла не используется.
При работе с деревьями зависимостей строятся деревья, все узлы которых являются словами исходных предложений.
Для систем составляющих аналогично принимается, что листовыми вершинами деревьев разбора могут быть только слова исходных предложений.
Даже в тех случаях, когда системы синтаксического анализа способны работать с нулевыми узлами, их порождение обычно осуществляется при помощи специальных механизмов, отделенных от основного механизма анализа .
Далее предлагается схема синтаксического анализа, базовые принципы которой обеспечивают корректную обработку эллиптических конструкций без использования дополнительных механизмов.
В основе этой схемы лежит идея того, что в каждом анализируемом слове, даже без учета контекста окружающих слов, заложено много информации .
[7]).
В качестве примера рассмотрим предложение.
Слово является глаголом.
Оно может быть главным словом в некотором предложении: корнем дерева разбора или вершиной сочинительной клаузы.
Слово является прилагательным.
Оно сочетается с управляющим существительным в именительном или винительном падеже .
Слово является существительным.
Для него можно предположить наличие управляющего глагола .
Кроме того, для этого существительного можно предположить, например, управляющий предлог .
).
Слово по характеристикам аналогично слову.
Слово по характеристикам аналогично слову.
Таким образом, просто по слову можно построить набор гипотез о свойствах слов, с которыми оно может быть синтаксически связано.
Важно, что для построения гипотез не требуется наличие соответствующих им слов в исходном предложении.
Заметим, что в ряде случаев гипотезы могут строиться на основе более чем одного слова.
Например, для слова по умолчанию не имеет смысла предполагать, что оно является дополнением при некотором глаголе .
Однако, если это слово модифицируется словом, такая гипотеза становится возможной.
Сравним: и.
Предлагаемая схема содержит специальный механизм предсказаний, с помощью которого можно строить предположения о синтаксической сочетаемости единиц входного предложения.
Этот механизм дополняет уже построенные синтаксические структуры нулевыми вершинами и фиксирует некоторые характеристики этих узлов .
В результате получаются новые синтаксические структуры с нулевыми вершинами.
Знания о синтаксической сочетаемости фиксируются в системе в виде правил на формальном языке.
Вторым механизмом предлагаемой схемы является механизм слияний.
С помощью этого механизма синтаксические структуры, в которых есть нулевые вершины, могут соединяться с другими синтаксическими структурами.
Соединяются всегда две структуры.
Нулевые вершины одной структуры отождествляются с вершинами другой .
В процессе отождествления вершин механизм слияний контролирует то, что в результате слияния получается древесная структура .
Отождествление вершин возможно только в тех случаях, когда их грамматические признаки не противоречат друг другу.
На рисунке 2 показан процесс сборки синтаксической структуры в виде последовательности предсказаний и слияний.
Синтаксические связи обозначены сплошными стрелками.
Вершины, участвующие в слияниях, связаны пунктирными линиями без стрелок.
Связь, оправдывающая нулевую вершину, обозначена пунктирной стрелкой.
Заметим, что алгоритм слияний допускает построение непроективных конструкций.
Параллельно с механизмами предсказаний и слияний функционирует еще один механизм штрафов .
С его помощью каждой промежуточной структуре сопоставляется вектор вещественных чисел, называемый штрафным вектором.
Норма такого вектора характеризует качество синтаксической структуры.
Чем ближе ее значение к нулю, тем лучше  синтаксическая структура.
Различные компоненты штрафного вектора соответствуют различным типам лингвистических ПРЕДЛОЖЕНИЕ был отца синий у сына стол у зеленый явлений, наблюдаемых в синтаксических структурах и позволяющих делать выводы об их правдоподобности.
К таким явлениям относятся, например,  или наличие повторений связей, которые считаются неповторимыми.
Основной набор лингвистических явлений, учитываемых при оценке синтаксических структур, взят из [5].
Для работы со структурами, включающими нулевые элементы, данный набор был расширен.
Расширение нужно для обработки эллиптических конструкций.
В результате действия механизма предсказаний получаются эллиптические конструкции, которые нужно разделять за счет штрафов на более правдоподобные и менее правдоподобные.
Таким образом, предложенный алгоритм обрабатывает эллипсис естественным образом.
В заключение необходимо отметить, что в работе предложен подход к решению задачи синтаксического анализа.
Характерная особенность подхода в том, что корректная обработка эллиптических конструкций не реализуется за счет стоящих особняком специальных механизмов, она является естественным элементом общей схемы синтаксического анализа, включающей три параллельно функционирующих механизма: механизм предсказаний, механизм слияний и оценочный механизм.
На данный момент имеется базовая реализация предложенного подхода.
Используются небольшой набор правил предсказаний и упрощенный механизм штрафов.
В ближайшем будущем планируется развить предлагаемый подход, повысить эффективность созданного алгоритма, а также провести масштабное тестирование алгоритма на размеченном корпусе.
Для решения задачи квадратичного программирования разработаны различные приближенные методы и варианты квадратичного симплексметода, основанные на методе Лагранжа [14].
Но приближенные методы не способны дать точное решение, а симплекс-метод требует введения дополнительных переменных и учета нелинейных условий дополнительной нежесткости, что усложняет задачу и увеличивает ее размерность.
В [5] описан метод, заключающийся в последовательном решении квадратичной задачи на различных гранях множества ограничений, при этом требуется решать системы линейных уравнений меньшей размерности, чем при использовании симплексметода, но большей, чем число переменных целевой функции.
В данной работе предложен точный метод решения квадратичной задачи, основанный на решениях систем линейных уравнений, размерность которых не выше числа переменных целевой функции.
Суть метода состоит в том, что задача поиска максимума квадрики на многогранном множестве ограничений сводится к задаче поиска минимального расстояния между точкой безусловного максимума и границей многогранной области ограничений.
Для определения расстояния строятся перпендикуляры к граням многогранника, а для уменьшения числа исследуемых граней разработан специальный порядок перебора граней.
Тогда решение задачи  следует искать на границе области ограничений [6].
Первым этапом решения является масштабирование задачи, заключающееся в замене переменных и приведении матрицы квадратичной формы к нормальному виду.
Вторым этапом решения является исследование элементов границы области и отыскание ближайшей точки методами аналитической геометрии.
Ограничения  образуют в[9].
Разделим ограничения задачи на две группы.
Найдем все видимые вершины многогранника как решения всех возможных систем из уравнений, образованных из ограничений  путем замены знака неравенства на равенство.
Решением такой системы будет вершина, если оно удовлетворяет всем ограничениям .
Если некоторые из ограничений не выполняются, то найденная точка является пересечением продолжений гиперплоскостей граней и не принадлежит.
Вершина может быть общей точкой и для большего чем числа гиперплоскостей, но для ее нахождения достаточно решить систему из уравнений [9].
Если определитель системы равен нулю, это свидетельствует об отсутствии общей точки у гиперплоскостей [10], такие системы также не следует рассматривать.
Примером в трехмерном пространстве может служить бесконечно длинная треугольная призма, образованная тремя попарно пересекающимися плоскостями.
Поскольку вершина может принадлежать более чем гиперплоскостям, следует проверить каждую найденную вершину на принадлежность еще не рассмотренным гиперплоскостям ограничений и, если имеются гиперплоскости, содержащие эту вершину, исключить из рассмотрения соответствующие системы уравнений.
Поэтому исследование начинается с граней размерности 1, а затем исследуются грани меньшей размерности.
Грань размерности 1 описывается одним уравнением из ограничений .
Последними исследуются ребра многогранника то есть прямые линии, образованные пересечением 1 ограничений, причем хотя бы одно из ограничений должно быть видимым.
Если удовлетворены не все ограничения, надо исследовать грани меньшей размерности 1, имеющие с исследуемой гранью не менее двух общих ближайших вершин, затем грани размерности 2 и так до граней размерности 1, то есть ребер.
Предложенный алгоритм реализован в форме программы на языке С++.
Вычислительные эксперименты на модельных примерах показали эффективность метода и возможность его применения для решения задач оптимизации.
В частности, для решения задачи с целевой функцией от 3 переменных и областью ограничений, имеющей форму восьмигранной пирамиды, образованной пересечением 9 ограничений, для определения вершин потребовалось решить 25 систем из 3 уравнений, а для проведения перпендикуляров к граням и ребрам необходимо решить 12 систем из 3 уравнений и 7 систем из 2 уравнений.
При решении этой задачи симплексным методом потребуется неоднократно решать систему из 12 уравнений с 24 неизвестными, чтобы выполнить 12 нелинейных условий дополняющей нежесткости.
