
Современное состояние  компьютерных систем характеризуется превалированием угроз, связанных с наличием как незакрытых известных, так и неизвестных уязвимостей.
В то же время в стране фактически отсутствует регламентация безопасной разработки программных средств, ориентированная на снижение количества уязвимостей ИБ, формируемых на различных этапах жизненного цикла программ.
В этом плане остается нерешенным вопрос проведения как спецэкспертиз  предприятий, так и проверки производств  серийных программных изделий по требованиям безопасности информации.
Это определяет исследовательскую задачу, состоящую в анализе и синтезе комплекса мер по разработке безопасного ПО, решение которой представлено в данной статье.
Опыт крупных разработчиков ПО показал, что внедрение подобных мер в жизненный цикл его разработки позволяет сократить число уязвимостей ПО в среднем на 80 % [1].
Безопасным будем считать ПО, разработанное с использованием совокупности указанных мер.
Цель исследования состоит в создании концептуального аппарата, позволяющего разработчикам ПО обоснованно формировать множество мер разработки безопасного ПО и с привлечением независимых организаций проводить оценку соответствия применяемых мер требованиям по разработке безопасного ПО.
В соответствии с целью необходимо поставить следующие частные задачи исследования: анализ существующих мер, направленных на уменьшение количества уязвимостей в разрабатываемом ПО, и их применимости при проведении оценки соответствия ПО; формирование базового набора требований к разработке безопасного ПО, позволяющего проводить оценку соответствия  ПО данным требованиям; разработка концептуальной модели анализа и синтеза комплекса мер разработки безопасного ПО.
В качестве ограничения области исследования следует определить необходимость гармонизации получаемых решений с современной нормативной базой оценки соответствия в области ИБ  [2] и жизненного цикла программ  [3].
Результаты сравнительного анализа указанных стандартов представлены в таблице 1.
На основании проведенного анализа сделаны следующие выводы.
1.
2.
Для создания ПО с минимальным количеством уязвимостей и формирования среды устранения выявленных проблем рассмотренные документы предлагают использовать на различных стадиях жизненного цикла ПО совокупность мер разработки безопасного ПО.
Предлагаемая номенклатура мер разработки безопасного ПО, как правило, является стандартной и содержит меры, связанные, например, с моделированием угроз, проведением статического и динамического анализа, тестирования на проникновение [10, 11].
3.
Рассмотренные документы не содержат четко определенного аппарата, который можно было бы использовать для оценки соответствия процессов разработки ПО требованиям разработки безопасного ПО, например в рамках его сертификации.
Следует отметить, что международный стандарт ISO 15408 в настоящее время широко используется при проведении сертификации ПО по требованиям безопасности информации, но использование положений только этого документа при разработке и последующей оценке соответствия безопасного ПО не является достаточным, поскольку, во-первых, стандарт применяется только для ПО с функциями безопасности, иначе говоря, для ПО, в котором функции безопасности не реализованы, не может быть написано требуемое стандартом задание по безопасности и, соответственно, проведена оценка соответствия; во-вторых, предлагаемая в третьей части стандарта номенклатура мер разработки ПО не обладает полнотой: в частности, отсутствуют меры, связанные с проведением статического и динамического анализа, обучением сотрудников и др.
По этой причине в данном исследовании было принято решение об использовании аппарата ISO 15408 при разработке концептуальной модели анализа и синтеза мер разработки безопасного ПО.
На рисунке 1 представлена последовательность формирования множеств функций безопасности ПО  и мер обеспечения доверия к нему в соответствии с методологией ISO 15408.
При определении среды безопасности ПО приводится описание следующих аспектов безопасности среды, в которой предполагается использовать ПО: предположений безопасности, содержащих аспекты безопасности среды, в которой будет использоваться ПО или предполагается к использованию; угроз безопасности информации, касающихся активов, против которых требуется защита средствами ПО или его среды; политик безопасности организации, идентифицирующих и при необходимости объясняющих положения политики безопасности организации или правила, которым должно подчиняться ПО.
Цели безопасности отражают изложенное намерение противостоять всем установленным угрозам ИБ, а также охватывать все предположения безопасности и установленную политику безопасности организации.
При изложении требований безопасности ПО должны быть определены функциональные требования (например, требования к идентификации/аутентификации или разграничению доступа) и требования доверия, которым должны удовлетворять ПО и процесс его разработки.
Выбор функциональных требований безопасности и требований доверия к безопасности осуществляется из каталогов требований, представленных во второй и третьей частях стандарта.
С целью удовлетворения идентифицированных функциональных требований безопасности и требований доверия формулируются перечни функций безопасности ПО и мер разработки ПО.
Все идентифицированные множества  должны быть согласованы друг с другом .
Для адаптации представленного на рисунке 1 порядка формирования и обоснования перечней функций безопасности ПО и мер разработки ПО, а также достижения цели настоящего исследования был получен базовый набор требований по разработке безопасного ПО.
При формировании базового набора требований по разработке безопасного ПО учитывались следующие особенности.
1.
С целью обеспечения практического применения и эффективного выполнения требований разрабатываемый набор должен согласовываться с международным стандартом ISO 12207, который описывает процессы жизненного цикла ПО [3, 13].
2.
Поскольку известно, что стоимость устранения уязвимостей ПО в более поздних процессах жизненного цикла ПО (например, в процессе тестирования или поддержки ПО) выше, разрабатываемый набор требований должен обеспечить внедрение необходимых мер на самых ранних стадиях разработки ПО [14, 15].
3.
При выполнении исследования с целью учета выявленных особенностей было предложено использовать следующий набор параметров при описании требования по разработке безопасного ПО: название требования; уникальный идентификатор требования; ссылка на процесс жизненного цикла ПО, установленный стандартом ISO 12207, в ходе которого может быть выполнено требование; цель в области разработки безопасного ПО, достигаемая разработчиком при выполнении данного требования; элементы действий разработчика, содержащие описание действий разработчика ПО, направленных на удовлетворение требования; элементы содержания и представления документированных свидетельств выполнения требования; элементы действий оценщика, содержащие описание действий оценщика, направленных на независимую проверку выполнения разработчиком ПО требования; примечание с пояснительным текстом.
Название: статический анализ исходного кода программы.
Идентификатор требования: КК-4.
Процесс жизненного цикла ПО: процессы конструирования и комплексирования ПО.
Цель: выявление и устранение потенциально уязвимых конструкций в исходном коде программы, а также формирование исходных данных для выполнения задач динамического анализа и тестирования на проникновение в рамках процесса квалификационного тестирования ПО.
Элементы действий разработчика: разработчик ПО должен проводить статический анализ исходного кода программы с целью выявления потенциально уязвимых конструкций в исходном коде программы; статический анализ исходного кода программы следует проводить в отношении заимствованных у сторонних разработчиков ПО компонентов, если для них доступен исходный код программы; по результатам статического анализа исходного кода программы может проводиться доработка программы; при отсутствии необходимости в такой доработке или невозможности доработки программы разработчик должен документировать обоснование этого факта.
Элементы действий оценщика: оценщик должен исследовать представленные свидетельства и подтвердить, что они удовлетворяют предъявляемым требованиям, а также сделать независимое заключение, что разработчик выполняет статический анализ исходного кода программы по результатам опроса работников организации-разработчика ПО, имеющих отношение к разработке ПО, и анализ среды разработки ПО.
Примечание: статический анализ исходного кода программы выполняется разработчиком ПО или сторонними организациями, обладающими компетенцией в области выявления уязвимостей ПО, для актуальной версии кода программы; статический анализ исходного кода программы позволяет выполнить поиск потенциально уязвимых конструкций в исходном коде программы, которые могут привести к наличию уязвимости ПО, а также проверять соответствие исходного кода программы принятому в организации стандарту оформления исходного кода программы.
Представленный базовый набор требований разработки безопасного ПО использовался при создании концептуальной модели анализа и синтеза комплекса мер разработки безопасного ПО.
Заметим, что в соответствии с ISO 15408 угрозы безопасности информации можно описать в неформальном  стиле с использованием таких характеристик, как аннотация угрозы ИБ; источник угрозы ИБ; способ реализации угрозы ИБ; используемые уязвимости; вид информационных ресурсов среды разработки ПО, потенциально подверженных угрозе ИБ; нарушаемое свойство безопасности информационных ресурсов среды разработки ПО; возможные последствия реализации угрозы ИБ.
При описании среды безопасности согласно ISO 15408 предусмотрено использование дополнительного множества предположений безопасности.
Однако, так как при проведении анализа и синтеза комплекса мер разработки безопасного ПО среда разработки ПО точно идентифицирована и определена, формирование перечня предположений является избыточным.
Введем следующие отображения: : 0 процедура формирования целей разработки безопасного ПО; : процедура выбора требований по разработке безопасного ПО; : процедура синтеза мер разработки безопасного ПО.
Разработанная концептуальная модель характеризуется кортежем, , , , , , ,.
При разработке модели предполагаем, что все требования являются нефункциональными, иначе говоря, по сути это аналоги требований доверия по ISO 15408-3.
В ходе проведения исследования была разработана общая методика анализа и синтеза мер разработки безопасного ПО, включающая выполнение следующих этапов и шагов.
Идентификация и описание аспектов безопасности среды разработки ПО, включающих следующие шаги.
В качестве источников для формирования множества политик безопасности могут использоваться требования законов, нормативных правовых актов, отраслевых стандартов, перечень требований пользователя, сценарии использования ПО.
Формирование и обоснование множества целей разработки безопасного ПО, включающие следующие шаги.
Формирование множества целей разработки безопасного ПО:.
Обоснование полноты и достаточности сформулированного множества целей разработки безопасного ПО.
Обоснование должно показывать, что изложенные цели охватывают все идентифицированные аспекты безопасности  среды разработки ПО.
Данная демонстрация выполняется следующим образом: а) обоснование полноты с использованием перекрестных ссылок цели разработки безопасного ПО, направленные на учет идентифицированных множеств угроз ИБ и положений политики ИБ, целесообразно оформить в виде таблицы, которая должна наглядно показывать, что каждая цель охватывает, по крайней мере, одну угрозу ИБ или положение политики ИБ; каждая угроза ИБ или положение политики по безопасности охвачены, по крайней мере, одной целью разработки безопасного ПО; б) обоснование достаточности множества целей разработки безопасного ПО необходимо продемонстрировать, что множества целей разработки безопасного ПО достаточно для учета всех аспектов среды разработки ПО; для этого таблицу соответствия целей и аспектов среды разработки ПО необходимо дополнить следующим неформальным пояснением: для каждой угрозы ИБ необходимо продемонстрировать, что изложенные цели позволяют выполнить нейтрализацию данной угрозы ИБ; для каждого положения политики ИБ необходимо показать, каким образом изложенные цели обеспечивают ее выполнение.
Выбор и обоснование требований по разработке безопасного ПО, включающие следующие шаги.
Обоснование полноты и достаточности выбранного множества требований по разработке безопасного ПО.
Обоснование выполняется аналогично описанному в шаге 4, с использованием перекрестных ссылок и неформального пояснительного теста.
Синтез и обоснование мер разработки безопасного ПО.
Обоснование полноты и достаточности синтезированного множества мер разработки безопасного ПО.
Обоснование выполняется аналогично описанному в шаге 4, с использованием перекрестных ссылок и неформального пояснительного теста.
Следует отметить, что в работе не ставилась цель получить значения указанных математических показателей, однако эффективность предложенного концептуального подхода была подтверждена результатами сравнения уровня уязвимости программных продуктов, разработанных в организациях, имеющих авторитетные зарубежные сертификаты на системы менеджмента ИБ, и продуктов, разработанных иными разработчиками ПО.
Анализ статистики за 20082015 гг.показал, что обобщенный показатель числа уязвимостей в продуктах первой категории ниже в 5 раз, чем аналогичный показатель у продуктов второй категории [20].
В заключение отметим, что в ходе проведенных исследований были получены следующие основные результаты.
Выполнен анализ существующих мер и подходов, направленных на уменьшение количества уязвимостей в разрабатываемом ПО, и их применимости при проведении оценки соответствия ПО требованиям по безопасности информации.
В результате установлено, что на сегодняшний момент существует ряд стандартов различного уровня, посвященных разработке безопасного ПО.
Вместе с тем нет единого подхода, оформленного в форме нормативного документа, обеспечивающего интеграцию с существующими стандартами, определяющими процессы жизненного цикла программ, например, определенными ISO 12207; обоснованный выбор совокупности мер разработки безопасного ПО; оценку соответствия процессов создания программных изделий требованиям разработки безопасного ПО, в первую очередь, в рамках обязательной сертификации серийных программных средств защиты информации  и обязательного лицензирования таких видов деятельности, как производство программных средств защиты информации.
На основе анализа, систематизации и обобщения стандартов в области разработки безопасного ПО разработан базовый набор из 24 требований по разработке безопасного ПО.
Отличительные особенности разработанного базового набора требований: наличие перекрестных ссылок на процессы жизненного цикла ПО, определенные ISO 12207, что обеспечивает более простую интеграцию в уже существующие в организации-разработчике ПО процессы разработки ПО; наличие требований к документированным свидетельствам выполнения требований и к действиям независимого оценщика, что позволяет детерминировать процесс независимой оценки соответствия процессов разработки ПО требованиям разработки безопасного ПО, например, в рамках сертификации ПО.
Предложена концептуальная модель анализа и синтеза мер разработки безопасного ПО, которая обеспечивает возможность обоснованного выбора мер разработки безопасного ПО и обладает свойством согласованности со стандартами линейки Common Criteria.
Это позволяет выполнить внедрение предложенной в рамках модели методики анализа и синтеза комплекса мер разработки безопасного ПО в организациях, уже имеющих опыт проведения сертификации разрабатываемого ПО в соответствии с методологией ISO 15408.
Концептуальная модель анализа и синтеза комплекса мер разработки безопасного ПО использовалась при разработке проекта национального стандарта ГОСТ Р Защита информации.
Разработка безопасного программного обеспечения.
Общие требования, прошедшего экспертизу в рамках работы Технического комитета по стандартизации ТК-362 Защита информации.
