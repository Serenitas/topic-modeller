
Любая многопроцессорная система должна быть проинициализирована по включении питания для корректной работы всех ее узлов.
В многопроцессорных системах важнейшими компонентами являются процессорные элементы  и коммуникационная сеть, соединяющая процессорные элементы и крэйты [1].
В данной работе рассматриваются высокопроизводительный интерфейс RapidIO  и способы инициализации такой среды.
Коммуникационная среда RIO состоит из коммутаторов и  [2].
Спецификацией определены два физических уровня: LP-LVDS канал точка-точка, представляющий собой параллельный 8и 16-разрядный дуплексный интерфейс с максимальной частотой тактового сигнала 1000 МГц, и LP-Serial канал точка-точка, представляющий собой последовательный дуплексный интерфейс, состоящий из 1, 2, 4, 8 или 16 подканалов с максимальной скоростью передачи битового потока по каждому подканалу 10,3125 Гбод [3, 4].
Инициализация коммуникационной среды RIO включает в себя назначение ОУ идентификаторов  и прописывание коммутаторов маршрутами, определяющими пути пакетов от ОУ к ОУ [5].
Выделяют два подхода к инициализации коммуникационной среды динамический и статический.
Пример динамического подхода спецификации RIO [6] показан на рисунке 1.
На практике приведенный алгоритм необходимо модифицировать прокладкой перекрестных маршрутов между всеми  и ограничениями на просмотр портов коммутаторов  необходима локализация алгоритма в крэйте или в группе крэйтов.
Кроме того, совершенно не учитываются предполагаемые потоки данных между ПЭ.
Данный подход не подходит и для случая, когда требуется знание физической конфигурации  после инициализации.
В этом подходе при изменении физического состава ВК функциональный состав может остаться прежним.
На примере процессорных модулей ЦП-РИО-64 и мезонина М-РИО-А, разработанных в НИИСИ РАН , показан результат определения устройств RIO.
Процессорный модуль ЦП-РИО-64А включает в себя два процессора 1890ВМ6Я  и коммутатор 1890КП3Я  [7], а модуль ЦП-РИО-64Г один процессор 1890ВМ6Я и коммутатор 1890КП3Я.
Мезонин М-РИО-А включает только процессор 1890ВМ6Я.
И, если подключить М-РИО к модулю ЦП-РИО-64Г, полученный функциональный состав ВК после применения алгоритма обхода среды RIO будет совпадать, как и для модуля ЦП-РИО-64А.
С данной задачей позволяет справиться статический подход.
Он реализуется по заранее составленному набору служебных операций записи MAINTENANCE WRITE [8], которыми осуществляется инициализация устройств RIO в системе.
Сложность этого подхода растет с количеством используемых устройств RIO.
Для более эффективного составления набора операций MAINTENANCE WRITE предлагается использовать конфигуратор на основе базовых блоков RIO, которые представляют собой модели используемых модулей.
Каждый модуль имеет порты RIO для связи с другими модулями, причем номера портов могут совпадать.
Каждый модуль уже имеет определенный состав устройств RIO, поэтому программно описать состав модуля и таблицу маршрутизации обмена в рамках модуля не составляет труда.
Полученные базовые блоки подключаются между собой, используя географический адрес, уникальные номера портов и тип связей (например, объединительная плата или кабель).
По этим данным формируется набор служебных пакетов записи MAINTENANCE WRITE.
Так как каждый ВК в основном содержит в себе набор однотипных модулей, связи между оконечными устройствами внутри модуля в ВК повторяются.
При использовании базовых блоков модуля в несколько раз сокращается время, которое требуется на описание повторяющихся связей между устройствами RIO, в зависимости от используемых модулей в ВК.
Полученная инициализация позволяет провести проверку соответствия ВК с заявленной схемой подключения прибора.
В случае, если полученная инициализация RIO для тестирования многопроцессорной системы используется многократно, можно воспользоваться аппаратной поддержкой инициализации таблицы маршрутизации RIO, встраиваемой в коммутаторы.
Принцип работы следующий: к коммутатору подключается EEPROM по интерфейсу I2C, в него прописываются  адреса регистров и их значения, после включения питания производится выгрузка этих значений в регистры коммутатора RIO.
В результате настраиваются таблицы маршрутизации этих коммутаторов при загрузке системы и сокращается время на программную инициализацию среды.
Данный подход реализован в коммутаторах 1890КП3Я  НИИСИ РАН и в коммутаторах компании Integrated Device Technology  [9].
Динамический подход применяется на этапе отладки многопроцессорных систем и в тестовых задачах.
Предлагаемый способ инициализации среды RIO хорошо применим к тестируемой системе [10].
Эффективность данного способа в большей мере проявляется при построении различных модификаций многопроцессорной системы на базе подготовленных базовых блоков RIO.
