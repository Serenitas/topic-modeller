, 528.06.
При работе сложных информационно-технических систем зачастую возникает необходимость обработки разнородной информации, получаемой с помощью различных аппаратных и программных средств [1, 2].
Выходная информация поступает на вход следующей операции обработки данных и т.д.
до получения конечного результата, предоставляемого конечным пользователям.
Данные особенности опираются на принципы процедурного программирования, однако зачастую для обработки данных требуются значительные вычислительные ресурсы, которые достаточно сложно применять при процедурном программировании.
Эту проблему целесообразно решать с помощью объектно-ориентированного подхода, основой для которого являются данные.
То есть необходимо создать такие формы данных, которые могли бы выражать важные характеристики решаемой задачи [2, 3].
Поэтому целесообразно рассмотреть ИТП с точки зрения ООП.
Опуская различия в аппаратных средствах получения информации, рассматривая программные части ИТП и опираясь на принципы наследования, полиморфизма и инкапсуляции, необходимо создать абстрактный ИТП Э, в котором используется ряд операций, необходимых для достижения целевой функции обеспечения потребителей информацией.
При этом операции и данные должны инкапсулироваться в ИТП.
При реализации конкретных ИТП обработки информации необходимо использовать механизмы наследования и полиморфизма с введением дополнительных информационных параметров.
Основными компонентами экземпляра ИТП являются входная информация, операции преобразования в виде технических, программных, организационных средств и ресурсов, а также цель .
Для каждой совокупности целесообразно создать прототип, то есть раннюю версию ПО обработки.
Прототип ПО частичное, возможное и предварительное воплощение предлагаемого нового продукта.
Как известно, прототипы служат трем основным целям [6, 7]: прояснение, формулировка и утверждение требований; исследование альтернативных решений; создание подмножества, которое в итоге станет конечным продуктом.
Главная цель создания прототипа устранение неясностей на ранних стадиях процесса разработки, так, например, механизм доставки и формат информации могут определяться посредством требований к внешним интерфейсам.
Однако необходимо понимать, как будет использоваться эта информация, чтобы правильные данные преобразовывались соответствующим образом и поставлялись в другую систему в удобной для применения форме.
Для разработки прототипа целесообразно использовать модель параллельной разработки ПО, так как все этапы выполняются одновременно, что достигается путем определения состояния разработки ПО.
Каждый программный модуль помечается состоянием, в котором находится.
При этом определяются формальные критерии перехода состояний, при выполнении которых модулю разрешается перейти из одного состояния в другое.
Соответственно разработчики концентрируются на действиях в пределах какого-то одного состояния.
На рисунке приведен пример перехода состояний для модели параллельной разработки [6].
Первоначально всем программным модулям приписывается состояние ожидание разработки.
Можно считать, что это состояние очередь для разработчиков.
Модуль не перейдет в состояние в процессе разработки, пока не будет назначена группа разработчиков.
По завершении модуль переходит в состояние в процессе анализа, где ему назначается группа анализа.
Пока назначение не произошло, модуль не может перейти в это состояние.
Процесс повторяется снова и снова.
Так как модули разрабатываются одновременно разными группами, в одном состоянии могут находиться сразу несколько модулей [7].
Кроме того, создание прототипа позволяет оценить затраты на создание ПО и принять соответствующее управленческое решение [8, 9].
Для оценки затрат целесообразно применить алгоритмическую модель оценки стоимости разработки ПО COnstructive COst MOdel  [10].
Известно, что модель COCOMO применима к трем классам проектов разработки ПО: органическому, полуразделенному и встроенному.
COCOMO состоит из иерархии трех последовательно детализируемых уровней [10]: базового, среднего и детального.
С учетом того, что рассматривается прототип ПО ИТП, необходимо использовать базовый уровень, который позволяет оценить трудоемкость и стоимость разработки ПО как функцию от размера программы, при этом размер выражается в оценочных тысячах строк программного кода.
Для обозначения объема программных строк используется единица KLOC  [6].
С помощью метода экспертных оценок и/или метода аналогов можно получить примерные оценки значений KLOC для каждого из соответствующего ИТП и рассчитать значения, ,.
Таким образом, в статье рассмотрены вопросы разработки прототипа ПО ИТП обработки информации на основе объектно-ориентированного подхода.
При создании прототипа целесообразно использовать параллельную модель разработки.
Затраты на разработку прототипа ПО ИТП предложено рассчитывать с помощью алгоритмической модели COCOMO.
С учетом повышенных требований, предъявляемых к информационным системам ракетно-космической отрасли, при оценке затрат необходимо использовать встроенный тип проекта и базовый уровень проекта модели COCOMO.
