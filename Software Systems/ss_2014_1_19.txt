С развитием вычислительной техники и средств передачи данных все большую актуаль-
ность приобретают программные системы (ПС), предоставляемые пользователю как услуга (Soft-
ware as a Service, SaaS) (см. http://www.gartner.com/ it/page.jsp?id=1739214&M=6e0e6b7e-2439-4289-b697- 863578323245 ). Основные преимущества SaaS по сравнению с традиционной установкой ПО [1]:
повышение безопасности и надежности работы с данными, простота и скорость доставки ПС до
пользователя, уменьшение стоимости владения и обслуживания (TCO); повышение масштабируе-
мости.
При этом ПО SaaS может быть использовано как в  хостинг-провайдеров, так и в собственных ЦОД предприятия.
Пользовательский уровень состоит из веббраузера и клиентского ПО, исполняющегося в веб-браузере.
В связи с постоянным появлением новых задач, решаемых ПО, растет сложность SaaS как одного из типов ПО [2].
При проектировании сложной системы ПО необходимо разделять ее на меньшие части, каждую из которых можно уточнять независимо друг от друга и использовать повторно.
В настоящее время веб-стандарты не определяют метод разработки модульных приложений на пользовательском уровне [3].
Изначально вебтехнологии в браузере предназначались для создания простых документов и авторы стандартов не предполагали их использование для создания сложных приложений.
На практике автор статьи столкнулся с необходимостью разработки модульной технологии для пользовательского уровня SaaS при создании интеллектуальной системы хранения, обработки и анализа данных GEO4GEO [4].
Это также приводит к нарушению принципа открытости/закрытости  [5].
Рассмотренные проблемы порождают необходимость создания методики разработки модульных приложений на клиентской стороне SaaS и программной реализации.
Следует заметить, что в контексте данной публикации SaaS-система это не просто клиент-серверное приложение с клиентом-браузером, а система, которая должна масштабироваться на всех уровнях с целью обеспечения и отказоустойчивости, и высокой доступности для пользователей.
В настоящей работе будут представлены методика разработки модульных приложений на пользовательском уровне SaaS и программная реализация в служебной библиотеке modules.js [6].
Основная задача методики модуляризация программного кода при разработке пользовательского уровня SaaS.
Для решения задачи необходимо выполнить совокупность следующих действий.
1.
Анализ предметной области и постановка пользовательских задач в рамках разрабатываемого ПО.
2.
Выделение подзадач, которые необходимо решить на пользовательском уровне SaaS.
3.
Определение набора модулей для решения подзадач.
Принимать решение о необходимости выделения части ПО на клиентском уровне SaaS в модуль нужно исходя из правила: в модуль необходимо выделять ту и только ту функциональность, которая используется более одного раза.
Применение этого правила позволит избежать создания модулей без необходимости.
Операцию определения набора модулей нужно рекурсивно выполнять на каждом модуле, пока дальнейшее выделение модулей в модулях не достигнет предела.
Таким образом, становятся возможными как модуляризация разрабатываемого приложения до мельчайших деталей, где вероятно дублирование программного кода, так и разработка, тестирование и повторное использование каждой детали независимо.
4.
Программирование разработанных модулей и написание автоматических тестов для каждого из них.
Этот этап считается выполненным, если приемочные тесты функциональности каждого модуля проходят в изолированной от приложения среде с загруженным модулем.
При этом допускаются использование в тестах заглушек к серверной стороне SaaS и генерирование сообщений от других модулей, которые может обрабатывать данный модуль.
Тестирование в изолированной среде позволяет добиться переносимости модулей между приложениями.
5.
В качестве контейнера в методике принимается разметка части страницы, подготовленная к загрузке модулей.
6.
Тестирование разработанного приложения с помощью автоматических и ручных тестов (в том числе приемочных).
В результате применения методики будет получено модульное приложение на пользовательском уровне SaaS, а решаемые задачи декомпозированы на множество подзадач, что позволит различным разработчикам решать подзадачи и в будущем повторно использовать решения.
При этом масштаб программной системы, с которой может использоваться методика, не имеет значения: методика применима как к небольшим статическим веб-сайтам без использования серверной стороны вообще, так и к сложным корпоративным программным системам, в которых пользовательский уровень выполняется на клиентской стороне в браузере.
Данная методика не зависит от конкретных служебных библиотек, но в качестве эталонной реализации используется служебная библиотека modules.js.
Служебная библиотека автоматизирует служебные операции, требуемые для выполнения действий 4 и 5 методики при решении основной задачи.
Автоматизируются следующие служебные операции.
1.
Все функции могут выполняться асинхронно.
Для всех функций управления загрузкой и выгрузкой компонентов приложения есть возможность определения окончания загрузки и выгрузки, реализованная через обратный вызов и генерирование события по окончании загрузки и выгрузки.
Загрузка компонентов приложения возможна только в рамках одного домена в целях предотвращения уязвимостей безопасности типа XSS [7].
2.
Управление событиями модулей .
Данная часть содержит набор функций для регистрации и обработки событий, специфичных для работы с модулями, таких как события, возникающие после полной загрузки контейнера, загрузки модуля, шаблона или части модуля.
3.
Управление коммуникацией с серверной стороной .
Данная часть содержит возможность создания приложений клиентского уровня SaaS, которые позволяют перенаправлять запросы модулей к серверной стороне SaaS так, чтобы от модуля не требовалось знание конкретного адреса сервера для организации запроса, а использовался относительный путь к REST-сервису.
Данные о серверах конфигурации загружаются при старте клиентской стороны SaaS из конфигурационного файла json.
Серверы конфигурации сообщают клиентской стороне SaaS список адресов серверов в рамках домена, готовых обработать запрос.
Таким образом обеспечивается динамическое масштабирование серверной стороны без изменения программного кода модулей.
Возможно также использование данной части служебной библиотеки без внедрения на серверной стороне серверов конфигурации, указав в файле конфигурации текущие адреса всех обслуживающих запросы модулей, серверов серверной стороны SaaS.
Созданная программная реализация методологии помогает разработчику SaaS решать задачу модуляризации ПО согласно методологии, описанной в данной статье, в случае разработки как простых сайтов, так и сложных масштабируемых программных систем.
К недостаткам данной программной реализации можно отнести большие, чем у статических страниц на пользовательском уровне SaaS, временные затраты на программную сборку клиентского уровня в браузере.
Программная реализация в служебной библиотеке modules.js используется в интеллектуальной системе хранения, обработки и анализа геоданных GEO4GEO для построения пользовательского уровня SaaS из модулей [4].
В результате были созданы методика разработки модульных веб-приложений на пользовательском уровне SaaS и программная реализация в служебной библиотеке modules.js.
В рамках методики предложен набор действий для решения проблемы модуляризации пользовательского уровня SaaS.
Разработанная служебная библиотека modules.js автоматизирует служебные операции, требуемые для выполнения части действий методики, и позволяет разрабатывать модульные приложения на пользовательском уровне SaaS.
Данная методика и программная реализация успешно использованы в интеллектуальной системе хранения, обработки и анализа данных GEO4GEO в производственном процессе подсчета запасов нефти и газа.
