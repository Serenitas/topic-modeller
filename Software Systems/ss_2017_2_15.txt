
Большая часть методов построения трехмерных моделей реальных объектов использует дальностные данные, получаемые с помощью стереокамер, лазерных дальномеров или алгоритмов компьютерного зрения по серии изображений этого объекта, снятого с разных точек.
В научной литературе на такие данные ссылаются как на дальностные изображения  или карты глубин  [1].
С каждым пикселем range image/depth map связывается расстояние до видимой точки объекта в пространстве сцены.
Пространственные данные могут быть представлены в виде облака точек в трехмерном пространстве или в виде триангуляционной поверхности.
Наряду с задачей объединения этих триангуляционных сеток, подразумевающей построение единой связной оболочки без дублирования участков поверхности, стоит задача зашивки дыр и построения текстуры.
Зашивка дыр происходит на этапе заполнения неявной функции в воксельном пространстве, хотя методы зашивки могут использоваться на этапе обработки триангуляционной модели, как, например, в [2, 3].
Представленный в настоящей статье метод построения единой целостной трехмерной модели основывается на подходе, предложенном в [4, 5], а также на более ранних работах [6, 7] и направлен на преодоление указанных недостатков.
Работа выполнялась в контексте решения более общей задачи по созданию трехмерных сцен на последовательностях изображений.
Вклад авторов состоит в разработке оригинального алгоритма, в котором осуществляется построение гибридной весовой функции для слияния текстур с учетом таких факторов, как угол наблюдения, тень/пересвет и близость к краю скана, обеспечивается оптимизация вычислений за счет эффективной структурной организации данных, а также достигается высокая скорость обработки данных за счет параллельных вычислений на многоядерных процессорах.
В предложенном методе подразумевается, что сканер стоит неподвижно, а модель вращается на специальной площадке, поэтому для каждого участка поверхности меняется освещение, а, например, в [8] модель стоит неподвижно, а сканер перемещается вокруг, поэтому модель освещена одинаково для разных видов, но необходимо убрать погрешности сканирования.
В [9] авторы пользуются низкополигональными объектами и, помимо прочего, решают задачу частичного перекрытия треугольников, а в рассматриваемом случае это модель с треугольниками, текстура которых имеет площадь, близкую к площади одного-двух пикселей, и решать задачу частичного перекрытия нет смысла.
Но в целом эти методы близки к предложенному в данной статье.
В [8] используется блендинг с равновесным участием всех видов.
Это хорошо работает, если освещение модели меняется незначительно и не появляются дополнительные тени.
Предложенный в настоящей статье метод дает лучший результат, чем равновесный блендинг.В [9] используется блендинг с учетом веса по наклону нормали от вектора наблюдения и веса по глубине, но не учитывается вес по дистанции от края скана, а именно на краю скана обычно образуются треугольники с максимальными искажениями, которые могут дать некорректные результаты.
Также не учитывается вклад теней и пересветов.
Стоит отметить и скорость работы.
Для [8] это 1030 минут для 1020 тысяч треугольников, для [9] 14 минуты для 1015 тысяч треугольников.
Предложенным в данной работе методом обрабатывается за 0.51.5 минуты 25 миллионов треугольников, то есть обработка осуществляется на несколько порядков быстрее.
Однако из-за метода съемки в нашем случае нет необходимости устранять неточности при сканировании.
Также стоит отметить работу [10], в которой для обеспечения нужной точности моделирования и текстурирования используется, помимо фотокамеры, еще и лазерный сканер.
Исходными данными являются набор триангуляционных сеток, полученных стереометодом с разных точек наблюдения, и фотоизображения с известной внешней и внутренней калибровкой камер.
В результате необходимо получить объединенную текстурированную модель.
Сканирование выполнено трехмерным сканером фирмы RangeVision.
Объединение происходит с помощью воксельного метода, использующего октодерево, для оптимизации применения компьютерной памяти.
Основа метода построение гибридной весовой функции в каждом прилегающем к поверхности модели вокселе.
Данная функция строится на самом нижнем, детальном уровне октодерева, а затем пересчитывается на четыре уровня вверх, где происходит диффузное размытие.
Диффузное размытие необходимо для заполнения пустых вокселей значениями с соседних  вокселей, по этим значениям будет строиться новая поверхность.
Построение итоговой поверхности производится методом марширующих кубиков.
Наиболее ресурсоемкой частью представленного выше метода является определение расстояний от вокселов до ближайшей поверхности при построении весовой функции.
Вычислительная трудоемкость возникает из-за необходимости перебора всех треугольников с вычислением соответствующих расстояний.
Чтобы избежать избыточных вычислений, предлагается механизм с предварительной индексацией всех треугольников сетки каждого вида.
Для этого используется двухмерный массив с размерностью, равной размерности изображения этого вида.
Тогда можно спроецировать каждый треугольник исходной сеткиизображение.
В результате каждое значение массива приобретает либо индекс, указывающий на принадлежность к определенному треугольнику, либо 0, то есть отсутствие проекции.
Такая процедура возможна, поскольку исходная сетка для каждого вида является заведомо видимой, то есть не содержит невидимых на этом виде граней.
Использование индексов при последующей работе алгоритма позволяет избежать полного перебора по всем треугольникам каждого вида и существенно уменьшает время работы алгоритма.
Каждый треугольник построенной трехмерной модели проецируется на каждый из первоначальных видов.
Для каждого из них рассчитывается угол наклона от нормали треугольника к линии, проходящей через центр камеры.
Если угол превышает 90, треугольник невидим с этого вида и его можно отбросить.
Для треугольников, у которых этот угол близок к 90, велика вероятность ошибки, но на случай, если нет другого, более подходящего вида, эта проекция будет учтена и отбросится только в случае наличия лучшей альтернативы.
Вторая проверка проверка на видимость, то есть на то, что наблюдаемый треугольник не перекрыт другими треугольниками этой модели.
В общем случае потребовался бы перебор всех треугольников модели, что заняло бы значительное время.
Для оптимизации можно воспользоваться уже построенной для первоначальной модели индексной картой.
Для всех углов треугольника объединенной модели получим значения индексов треугольников исходных сканов до объединения.
Если расстояние между этими объектами меньше порогового значения, значит, не существует объектов, которые загораживали бы рассматриваемый треугольник.
Особняком стоят треугольники, полученные в результате зашивки дыр: у них нет индексов на первоначальной индексной карте, поэтому либо придется проверять их на видимость путем полного перебора, либо, если необходимо сэкономить время, игнорировать этот критерий, а использовать только критерий наблюдаемости.
Логично, что для текстуры каждого треугольника нужно выбрать видимый участок, снятый под минимальным углом.
Однако на стыках текстур, полученных с разных видов, появляются заметные границы .
Рассмотрим подробнее решение этой задачи.
Основной проблемой при текстурировании трехмерной модели с помощью исходных фотоизображений является различное освещение на разных видах.
На рисунке 3 продемонстрировано, как один и тот же участок поверхности модели выглядит по-разному на разных видах.
Решить эту задачу можно путем смешивания значений цвета для каждой точки текстуры с разных видов.
Однако равномерное смешивание текстур приводит к не самым идеальным результатам .
Дело в том, что виды неравнозначны, поскольку на некоторых из них присутствуют сильные тени и пересветы, а на некоторых нужный треугольник снят под очень большим углом или находится на границе скана, где обычно могут быть ошибки сканирования.
Если первые два параметра не вызывают трудностей с расчетом, то расчет расстояния от каждого треугольника до границы скана в прямом виде является крайне ресурсоемким, поэтому была предложена следующая оптимизация.
Уже существует построенная структура индексов для всех треугольников, которая в двухмерном виде содержит индексы треугольников и нули там, где треугольников нет.
Необходимо для каждого ненулевого значения вычислить расстояние до ближайшего нуля.
Поскольку найденные значения используются только в качестве веса, нет необходимости в вычислении абсолютных значений в 3D, достаточно вычислить дистанцию на плоскости.
Однако прямой перебор всех ненулевых значений и поиск ближайшего нулевого в заданном радиусе занимают продолжительное время, около 1.2 сек.
на каждый вид.
Поэтому была предложена следующая оптимизация.
Каждому ненулевому значению индекса присваиваем максимальный вес, затем проверяем, есть ли рядом нулевое значение; если есть, добавляем в список и присваиваем значение 1.
Затем осуществляем поиск значений, равных максимальному весу, только в соседних ячейках элементов из этого списка.
Такую итерацию производим необходимое число раз.
Данная оптимизация позволяет сократить время вычисления веса в 68 раз.
Рассчитав вес для каждого пикселя, построим финальную текстуру.
Для каждого пикселя каждого треугольника вычисляем цвет по формуле,  где число видов; исходный цвет с1.
Результат текстурирования представлен на рисунке 2в.
Использование многоядерности позволило увеличить скорость работы в среднем в 2,5 раза по сравнению с однопроцессорным вариантом.
Результаты экспериментов отражены в таблице.
Тестирование на реальных данных показало, что предложенные алгоритмические решения и структура данных с использованием октодерева, индексации треугольников, вычисления гибридной весовой функции для каждой точки текстуры существенно повысили качество визуализации и производительность метода по сравнению с аналогами.
