, 539.3.
В процессе решения задач механики деформируемого твердого тела при конечных деформациях для сжимаемых и несжимаемых материалов методом конечных элементов получаются системы нелинейных уравнений.
Их решение методом НьютонаРафсона сводится к решению на каждой итерации  с разреженной матрицей  с нерегулярной структурой.
Решение задачи тем точнее, чем мельче сетка, поэтому актуальна возможность решения системы уравнений максимально возможной размерности при заданных ресурсах ЭВМ [13].
В работе реализован программный модуль, объединивший различные алгоритмы и методы: прямые и итерационные решатели для симметричных и несимметричных матриц системы, различные предобуславливатели в итерационных методах и способы хранения матрицы в памяти, параллельные вычисления с использованием технологий OpenMP и CUDA [47].
В программном модуле реализован метод решения задач для несжимаемых материалов на основе алгоритма Узавы [812].
Для программного модуля разработан и реализован алгоритм оптимального выбора решателя в зависимости от механической постановки задачи, ее размерности и возможностей компьютера [13].
При желании пользователь может сам ограничивать некоторые возможности выбора и задавать параметры, влияющие на выбор решателя, или даже указать явно, какой решатель он хочет использовать.
После окончания работы решателя результат решения возвращается в ядро для дальнейшей обработки.
На рисунке 1 схематично показан принцип работы модуля и его взаимодействия с ядром.
Проведен ряд численных экспериментов, подтверждающих обоснованность приведенных выше критериев.
Программный модуль уже был использован в программном комплексе прочностного анализа CAE FIDESYS [14].
Пользовательский интерфейс для задания настроек программного модуля создан так, что некоторые параметры (например, указывающий на решение задачи с несжимаемым материалом или на симметричность задачи) скрыты от пользователя и определяются программно в зависимости от постановки задачи или параметров, заданных пользователем для материала.
Всегда, если есть возможность, стоит использовать прямые методы.
Другим преимуществом прямых методов является то, что они находят решение за один проход, поэтому очень быстры.
Но у них есть и серьезный недостаток: требуется большой объем памяти для проведения численной факторизации, поэтому при больших размерах матрицы их использование становится невозможным.
Если, помимо прочего, известно, что матрица системы симметрична, то стоит использовать это для оптимизации (например, можно экономить память, храня только верхнюю часть матрицы) [4, 5].
В большинстве реальных 3D-задач матрица имеет слишком большую размерность и оперативной памяти не хватает для того, чтобы можно было пользоваться прямыми методами.
В таких случаях используются итерационные методы .
Здесь симметричность может служить уже не просто для оптимизации.
Существуют специальные методы только для симметричных СЛАУ, которые являются более стабильными и эффективными, нежели методы для несимметричных систем.
В симметричном случае хорошо зарекомендовал себя метод сопряженных градиентов .
Для несимметричных задач можно использовать его модификацию  или модификацию метода обобщенных минимальных невязок  [47].
Стоит отметить, что некоторые из них подходят только для симметричных случаев, так как использование такого предобуславливателя может нарушить симметрию СЛАУ.
Некоторые предобуславливатели реализованы только для CPU, а другие эффективны только для GPU.
Обратим также внимание на то, что использование предобуславливателя вынуждает нас выполнять некоторые дополнительные действия, связанные с созданием предобуславливателя и домножением на него.
Чтобы убедиться в оправданности этих действий и в том, что уменьшение количества итераций перекрывает все дополнительные затраты на использование предобуславливателя, были проведены некоторые численные эксперименты.
Как правило, чем сложнее в построении предобуславливатель, тем больше времени требуют эти дополнительные действия.
Но есть и обратная сторона: чем сложнее предобуславливатель, тем сильнее он уменьшает число обусловленности матрицы, а значит, дает лучшую сходимость.
Необходимо искать компромисc.
Итерационные методы хорошо поддаются распараллеливанию.
Поэтому, если позволяет архитектура компьютера, очень важно использовать такую возможность.
Многопоточность на центральном процессоре  есть уже практически на любом современном компьютере.
Однако это касается не всех видеокарт.
Одними из наиболее популярных являются видеокарты NVIDIA, в современных моделях которых имеется поддержка технологии CUDA.
Именно эта технология и позволяет перенести решение СЛАУ с CPU на GPU [13].
На рисунке 2 сравниваются результаты расчета на центральном процессоре  и на графическом устройстве  на двух различных персональных компьютерах .
Расчет делался для задачи теории упругости с симметричной матрицей системы линейных алгебраических уравнений, содержащей 300 тыс.
строк; расчеты производились методом сопряженных градиентов без предобуславливателя и с предобуславливателем Якоби .
Как видно из рисунка, использование графического устройства дает заметно большее преимущество, чем увеличение количества процессоров.
Предобуславливание тоже дает очень заметный прирост.
А если их совмещать, время расчета значительно уменьшается .
В программном модуле реализован особый метод решения задач для несжимаемых материалов на основе алгоритма Узавы.
Дело в том, что получаемые в этих задачах системы уравнений являются системами с седловой точкой  и их матрицы имеют особый вид: в правом нижнем углу они содержат блок из нулей.
Описанные выше общепринятые и наиболее популярные методы решения СЛАУ на таких задачах чаще всего не сходятся из-за плохой обусловленности этих матриц.
Алгоритм Узавы позволяет с помощью релаксационного процесса свести решение такой СЛАУ к решению на каждой итерации СЛАУ меньшей размерности, уже не имеющей такого блока нулей, поэтому можно будет использовать классические методы решения СЛАУ с разреженной матрицей.
Известно несколько вариантов алгоритма Узавы, основанных на различных релаксационных методах решения СЛАУ.
В данном программном модуле реализованы варианты, основанные на методе наискорейшего градиентного спуска, методе сопряженных градиентов  и трехслойном методе сопряженных невязок.
Расчетные формулы для этих вариантов метода Узавы записываются по аналогии с расчетными формулами соответствующих итерационных методов [812].
Это можно увидеть из приведенного далее примера.
Критерием окончания расчета было уменьшение нормы невязки в 100 раз по сравнению с нормой начальной невязки.
Для решения СЛАУ с матрицей А на каждой итерации метода Узавы использовались прямые методы.
Разными символами на линиях отмечены разные методы.
Отметим, что количество итераций алгоритма Узавы почти не зависит от размерности матрицы, но, тем не менее, как можно видеть из графика, время расчета увеличивается с размером матрицы .
Это связано с ростом времени, потраченного на одну итерацию алгоритма и решение СЛАУ с матрицей A, размерность которой тоже растет.
Также можно видеть, что наиболее эффективным и стабильным является метод Узавы, основанный на методе сопряженных невязок .
В заключение отметим, что в статье сравнивается эффективность различных методов решения СЛАУ в задачах теории упругости сжимаемых и несжимаемых материалов при малых и конечных деформациях.
Составлен алгоритм выбора наиболее эффективного метода с учетом размерности задачи, особенностей ее механической постановки и возможностей компьютера, на котором производится расчет.
Алгоритм реализован в виде программного модуля, включающего в себя большой набор методов.
Этот модуль может быть использован в качестве составной части прочностных пакетов и при решении реальных задач механики в программных комплексах [14].
Редакция международного журнала Программные продукты и системы принимает к рассмотрению оригинальные, ранее нигде не опубликованные материалы, соответствующие тематике журнала .
В случае установления редакцией факта плагиата статья не рассматривается, а автор заносится в негласный редакционный список как утративший доверие.
В течение месяца с момента поступления рукопись проходит обязательное слепое рецензирование .
Эксперты назначаются редакционной коллегией журнала или рабочим советом.
Заключение рецензента сообщается автору.
Упругопластическая задача с большими пластическими деформациями физически и геометрически существенно нелинейная [1] и требует большого количества времени для решения методом конечных элементов на персональном компьютере.
Для сокращения времени расчетов необходимо использовать параллельные вычисления, в частности, на кластерных системах.
На каждом шаге нагружения этап 1 выполняется один раз, а этапы 2 и 3 от десяти до пятнадцати раз для удовлетворения итерационно с приемлемой точностью условию пластичности Мизеса в конце шага нагружения.
При этом матрица системы уравнений остается постоянной, изменяется только ее правая часть.
Производительность различных параллельных прямых методов решения СЛАУ в упругопластической задаче рассматривалась в работах [24].
Матрица несимметричная, имеет большую размерность, является ленточной и разреженной внутри ленты.
Использование прямых методов для решения СЛАУ приводит к образованию заполнения внутри ленты и к большим затратам как памяти, так и времени счета.
Поэтому целесообразно использовать итерационные алгоритмы решения СЛАУ.
Исследования эффективности различных параллельных итерационных алгоритмов решения СЛАУ проводились применительно к различным предметным областям.
В работе [5] при решении задач электромагнетизма рассматривалась эффективность методов подпространств Крылова с аддитивным методом Шварца в качестве предобуславливателя.
В [6] приводятся результаты решения задач гидродинамики, при этом применялся алгоритм Flexible GMRES с использованием аддитивного метода Шварца для выделения подобластей и предобуславливания.
В работе [7] анализируется решение задачи Пуассона методом конечных разностей на трех различных вычислительных системах.
Для решения СЛАУ использовался метод BiCGStab с алгебраическим многосеточным предобуславливателем.
В работе [8] приведены результаты решения упругой задачи сжатия пружины на графических процессорах при решении системы линейных уравнений методом сопряженных градиентов.
Для выделения независимых областей использовался метод дополнения Шура.
Поскольку существует большое количество параллельных итерационных методов решения СЛАУ с различными предобуславливателями на кластерных системах, встает вопрос о выборе метода и предобуславливателя для решения класса задач, в частности упругопластических, который дает наибольшее ускорение и обладает наилучшей масштабируемостью.
Выполненный авторами литературный обзор показал отсутствие исследований, содержащих сравнительный анализ производительности разных итерационных алгоритмов и предобуславливателей применительно к классу упругопластических задач.
Целью данной работы являются исследование и сравнительный анализ эффективности итерационных параллельных алгоритмов метода релаксации [9], стабилизированного метода бисопряженных градиентов  [10] и обобщенного метода минимальных невязок  [11] для решения СЛАУ в упругопластических задачах на кластерной системе.
Ранее эффективность метода релаксации исследовалась в работе [12], однако там рассматривались матрицы системы малой размерности в двухмерной упругопластической задаче.
Решение основывается на принципе виртуальной мощности в скоростной форме [1].
На контакте с плитами принято условие прилипания металла к плитам.
Нагрузка в виде перемещения плиты прикладывается малыми шагами.
Шаг выбран так, чтобы отношение /  не превышало предела упругости по деформации, в нашем случае 0,002, что обеспечивает устойчивость вычислительной процедуры.
На каждом шаге нагрузки задача рассматривается как квазистатическая, а вариационное равенство принципа виртуальной мощности в скоростной форме с помощью конечно-элементной аппроксимации сводится к СЛАУ.
Для выполнения вычислений над матрицей она переводится в сжатую по строкам форму [9].
Использование красно-коричневого дерева позволяет выполнить преобразование из координатной в сжатую форму без сортировок за единственный обход дерева.
Метод релаксации является одним из базовых итерационных методов линейной алгебры.
Он основывается на методе ГауссаЗейделя [9], в который добавлен коэффициент релаксации 0< <2.
Метод BiCGStab является вариантом метода сопряженных градиентов для несимметричных матриц.
Он относится к семейству методов, основанных на подпространствах Крылова.
Для уменьшения количества итераций, необходимых для достижения сходимости метода до заданной точности, использовался вариант метода с предобуславливателем [11].
Обобщенный метод минимальных невязок также относится к семейству методов, основанных на подпространствах Крылова.
Его подробное описание дано в работе [11].
Предобуславливателем называется матрица, такая, что матрица имеет лучшую обусловленность, чем матрица.
По уменьшению количества итераций методов решения СЛАУ можно судить об эффективности различных предобуславливателей.
В работе рассмотрены следующие пять предобуславливателей.
Неполное LU-разложение  [11].
Матрица представляется в виде, где и неполные разложения матрицы; остаток.
В работе используется вариант без образования дополнительного заполнения, называемый ILU.
Модификация метода неполного LU-разложения с отбрасыванием  [11].
В данном предобуславливателе применяется другой порядок метода исключения Гаусса при построении неполного разложения.
Производится формирование одной строки матрицы, после чего отбрасываются все элементы, кроме наибольших.
Это позволяет сохранять разреженность в матрице, получая некоторую гибкость при формировании разложения.
Модификация метода неполного LU-разложения Crout ILU  [15].
Этот предобуславливатель по структуре похож на предобуславливатель ILUT, в нем также происходит построение строки и столбца матрицы с последующим отбрасыванием элементов аналогично предобуславливателю ILUT.
Отличие алгоритма заключается в другой последовательности построения разложения.
Стабилизированный метод нахождения приближенной обратной матрицы  [16].
В общем случае этот алгоритм гарантированно работает лишь для симметричных положительно определенных матриц, однако расхождения итерационного алгоритма в упругопластической задаче не наблюдалось.
Алгебраический многосеточный метод со сглаженной агрегацией  [17].
Для некоторых задач многосеточные методы являются эффективными решателями, поэтому на их основе были разработаны предобуславливатели для итерационных методов решения СЛАУ.
Вычислительные эксперименты проводились на кластере Уран Института математики и механики имени Н.Н.
Красовского УрО РАН [18].
Он состоит из 208 вычислительных узлов, установленных в модулях с высокой плотностью упаковки.
Каждый вычислительный узел оснащен двумя процессорами Intel Quad-Core Xeon, работающими на частоте 3,00 ГГц, и 16/32 Гбайта оперативной памяти.
В общей сложности пользователям доступны 1 664 вычислительных ядра и 3 584 Гбайта оперативной памяти.
Для передачи данных между вычислительными узлами используется высокоскоростная сеть Infiniband с пропускной способностью 20 Гбит/сек.
В качестве реализаций итерационных методов решения СЛАУ была использована библиотека lis [19, 20].
Для упрощения анализа эффективности рассматриваемых методов решения СЛАУ использовалась регулярная сетка при разбиении параллелепипеда на конечные элементы.
При этом получается ленточная матрица системы с пятью ненулевыми лентами.
Параметры матрицы в зависимости от количества разбиений по каждой координатной оси в конечноэлементной сетке приведены в таблице.
Число обусловленности матрицы определялось как отношение наибольшего к наименьшему сингулярных значений матрицы.
Оценка сингулярных значений матрицы осуществлялась при помощи функции svds пакета MATLAB.
Анализ результатов, полученных методом релаксации, показал, что при значениях коэффициента релаксации >1 на сетках с параметром >15 метод расходится.
При значениях <1 метод релаксации сходится, но решение СЛАУ производится значительно медленнее, чем при использовании методов BiCGStab и GMRES.
На рисунке 1 показана зависимость ускорения решения СЛАУ методами BiCGStab и GMRES с предобуславливателем ILU от количества используемых MPI-процессов.
На всех рассмотренных сетках метод BiCGStab показал лучшее ускорение по сравнению с методом GMRES.
В методе BiCGStab такое не происходит.
Этот эффект обусловлен тем, что матрица системы уравнений начинает полностью помещаться в процессорный кэш.
При этом ускорение метода BiCGStab достигало 5,8 на 64 процессах.
Уменьшение времени на итерацию одновременно с увеличением количества итераций приводит к тому, что на отрезке от 1 до 8 процессов не происходит существенного ускорения .
Отсутствие ускорения на рассматриваемом отрезке объясняется тем, что использованная реализация предобуславливателя ILU в библиотеке lis не производит, по нашему мнению, межпроцессорный обмен.
Поэтому при увеличении количества процессов требуется большее количество итераций для достижения требуемой точности.
При использовании более восьми процессов время на итерацию уменьшается быстрее, чем увеличивается количество итераций, поэтому общее время решения СЛАУ уменьшается.
Применение других предобуславливателей может существенно повлиять на данный эффект.
Метод GMRES показывает лучшее абсолютное время решения СЛАУ на всех рассматриваемых сетках на небольшом количестве процессов, однако метод BiCGStab является более масштабируемым, так как при использовании большего количества процессов у него наблюдается большее ускорение по сравнению с методом GMRES.
Однако при использовании 64 процессов методу BiCGStab требуется затратить 2,8 секунды, а методу GMRES 3,4 секунды.
Это объясняется тем, что при использовании метода BiCGStab требуется меньшее количество операций передачи данных.
Применение разряженных схем хранения матрицы в совокупности с предобусловленными итерационными методами позволило сократить затраты на хранение матрицы жесткости и дало возможность решать задачу с большим разбиением сетки.
В работе [22] отмечается, что в силу сложности модели памяти современных компьютерных систем, недетерминированности времени работы сети и других факторов единственной оценкой производительности параллельных алгоритмов остается вычислительный эксперимент.
Для оценки величины случайной погрешности, вносимой в процесс итерационного решения СЛАУ передачей данных, в различное время в течение недели восемь раз осуществлялся запуск решения упругопластической задачи сжатия параллелепипеда с использованием одинаковых входных данных.
Для решения использовался метод BiCGStab с предобуславливателем ILUT.
Во время решения производился замер чистого времени решения СЛАУ и количества итераций, потребовавшихся для достижения сходимости.
Степень деформации вычислялась как, где, начальная и текущая высота параллелепипеда соответственно.
Жирной линией на рисунке 4 показано значение среднего времени одной итерации решения СЛАУ по всем восьми запускам.
На рисунке видно, что большинство кривых находятся рядом со средним значением.
Две кривые, наиболее сильно отклоняющиеся от средней кривой, соответствуют моментам наибольшей загруженности кластера.
Кроме того, поскольку задача ставилась на счет не в эксклюзивном режиме, это могло привести к неоптимальному распределению вычислений на узлы кластера.
Коэффициент вариации вычислялся по формуле, где среднеквадратическое отклонение от среднего времени одной итерации; среднее значение времени одной итерации по всем восьми запускам задачи.
Для всей выборки среднее время итерации равняется 136,4 мс, среднеквадратическое отклонение равняется 6 мс, а коэффициент вариации 0,044.
В большинстве случаев время одной итерации отличалось от среднего не более чем на 5 %.
Таким образом, принимая гипотезу, что случайное отклонение, вносимое работой сети, подчиняется нормальному распределению, можно сказать, что с вероятностью 0,95 время одной итерации не будет отличаться от среднего более, чем на 12 мс.
Выбор данного метода обусловлен его лучшей производительностью и масштабируемостью, проявленными на небольших сетках.
На рисунке 6 показана зависимость среднего времени решения СЛАУ и ускорения по сравнению с 32 процессами от выбранного предобуславливателя и количества вычислительных процессов.
Анализ результатов вычислений показал, что предобуславливатель SAAMG требует в среднем в 4 раза больше итераций для решения СЛАУ, чем остальные предобуславливатели.
Предобуславливатель на основе алгебраического многосеточного метода требует значительно большего времени для решения СЛАУ, чем другие предобуславливатели при использовании одинакового количества вычислительных процессов.
Наиболее быстрыми являются комбинации предобуславливателей ILU и ILUC при использовании 512 процессов.
При увеличении количества процессов время решения СЛАУ для большинства предобуславливателей уменьшается, поэтому можно говорить, что даже при использовании 256 процессов насыщение от задержки сети не достигается.
Однако при использовании 512 процессов и предобуславливателей ILUC и ILUT наблюдается большее время решения СЛАУ, чем при использовании 256 процессов.
Специфическое поведение предобуславливателя SAINV объясняется тем, что его реализация в использованной версии библиотеки имеет утечки памяти.
Поведение ускорений согласуется с зависимостями для времени решения СЛАУ предобуславливателями SAAMG и ILU.
На основании изложенного можно сделать следующие выводы.
Итерационные методы позволили решать упругопластическую задачу методом конечных элементов с большим разбиением, чем прямые методы.
Метод релаксаций по сравнению с методами BiCGStab и GMRES тратит значительно больше времени на решение СЛАУ, поэтому является неэффективным.
Метод GMRES тратит наименьшее время на решение СЛАУ на небольшом количестве процессов, однако метод BiCGStab обладает лучшим ускорением, хорошей масштабируемостью и при использовании большого количества процессоров обеспечивает наименьшее время на решение СЛАУ.
Вычислительный эксперимент по анализу задержки сети при решении тестовой упругопластической задачи показал, что случайное отклонение времени решения СЛАУ от средних значений, вызванное стохастической задержкой сети, в среднем не превышает 5 %.
Предобуславливатель ILUC является наиболее эффективным из рассмотренных по времени решения СЛАУ, однако предобуславливатель SAINV требует наименьшего количества итераций решения СЛАУ методом BiCGStab.
