
К важнейшим задачам при моделировании динамики трехмерных виртуальных объектов  относятся определение и обработка их столкновений  [1].
Тогда моделирование столкновения двух тел заключается в определении параметров  коллизии аппроксимирующих контейнеров двух объектов и в задании реакции тел на это столкновение.
Алгоритмы определения коллизий делятся на два вида: априорные и апостериорные [4].
Априорные алгоритмы предсказывают столкновения тел, апостериорные определяют коллизию объектов уже по факту их столкновения.
В связи с этим системы динамики, основанные на априорных определениях коллизий, работают в режиме реального времени  лишь для небольшого числа виртуальных объектов.
Для апостериорных алгоритмов определения коллизий входной объем данных сводится только к положению и ориентации объектов.
В настоящей работе рассматриваются методы апостериорного определения коллизий двух сфер и сферы с прямоугольным параллелепипедом .
Коллизии боксов между собой рассмотрены в [5].
Для каждого аппроксимирующего контейнера задается матрица перехода из его локальной системы координат в мировую [6].
Первые три столбца этой матрицы задают ориентацию тела, а четвертый положение начала локальной системы координат тела в мировой системе координат.
Обозначим радиус сферы через, а начало ее локальной системы координат расположим в центре сферы.
Начало локальной системы координат расположим в центре нижней грани бокса так, что ось направлена параллельно ребру бокса, задающему его длину, ось ширину, а ось высоту.
Под определением коллизии пары аппроксимирующих контейнеров понимается определение факта их пересечения и, в случае его наличия, вычисление точки коллизии, нормали расталкивания и глубины коллизии.
В качестве первого объекта коллизии всегда будем рассматривать сферу, а вторым объектом будет либо сфера, либо бокс.
Определим точку коллизии как точку поверхности второго объекта, наиболее близкую к центру первого.
Под нормалью коллизии будем подразумевать единичный вектор, направленный вдоль прямой, проходящей через точку контакта и центр первого объекта, и указывающий направление расталкивания для первого объекта.
Глубина коллизии это расстояние, на которое точка коллизии проникла в первый объект вдоль нормали.
Обозначим через точку коллизии.
Пусть и положение центров первого и второго объектов в мировой системе координат, а и соответствующие матрицы перехода.
Если вторым объектом является сфера, то ее центр задается четвертым столбцом матрицы, если же бокс, то к координате четвертого столбца надо прибавить 2 .
Если сферы пересекаются, то точка коллизии лежит на поверхности второй сферы на прямой, соединяющей их центры: | |.
Проверим совпадение направления нормали  с направлением вектора, который и будет вектором, задающим правильное направление для расталкивания первого объекта.
Рассмотрим два случая: центр находится вне второй сферы  и центр находится внутри второй сферы .
В первом случае векторы и направлены в одну сторону, поэтому и, следовательно, вектор также совпадает по направлению с вектором, то есть направление нормали верное.
Во втором случае вектор направлен противоположно вектору, поэтому.
Произведение даст вектор, совпадающий по направлению с вектором, то есть нормаль направлена верно.
Тогда из  получаем, что глубина коллизии в первом случае будет, а во втором.
Рассмотрим всевозможные варианты расположения центра сферы относительно бокса.
1.
Центр сферы расположен точно над одной из граней бокса.
Тогда точкой является конец перпендикуляра, опущенного из центра сферы к этой грани .
2.
Центр сферы расположен по диагонали от одного из ребер бокса, то есть вне двух соседних граней, содержащих это ребро.
Тогда точкой является конец перпендикуляра, опущенного из центра сферы к этому ребру бокса .
3.
Центр сферы расположен по диагонали от одной из вершин бокса, то есть вне трех соседних граней, содержащих эту вершину.
Тогда точкой будет эта вершина бокса .
4.
Центр сферы лежит внутри бокса.
Тогда точкой является конец перпендикуляра, опущенного из центра сферы к ближайшей грани бокса .
Обозначим через 1 систему координат сферы, а через 2 систему координат бокса.
Рассмотрим достаточно быстрый алгоритм, позволяющий определить положение центра сферы относительно бокса.
Причем, если центр сферы лежит вне бокса, алгоритм сразу вычисляет точку.
Суть алгоритма перевод вектора из мировой системы координат в систему 2 и его покомпонентное сравнение с полуразмерами бокса.
Обозначим совокупность координат вектора в системе координат 2 через.
Тогда с использованием компонент, и вектора алгоритм будет следующим.
.
Если выполняется хотя бы одно из данных условий, значит, центр сферы лежит вне бокса.
Если не выполнилось ни одно из условий, значит, центр сферы лежит внутри бокса.
Рассмотрим отдельно оба случая.
Сфера и бокс пересекаются тогда и только тогда, когда радиус сферы больше расстояния от ее центра до точки, то есть.
Если сфера и бокс пересекаются, точка коллизии будет совпадать с.
Ясно, что соответствующие координаты векторов и в системе 2имеют одинаковые знаки, поэтому.
Проверим, что направление нормали  будет противоположно направлению вектора, то есть будет правильным для расталкивания первого объекта.
Ясно, что косинус угла между векторами и отрицательный, то есть.
Следовательно, направление нормали будет противоположно направлению.
Тогда из  получаем, что в этом случае глубина коллизии.
В заключение отметим, что рассмотренные алгоритмы определения коллизий двух сфер между собой и сферы с прямоугольным параллелепипедом позволяют вычислять информацию о коллизиях с небольшой вычислительной сложностью.
Вместе с обработкой коллизий, описанной в [7], это позволяет моделировать динамику в режиме реального времени большого  количества виртуальных объектов.
Данные алгоритмы были реализованы в рамках динамической библиотеки, входящей в состав существующей системы трехмерного моделирования виртуальных объектов.
За счет наличия в этой системе модуля визуализации [8, 9] реализованные алгоритмы были проверены на наборе тестовых сцен, имитирующих различные ситуации при столкновении виртуальных объектов.
Особое внимание было уделено сложной в плане моделирования динамики ситуации покоя множества тел друг на друге.
Сложность такой ситуации при моделировании динамики в том, что на тела постоянно действует сила тяжести.
Таким образом, тела постоянно стремятся проникать друг в друга, а подсистема определения и обработки коллизий этому противодействует.
До тех пор, пока в этой подсистеме получаемые расчеты по обработке коллизий не полностью удовлетворяют условию покоя всех тел одновременно, объекты совершают небольшие движения вверхвниз .
Система динамики в примере покоя объектов друг на друге показала убедительные результаты времени расчетов.
На просчет одного шага моделирования при наличии незначительного дрожания объектов уходит не более 3 мс.
В течение небольшого количества шагов моделирования объекты перестают дрожать и переходят в статическое положение, при котором определение и обработка их коллизий прекращаются и на просчет одного шага моделирования уходит менее 1 мс.
Virtual objects in 3D modeling systems may collide with each other.
Collision detection is an integral part of any physical engine.
The speed of calculation is crucial for physical engines.
In real-time mode one simulation frame calculations should not exceed 40 ms to visualize at least 25 frames per second.
Therefore, there is a need in development of fast and efficient algorithms for the dynamics calculation system and for collision detection in particular.
Collision detection of complex shape's objects is a difficult task, which has a high computational complexity.
Therefore, a method using bounding volumes is widely used.
In this case, virtual objects forms are described by as different geometric primitives, and the problem of objects' collision detection is reduced to the collision detection of their bounding volumes.
Such primitives as rectangular parallelepipeds  and spheres became widespread.
Collision detection algorithms may be a priori and a posteriori.
A priori algorithms predict collisions of bodies, and a posteriori algorithms detect collisions after actual intersections of the objects.
In general, a priori algorithms have much higher computational complexity due to the greater amount of input data.
In this regard, physics engines oriented on real-time dynamics modeling basically use a posteriori collision detection algorithms.
This work is devoted to the development of fast and efficient algorithms for a posteriori sphere-sphere and sphere-box collision detection.
