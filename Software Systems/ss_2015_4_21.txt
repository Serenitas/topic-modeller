:629.7.
 Обеспечение сбоеустойчивости микропроцессоров, работающих в составе бортовой космической аппаратуры, является важнейшей задачей электронного космического приборостроения.
Среди других сбоев, присущих аппаратуре в космосе, своей частотой обращают на себя внимание сбои, вызванные событиями SEU  [1, 2].
Для предотвращения данных сбоев используют помехоустойчивые коды  [3], позволяющие находить и автоматически исправлять одну-две ошибки в памяти.
Процессоры и созданные на их основе микропроцессорные системы, которые имеют механизмы обнаружения и исправления ошибок  на базе ECC, называют сбоеустойчивыми.
Для тестирования сбоеустойчивости процессоров к SEU используют методы инъекции сбоев  [49], которые заключаются в искусственном инъектировании сбоев в память микропроцессора, эмулируя результат воздействия на цифровую аппаратуру тяжелых заряженных частиц космического ионизирующего излучения.
В работах [1012] представлен метод инъектирования сбоев в память микропроцессора с помощью блока инъекций сбоев, размещаемого в микропроцессоре типа  в качестве сложно-функционального блока .
Данный блок позволяет проводить автономные от внешнего аппаратнопрограммного окружения инъекции как во внутреннюю, так и во внешнюю память.
Сбои могут производиться с остановкой процессора перед проведением инъектирования, а также без остановки процессора при инъектировании во внешнюю оперативную память.
Покрытие сбоев может быть случайным равномерным или предопределенным.
В данной работе рассмотрен собственно сам IP-блок инъектора сбоев для СнК-процессора LEON3 [13], определен его состав, кратко описана его работа во всех режимах инъектирования.
Схема IP-блока представлена на рисунке 1.
IP-блок инъектора сбоев состоит из шести частей .
Блок согласует инъектор сбоев с шиной AMBA AHB.
При этом сам инъектор может выступать в роли как ведущего устройства на шине AMBA, так и ведомого.
Режим ведущего устройства позволяет инициировать транзакции по AMBA-шине, необходимые для проведения инъекций сбоев в память микропроцессора.
Режим ведомого устройства позволяет получить доступ к блокам Лист сбоев и Накопитель результатов другим устройствам на шине AMBA, что дает возможность вручную инициализировать первый блок и прочитать второй, например, с помощью внешнего управляющего компьютера, подключенного к системе по UART-интерфейсу.
Запрос на инициализацию транзакции для проведения инъекции генерируется в блоке Генератор SEU.
Режим работы генератора SEU определяется соответствующей, управляемой с помощью блока регистров по AMBA APB-интерфейсу.
ПСЧ реализованы на базе линейного регистра сдвига с обратной связью Linear Feedback Shift Register, LFSR [14].
Генерируемые данные сохраняются в блоке Лист сбоев, который представляет собой модуль внутрикристальной 32-разрядной памяти.
Для обеспечения доступа к данной памяти с различных устройств  реализован контроллер памяти, обрабатывающий возможные коллизии.
Следует отметить, что режим ручного редактирования возможен только при условии, что генератор сбоев не находится в активном состоянии .
Данное условие позволило сократить аппаратные ресурсы при практической реализации контроллера.
Управление инъектором сбоев осуществляется с помощью Блока регистров, доступного для чтения/записи по AMBA APB-интерфейсу.
Регистры блока приведены в таблице 1.
Блок Накопитель результатов представляет собой модуль внутрикристальной памяти разрядностью 32 бита.
Он служит для накопления результатов проводимых FI-компаний.
Работа инъектора сбоев INJ_SEU определяется Машиной состояний , входящей в состав блока Генератор сбоев, управление которой определяется блоком регистров.
Конечный автомат состоит из девяти состояний: idle, gen_parametrs, read_sheet, pending, snooping, stop_proc, injection, start_proc, statistics_collection.
Idle режим простоя.
В этом режиме генератор сбоев неактивен.
У оператора есть доступ на запись для управляющих регистров и листа сбоев.
Таким образом, в этом состоянии можно провести первичную инициализацию контроллера.
При активации инъектора  генератор сбоев переходит из состояния Idle в состояние gen_parametrs или read_sheet.
Выбор определяется наличием/отсутствием флага sh управляющего регистра.
Если лист сбоев не был инициализирован вручную, генератор сбоев сам сгенерирует необходимые параметры, использовав для этого генераторы ПСЧ в состоянии gen_parametrs.
Следует отметить, что в этом случае нет возможности проведения инъекции в режиме работы предопределенный.
Далее конечный автомат перейдет в состояние pending, ожидая момента наступления инъекции, который определяется суммой задержек, выставленной в регистре Time и сгенерированной генератором ПСЧ.
Режим работы инъектора определяется флагом SM управляющего регистра.
Следует отметить, что в режиме без остановки процессора инъекции возможны только в ОЗУ процессора.
В состоянии injection генератор производит опирации чтения/записи данных в памяти.
Адрес и положение сбоя в 32-битном слове в данном случае будут определяться сгенерированными параметрами в состоянии gen_parametrs.
Состояние statistics_ collection определяет операции чтения статусных регистров механизма EDAC тестируемого процессора.
По завершении процесса сбора статистики конечный автомат перейдет в состояние gen_para metrs и FI компания будет продолжена.
По завершении необходимого числа инъекций  конечный автомат сбросит флаг EN в 0 и вернется в состояние Idle.
Если лист сбоев был инициализирован вручную, конечный автомат перейдет в состояние read_sheet с целью чтения необходимых параметров.
В состоянии snooping конечный автомат будет мониторить моменты обращения во внешнюю память процессора.
Собрав статистику обнаруженных ошибок в состоянии statistics_collection, конечный автомат вновь перейдет в состояние read_sheet.
При достижении конца листа сбоев конечный автомат сбросит флаг EN в 0 и вернется в состояние Idle.
Чтение/запись данных в память процессора LEON3 производитcя с внутрикристального отладчика .
DSU является ведомым устройством на AMBA AHB-шине.
Для взаимодействия с процессором LEON3 инъектор по DMA-каналу обращается к регистрам DSU.
Используется набор регистров отладочного интерфейса, представленный в таблице 2.
Например, для остановки процессора LEON3 необходимо установить 1 в бит Break now  регистра Break and Single Step.
Для этого в состоянии stop_proc производится операция записи по адресу DSU_start_address+0x000020 слова 0x1.
Аналогично производится операция запуска процессора путем сбрасывания данного бита в 0 в состоянии start_proc.
Для выполнения инъекций в регистровый файл необходимо отключить механизм EDAC.
Для этого проводится операция записи слова 0x1 по адресу DSU_start_address+0x400040 .
Далее инъектор читает/модифицирует содержимое регистрового файла, используя адрес DSU_start_address+0x300000+error_address.
Описанные операции выполняются в состоянии injection.
Аналогично инъектор сбоев модифицирует содержимое кэш-памяти.
При этом используется диагностический регистр интерфейса DSU .
Далее производятся операции чтения/модификации по адресу DSU_start_address+ +0x700000+error_address.
Доступ к внешнему ОЗУ осуществляется без DSU, напрямую через контроллер памяти.
До осуществления инъекции инъектор сбоев отключает механизм EDAC контроллера памяти путем установки в единицу бита RE .
Далее осуществляется операция чтения/модификации по адресу ram_start_address+error_address.
Инъектор сбоев является и ведомым устройством на шине AMBA AHB.
Эта функция позволяет получать доступ к листу сбоев и накопителю результатов инъектора для других устройств, входящих в состав СнК.
Одним из входных сигналов инъектора является Рассмотрим его состав.
Сигналы позволяют инъектору контролировать шину адреса и данных, а также направление передачи .
Эта особенность позволяет инъектору осуществлять мониторинг транзакций на шине AMBA AHB.
Данный режим используется в состоянии snooping, когда инъектор работает в привилегированном режиме и ожидает наступления определенного события (например, запись определенных данных по конкретному адресу оперативной памяти).
Как только это событие происходит, осуществляется инъекция.
При работе в предопределенном режиме с остановкой процессора инъектор может производить инъекции и в другие виды памяти.
Для этого можно установить специальные контрольные точки  в регистре процессора.
LEON3 поддерживает до четырех подобных контрольных точек с возможностью наложения на них устанавливаемых масок.
Таким образом, до проведения FI-компании оператор конфигурирует соответствующим образом регистры процессора и инъектор сбоев.
При срабатывании watchpoint процессор сам перейдет в режим отладки и будет остановлен.
Инъектор может определить наступление этого события по установленному биту DM  DSU-интерфейса.
Ожидание наступления данного события также происходит в состоянии snooping.
Далее будет произведена инъекция путем модификации содержимого интересующей области памяти.
Таким образом, разработанный инъектор сбоев позволяет вносить сбои в регистровый файл, кэшпамять и внешнюю память в режимах с остановкой и без остановки процессора со случайным или предопределенным покрытиями сбоями.
Являясь независимым IP-блоком, он имеет слабую связь с остальными блоками LEON3, что позволяет проводить его простое включение/выключение из состава данного СнК-процессора.
Разработка и производство  обрели все черты специальной отрасли, основу которой составляют соответствующие бизнес-процессы.
От качества ПС существенно зависит эффективность выполнения бизнес-процессов во многих отраслях.
Как следствие, в этой отрасли в полном объеме возникают и требуют решения задачи обеспечения и повышения эффективности или развития процессов и систем управления производственными бизнес-процессами.
Управление бизнес-процессами становится все более сложным во всех сферах деятельности как по составу, так и функционально.
Это обусловлено, прежде всего, усложнением выполняемых в составе бизнес-процесса задач, расширением их круга, повышением уровня требований к качеству их исполнения, причем число требований критериев качества постоянно растет.
В основу современных систем управления положены .
Однако даже высокоэффективные ИТ не гарантируют успех управления, если бизнес-процессы и системы управления в целом как системы, обеспечивающие информационный менеджмент, не обладают уровнем развития, достаточным для того, чтобы эффективно применять высокотехнологичные средства и процессы  [14].
Вследствие этого в отношении уровня развития систем управления может быть поставлена типовая задача управления, то есть задача целенаправленного формирования в системах управления заданного, или целевого, уровня развития: задание целевого уровня как стратегический план развития, оценка фактического уровня, сравнение его с целевым и внесение изменений в информационный менеджмент, то есть в систему управления.
При этом должны быть формально поставлены и последовательно решены следующие задачи: определить понятие уровень развития; установить набор характеристик систем управления, определяющих ее уровень развития; описать связь значений характеристик системы с показателем уровня развития; сформировать воздействия на характеристики систем управления в нужном направлении.
Специфика решения этих задач определяется условиями соответствующей сферы деятельности [24].
В настоящей статье эти вопросы рассматриваются применительно к особенностям управления развитием системы управления тестированием при разработке ПС [5].
Тестирование ПС это, с одной стороны, этап разработки ПО; с другой специализированный бизнес-процесс в совокупности бизнес-процессов этой области деятельности.
Понятие тестирование ПС определяется по-разному, однако бизнес-процессы тестирования по сути являются многофункциональными, а задачи управления развитием систем управления тестированием многокритериальными.
Как и в любой другой ИТ, в бизнес-процессе тестирования важным является экономический аспект, или эффективность ИТ: чем выше планируемые показатели качества тестирования, тем больше будут их трудоемкость и стоимость [6, 7].
Чем больше трудозатрат вкладывается в процесс тестирования, тем меньше ошибок в продукте остаются незамеченными.
Однако совершенство в индустриальном программировании имеет пределы, которые прежде всего связаны с доступными затратами на получение программного продукта.
В связи с этим определение трудоемкости бизнес-процесса тестирования конкретного продукта является оптимизационной задачей.
Стремление к уменьшению дефектов, или к повышению качества продукта, приводит к необходимости применения различных методов отладки и тестирования в процессе создания продукта.
По мере обнаружения сложных ошибок и дефектов эффективность низкозатратных методов падает вместе с количеством обнаруживаемых ошибок.
Отсюда следует, что каждый из методов тестирования имеет свою нишу, где он хорошо обнаруживает ошибки; вне этой ниши его эффективность падает.
Поэтому необходимо совмещать различные методы и стратегии тестирования с целью обеспечения запланированного качества программного продукта при ограниченных затратах; это достигается при формировании адекватной системы управления тестированием.
Тестирование не является изолированным процессом, оно связано с другими работами по созданию ПС.
Различные модели разработки ПС требуют различных подходов к тестированию.
Основная особенностьпроекта.
-модель является разновидностью каскадной модели: она также имеет последовательную структуру разработки, каждый новый шаг в ней начинается после завершения предыдущего.
Основная особенностьвспять.
Итерации в проекте производятся по горизонтали, между левой и правой сторонами буквы.
В процессе создания ПС для каждого витка спирали заново проводится исследование, ставятся цели, определяются конкретные характеристики проекта и составляется план проведения работ для следующего витка.
Несмотря на логическую последовательность, действия в процессе могут накладываться друг на друга или происходить одновременно.
Для конкретных системы и проекта обычно требуется адаптация этих направлений деятельности.
Функции процессной модели: определение, анализ, реинжиниринг и документирование производственных и организационных процессов отдела обеспечения качества; стандартизация процессов, ролей, артефактов и шаблонов, используемых в отделе; ускорение производственных процессов при сохранении высокого уровня качества; оптимизация производственных и организационных активностей, направленная на повышение их эффективности и сокращение трудозатрат отдела обеспечения качества.
Рассматривая тестирование как обособленный бизнес-процесс, в составе системы управления разработкой ПО в качестве подсистемы можно выделить систему управления тестированием, совершенствование которой обеспечивает повышение качества выполнения бизнес-процесса тестирования.
В задаче управления развитием системы управления тестированием, то есть в задаче целенаправленного формирования в системе управления тестированием заданного, или целевого, уровня развития, важное место занимает оценка фактического значения уровня развития.
В настоящей работе в качестве методической основы оценки уровня развития, или стадии зрелости, систем управления тестированием предпринята попытка применения в условиях тестирования ПС классификации уровня развития проектного менеджмента IT Portofolio Management Maturity Model по М.
Джеффри, которая содержит описание четырех уровней развития по мере их повышения: случайный, определенный, управляемый, согласованный [6].
Данная модель носит вербальный характер и основана на качественных оценках характеристик процессов и систем управления, оценивая которые, можно сделать заключение о том, на какой стадии находится рассматриваемая система.
Ввиду качественного характера вербальной модели в этих условиях естественным является использование экспертной оценки.
В сложных условиях, характерных Т р е б о в а н и я за ка зч и ка С и ст е м а, уд о в ле тв о р яющ а я тр е б о в а н и ям к а ч е ст в а для такой экспертизы, обычно достаточно трудно найти компетентного эксперта, оценка которого вызывает безоговорочное доверие.
Степень доверия к оценке повышается при проведении коллективной экспертизы.
Однако при участии в экспертизе нескольких экспертов оценки могут относиться к разным классам, из-за чего при обработке результатов опроса экспертов будут получены дробные значения классов.
Поэтому значение глобального критерия, получаемое в результате экспертизы, будет принадлежать интервалу 0, 4, то есть будет иметь вид числа.
Таким образом, окончательное определение уровня развития отображение значения глобального критерия на множество классов 0, 4, 1, 4,  необязательно может давать целочисленную оценку, могут использоваться и дробные числа; при этом шкала классов служит как бы каркасом модели при реализации отображения.
Однако на практике увеличить число экспертов сложно, поскольку безоговорочно авторитетных пока мало.
К тому же такие эксперты требуют высокой оплаты; для многих компаний, прежде всего в сфере малого и среднего бизнеса, проведение экспертизы будет неподъемной затратой.
Экспертиза осуществляется в два этапа.
На первом формируется состав множества частных критериев, его полнота и адекватность в отношении вербального описания определяются компетентностью состава привлеченных экспертов.
На втором этапе экспертизы интервал значений [0, 1] для каждого из критериев представляется в виде строки, состоящей из 4 субинтервалов по числу уровней развития; при этом границы субинтервалов определяются экспертами по каждому из критериев.
Следует отметить, что границы субинтервалов для разных критериев могут быть различными, то есть разбиение интервала [0, 1] в общем случае неравномерно.
Таким образом, состав множества критериев как структурная основа модели уровня развития принимает вид таблицы 1.
Оценка уровня развития формируется отображением множества частных критериев на значение глобального критерия:  где операция отображения осуществляется на основе того или иного расчетного алгоритма; при этом могут использоваться различные подходы и методы.
Далее для определения оценки уровня развития полученное значение отображается на множество уровней развития по шкале значений : | 1, 4,  для чего должна быть построена шкала соответствия значений и номеров уровней развития.
Иначе говоря, для применения  и  необходимо разбить интервал возможных значений на 4 субинтервала и присвоить им номера уровней развития от 1 до 4.
Такая шкала строится на основе граничных значений частных критериев с использованием алгоритма, положенного в основу операции отображения.
При этом будет осуществлен переход от вербального описания системы управления тестированием к формированию множества критериев системы и получению числового показателя стадии зрелости.
Для применения  и  на множестве полученных значений частных критериев, или для реализации операций отображения и, необходимо задать вид этих операций, то есть сформировать алгоритм расчета количественной оценки уровня развития системы управления тестированием [6].
Так, в качестве глобального критерия может использоваться длина вектора в эвклидовом пространстве, базисом которого являются значения частных критериев, то есть будет.
 Правда, наглядность таких глобальных критериев вектора в 12-мерном пространстве и суммы взвешенных 12 слагаемых невелика.
В связи с этим множество частных критериев целесообразно представить в виде дерева, разбив его на группы по тем или иным признакам и сохраняя при этом наглядность как по числу критериев в группах, так и по числу групп.
При этом на уровнях могут использоваться разные алгоритмы.
На основе исследования и анализа практики рассматриваемого проектного предприятия, процессной модели разработки ПС на предприятии, в частности, в сфере обеспечения качества программных продуктов в составе множества из 12 частных критериев, характеризующих деятельность отдела обеспечения качества, сформированы следующие группы характеристик частных критериев по 4 критерия в каждой : проектные, организационные, общие.
Далее в условиях рассматриваемого предприятия в качестве алгоритма расчета ОГК используется взвешенное суммирование значений частных критериев, включенных в группу:  где весовые коэффициенты, отражающие значимостьнормировки:.
 В этих условиях значения всех обобщенных групповых критериев, 1,3, попадают в интервал [0, 1].
Для каждого, 1,3, на основе алгоритма  с учетом условия нормировки  интервал [0,1] разделен на 4 субинтервала, отражающих стадии зрелости в отношении данного ОГК.
Интервал возможных значений глобального критерия разбивается на 4 субинтервала, отражающих стадии зрелости системы, с использованием алгоритма отображения.
В условиях рассматриваемого предприятия в качестве глобального критерия используется длина вектора в эвклидовом пространстве, базисом которого являются значения ОГК, то есть в данном случае глобальный критерий имеет вид.
 С использованием этого алгоритма на основе граничных значений субинтервалов на шкалах ОГК интервал возможных значений глобального критерия разбивается на 4 субинтервала.
Таким образом, оценка уровня развития системы определяется по шкале соответствия субинтервалов значений глобального критерия и шкалы уровней зрелости, то есть выполняется отображение значения на шкалу классов: | 1, 4,  где функция отображения, заключающаяся в применении правила соотнесения шкал значений и номеров классов.
Точность экспертизы повышается при увеличении числа частных критериев, что характеризует более детальное отражение вербального описания множеством количественно оцениваемых, пусть и экспертным путем, величин.
Здесь важно подчеркнуть, что для оценки того или иного частного критерия существенно проще найти компетентного эксперта, то есть узкого специалиста по данному критерию, оценка которого не подвергается сомнению и от которого не требуется столь широкая эрудиция, как от эксперта при проведении ПЭО.
В качестве визуальной иллюстрации модели оценки зрелости управления тестированием построена номограмма , на которой представлены области в пространстве глобальных критериев, отражающие все стадии зрелости.
В порядке управления развитием систем управления тестированием полученное фактическое значение уровня развития сравнивается с его целевым значением.
В случае, если целевой уровень не достигнут, необходимо выяснить, какие частные критерии вносят наибольший вклад в отставание в развитии, и провести мероприятия, обеспечивающие преодоление этого отставания.
При этом важно оценить ресурсоемкость и стоимость соответствующих мероприятий, то есть эффективность процессов управления [7].
Таким образом, в статье поставлена задача формирования подхода к управлению уровнем развития системы управления тестированием в составе системы управления бизнес-процессами разработки ПС в условиях проектного предприятия.
Подход основан на определении оценки уровня развития систем управления тестированием в условиях различных моделей разработки ПО, прежде всего с использованием многокритериальной экспертной оценки.
В качестве методической основы использована классификация стадий зрелости проектного управления.
Предложено отображать вербальное описание стадий зрелости множеством частных количественных критериев, для оценки значений которых предлагается проводить многокритериальную экспертизу.
Рассмотрены варианты алгоритмов по этапам определения глобального критерия уровня развития.
Предложенный на основе многокритериальной экспертной оценки подход позволяет оценивать степень зрелости систем управления тестированием ПО и целенаправленно управлять ее развитием.
