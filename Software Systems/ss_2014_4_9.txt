
Высокореалистичная визуализация трехмерных виртуальных сцен необходима при решении широкого круга задач.
К таковым относится, например, реализация систем виртуальной реальности.
Высокая реалистичность в данном случае позволяет приблизить виртуальный мир к реальному, обеспечить их визуальную схожесть.
Еще одной областью, в которой необходим такой тип визуализации, являются имитационно-тренажерные комплексы, с помощью которых осуществляется подготовка специалистов для работы с разного рода техническими средствами [13].
В обеих упомянутых задачах реалистичность синтезируемых на компьютере изображений обеспечивается группой факторов.
Среди них можно выделить, во-первых, максимальное сходство объектов виртуальной сцены с теми, которые встречаются в реальном мире и привычны для человеческого глаза.
Во-вторых, для правильного моделирования светотеневой обстановки сцены необходим как можно более точный расчет освещенности ее объектов.
И наконец, существенным фактором является поддержка визуализации в режиме реального времени, то есть с частотой смены кадров не менее 25 раз в секунду.
Последнее обеспечивает плавную динамику виртуальных объектов, а также позволяет оператору взаимодействовать с ними без задержек.
Количество элементов в них порой может достигать значительных величин, порядка сотен тысяч и миллионов.
Известные до сих пор методы и алгоритмы реализации систем частиц, как правило, рассчитаны на использование  в качестве основного устройства для расчета параметров каждой частицы.
При этом обработка частиц выполняется либо последовательно, либо с малой степенью распараллеливания, так как даже самые современные ЦП имеют всего 68 ядер.
Поскольку для обеспечения плавной и реалистичной динамики нужно проводить расчет и отображение частиц в процессе синтеза каждого кадра, в случае большого количества частиц сохранить режим реального времени при визуализации трехмерной сцены практически невозможно.
Для решения этой проблемы в работе предлагается технология распределенного моделирования и визуализации систем частиц с применением современных графических процессоров .
Данная технология поддерживает использование в виртуальных сценах систем частиц с количеством элементов порядка 10, сохраняя при этом возможность рендеринга в режиме реального времени, что особенно важно для таких областей, как имитационно-тренажерные комплексы и системы виртуальной реальности.
Предлагаемая технология включает два этапа, выполняющихся при синтезе каждого кадра изображения виртуальной сцены.
При этом каждая частица хранится в памяти и обрабатывается как точка сцены, являющаяся геометрическим центром частицы.
Таким образом, перед выполнением первого этапа имеется система частиц в виде массива из элементов типа, где максимально возможное количество частиц в системе, установленное при создании виртуальной сцены.
Параметры элементов соответствуют времени, в которое производились предыдущие вычисления.
Рассмотрим подробнее каждый из этапов.
Суть подхода состоит в возможности сохранения результатов вычислений, полученных в вершинном  шейдере, в одном или нескольких вершинных буферах VBO .
На рисунке 1 представлена предлагаемая схема этапа обработки массива частиц на графическом процессоре видеоадаптера.
Для ее реализации разместим рассмотренный выше исходный массив в видеопамяти в виде вершинного буфера .
В той же памяти отведем область под вершинный буфер  для записи результирующего массива '.
Расчет нового состояния системы частиц производится в графическом конвейере GPU на стадии выполнения вершинного шейдера, где каждое ядро GPU отвечает за обработку одной частицы.
Подадим буфер VBO на вход вершинного шейдера.
Чтобы сохранить полученные результаты вычислений, перед запуском графического конвейера необходимо включить режим transform feedback и задать его параметры.
Во-вторых, вызовом функции glTransformFeedbackVaryings определим выходные переменные, в которые вершинный шейдер будет записывать сформированные данные.
Поскольку все атрибуты частиц мы храним в одном массиве, в качестве параметра для этой функции нужно использовать GL_SEPARATE_ATTRIBS.
И наконец, включение самого режима transform feedback выполняется функцией glBeginTransformFeedback с параметром GL_POINTS, в общем случае означающим, что каждое ядро GPU будет выдавать на запись в буфер VBO одну вершину.
В нашей задаче это соответствует одной структуре типа.
Так как для решения поставленной задачи обработки массива частиц используется только вершинный шейдер, все последующие стадии графического конвейера, включая растеризацию и выполнение фрагментного шейдера, являются избыточными.
Рассмотрим действия, выполняемые вершинным шейдером для расчета состояния некоторой частицы из+.
Заметим, что все векторы заданы в мировой СК WCS.
Присвоим '  значение 0.
Поскольку в описываемом примере рассматривается прямоугольный эмиттер, ось Z которого перпендикулярна его плоскости, то0.
И наконец, вычислим отклонения ' углов поворота от исходного состояния '.
Пока частица живет, ее поворот может происходить относительно осей СК WCS' как по часовой стрелке, так и против нее.
Таким образом, определены параметры новой частицы.
Далее следует оценить, осталось ли полученное значение ' в допустимом диапазоне [0, 2 ].
В обоих случаях знак устанавливается противоположным знаку, то есть направление поворота изменяется.
При  знак совпадает со знаком.
На рисунке 2 представлена схема выполнения данного этапа с использованием вершинного, геометрического и фрагментного шейдеров.
Рассмотрим ее подробнее.
Подготовленный на предыдущем этапе массив частиц ' подается на вход вершинного шейдера.
В предлагаемом подходе данный шейдер не несет никакой вычислительной нагрузки.
Однако он является обязательной частью графического конвейера, поэтому его функция в данном случае заключается в передаче полученных входных данных на следующую ступень конвейера геометрический шейдер.
Геометрический шейдер задействован для выполнения синтеза полигональной модели частиц.
Форма модели, а значит, и количество добавляемых вершин, зависят от той задачи, для которой используется система частиц.
Она может быть плоской или трехмерной.
Так, например, падающие снежинки можно представлять двумерными вращающимися шестиугольниками, а капли дождя тетраэдрами.
Одной из простых, но часто используемых моделей частиц является квадрат, постоянно повернутый лицевой стороной к камере, так называемый спрайт.
Генерируемый спрайт включает два треугольных полигона с вершинами, , и, , , которые для оптимизации работы графического конвейера целесообразно визуализировать как треугольный стрип.
Перед тем как передавать положения вершин на выход геометрического шейдера, необходимо также умножить их на матрицу, равную произведению, где матрица заданного для камеры проекционного преобразования, матрица перехода из мировой СК WCS в видовую СК VCS.
Текстурные координаты для вершин задаются, исходя из решаемой системой частиц задачи.
Коэффициент зависит от параметров источника света.
Его вычисление подробно описано в [9].
Данные модули позволяют добавлять в визуализируемую сцену такие объекты, как, например, падающие листья, струи воды и т.п.
Также доступно моделирование некоторых природных явлений .
Применение в предлагаемых подходах вычислений на современных многоядерных графических процессорах позволило достичь высокой производительности и обеспечить режим реального времени при визуализации даже большого количества частиц .
Созданные программные модули прошли апробацию в составе системы визуализации GLView [10], разработанной в Центре визуализации и спутниковых информационных технологий НИИСИ РАН.
На рисунке 4 представлено изображение виртуальной сцены с моделированием дождя, сгенерированное данной системой.
Итак, в данной статье была предложена и подробно рассмотрена технология распределенного моделирования и визуализации систем частиц в трехмерных виртуальных сценах с применением шейдерной обработки на современных многоядерных графических процессорах.
Предложенные в работе решения были положены в основу разработанных программных компонент, ориентированных на использование в системах визуализации реального времени для имитационно-тренажерных комплексов и систем виртуального окружения.
The work proposes the technology for distributed simulation and visualization of such systems using modern multi-core graphic processors.
This technology includes two stages.
The first stage includes calculation of particle system condition at specified time moment as particles data array.
The second assumes a visualization of obtained array with on the fly synthesis of necessary particle geometry, their lighting calculation and texture mapping.
Both stages are performed on videocard's graphics pipeline that allows achieving high degree of parallelism.
For this purpose the shader rendering mechanism is employed including vertex, geometry and fragment shaders.
The second stage uses a geometry shader for synthesis of particle's polygonal model.
As an example, particle construction is considered as a sprite.
It has a square form with its front face is always looking at virtual camera.
Developed technology supports using of particle systems with number of elements about 10 in three-dimensional scenes.
It saves a possibility of real-time rendering that is particularly important for such application fields as simulation-training complexes and virtual environment systems.
Furthermore, the article also describes practical results of proposed decisions that are oriented for using in real-time visualization systems.
1.
Mikhaylyuk M.V.
Video training control complex for robots and manipulator mechanisms.
[Proc.
of Int.
Symp.
Innovation Technologies in Environment Research].
2.
Using virtual reality technologies to model safe control over anthropomorphic robotic tools.
[Proc.
21st Int.
Conf.
Control Issues for Complex Systems Security].
Moscow, 2013, pp.
3.
Virtual reality technologies in simulation training complexes for astronauts.
[Space Manned Missions].
2013, no.
2, pp.
4.
Reeves W.T.
Particle systems a technique for modeling a class of fuzzy objects..
Detroit, Michigan.
ACM, 1983, vol.
2, pp.
91108.
5.
Torgashev M.A.
Fire and fire-extinguishing equipment modeling for the tasks of distributed robotic tools realtime simulation.
[Proc.
5th Int.
Conf.
SAIT-2013].
Krasnoyarsk, 2013, vol.
1, pp.
6.
Fearing P.
Computer modeling of fallen snow..
3746.
7..
8.
Boreskov A.V.
[Add-ins of OpenGL].
St.
9.
Real-time simulating of shadows for direct light in 3D scenes.
[Intelligent and adaptive robots].
2009, no.
12, pp.
10.
Sistema GLView vizualizatsii dlya modeliruyushchih kompleksov i sistem virtualnoy realnosti.
[Bulletin of RANS].
2011, vol.
11, no.
2, pp.
