
Проектирование ПО является неотъемлемой частью любого проекта, основополагающим фундаментом будущей разработки.
Программная реализация алгоритмов взаимодействия программных модулей и их информационный обмен на аппаратном уровне обеспечивают корректное функционирование разрабатываемой системы.
В группе разработчиков необходимо правильно распределять и координировать усилия по созданию ПО, при этом большое значение имеет четкое определение структуры  разрабатываемой программы [1].
Часто при изначально некорректном проектировании структуры программного продукта на этапе разработки или сопровождения возникает проблема регрессии программного кода, когда дальнейшее развитие и сопровождение невозможны.
Целями исследования способов проектирования архитектуры ПО были выявление, оптимизация и унификация предложенных решений по разработке ПО для применения в авиационной отрасли.
В результате изучения опыта применения модульной структуры ПО компанией Rockwell Automation, исследования зарубежных научных источников, описывающих возможность применения модульной архитектуры при разработке ПО, а также анализа применяемых на практике технологий разработки ПО в авиационной отрасли было установлено, что основным аспектом качественного проектирования ПО для применения в рассматриваемой области является модульность.
Такой подход обеспечивает гибкость и наращиваемость разрабатываемого продукта, легкость в сопровождении, экономию ресурсов.
Использование модульной архитектуры ПО в тренажерах предполагает имитацию каждой физической системы в отдельном программном блоке.
При модульной архитектуре построения программные блоки могут создаваться независимо друг от друга и объединяться в систему для получения необходимых результатов [2].
Решением задачи корректного взаимодействия программных модулей является применение алгоритмов передачи данных от модуля к модулю.
Данная задача включает как реализацию логических связей между программными блоками, так и обмен информацией системы с взаимодействующими подсистемами, при этом в архитектуре ПО необходимо выделить программный модуль  интерфейсного обмена [2].
При проектировании архитектуры всей системы авиационного тренажера его составляющие  условно можно распределить по уровням взаимодействия.
Как правило, в архитектуре ПО выделяют пять уровней распределения программных блоков [1, 3].
В работе [1] представляется архитектура ПО авиационного тренажера в виде программных блоков или модулей, иерархически распределенных по уровням.
Там же дано определение архитектуры ПО как структуры пакета программ моделирования самолета.
На самом верхнем уровне находятся программные блоки, предназначенные для трансформации и представления результата всей выработанной  на более низких уровнях информации в интерактивном виде.
На данном уровне содержатся и подпрограммы, описывающие графический пользовательский интерфейс.
Это структура, ориентированная на пользователя и содержащая информацию о подпрограммах, которые должны быть выполнены, управление заданиями.
Уровень предназначен для представления, подготовки и перекомпоновки всей внутренней информации в интерактивное представление для пользователя, а также для человеко-машинного взаимодействия.
Следующий, второй, уровень включает в себя начальные условия вычислений и фактический процесс моделирования.
Кроме того, в начало и в конец соответственно включены две дополнительные части, где данные считываются или хранятся и где удобно осуществлять преобразования данных и перевод информации.
При моделировании полета, а также при использовании методов программной реализации в реальном времени используется цикл с отсчетом времени.
Третий уровень содержит вычисления вектора состояния производной по времени и выходного вектора полной системы с приращением.
На этом уровне осуществляется обмен информацией: полный результат входных сигналов, вычисленный из разных источников, передается на более низкие программные уровни.
На четвертом, программном, уровне программные модули содержат фактическую математическую модель самолета, в то время как программные модули первых трех уровней не зависят от его типа и модели.
Программные модули четвертого уровня имеют доступ к БД и массивам, содержащимся на пятом уровне.
Последний, пятый, уровень содержит БД, массивы информации, необходимые для вычислений на более высоких уровнях, отдельный набор подпрограмм  для интерполяции данных в таблицах, конфигурационной информации, поступления новых данных.
Примером применения описанной архитектуры является реализация аэродинамических моделей тренажера самолетов Boeing 747 и Fokker F28.
Самолет можно представить как относительно малую структуру, движущуюся сквозь атмосферу под действием внешних сил и моментов.
Математическая формулировка этих отношений между самолетом и внешними аэродинамическими силами и моментами обычно описана в аэродинамической модели в виде программного модуля.
Первоначально данные для построения аэродинамической модели Fokker F28 были представлены в виде графов.
Такое представление требует преобразований в удобную для программирования форму, в этом случае хранят отдельные наборы табличных представлений данных.
Промежуточные точки могут быть найдены путем численной интерполяции [1].
Математическая модель была также линеаризована из набора ссылочных состояний с использованием процедуры численной линеаризации.
Кроме того, привнося перекрестные ссылки на оригинальное графическое представление для широкого набора исходных условий, представление линейных систем, допускается дальнейшее упрощение аэродинамической модели путем устранения незначительных отрицательных эффектов.
Поскольку аэродинамические модели содержатся в отдельных программных модулях, их легко можно скопировать в целевые приложения, особенно для целевых применений с похожей модульной структурой.
Обновления аэродинамической модели могут быть реализованы и путем обновления отдельно хранящихся коэффициентов или замены отдельного модуля.
Примером модульного подхода к построению ПО при разработке авиационных тренажеров [2] может служить структурная схема модуля имитатора динамики полета авиационного тренажера Ту-204, представленная на рисунке 1, где приняты следующие обозначения: ВСС-85 вычислительная система самолетовождения, ВСУП-85 вычислительная система управления полетом, ВСУТ-85 вычислительная система управления тягой, СЭИ-85 система электронной индикации, ИК истинный курс, ПВПП признак касания ВПП.
В данном примере тренажера имитируется движение самолета в пространстве посредством решения замкнутой системы нелинейных дифференциальных уравнений в соответствующих программных блоках, где входными параметрами являются управляющие воздействия экипажа, а выходными вычисленные параметры полета [4].
Для обеспечения подобия реального и моделируемого полетов самолета осуществляется непрерывное вычисление параметров полета в реальном масштабе времени.
Экипажу от соответствующих модулей предоставляется визуальная, акустическая, акселерационная информация, в том числе показания приборов пилотажно-навигационного комплекса, положения и усилия на органах управления .
Производится декомпозиция системы уравнений движения .
Шаг интегрирования задается из условий устойчивости и мощности ЭВМ [2].
В работе [5] приведен пример схемы ПО авиационного тренажера, где программные блоки распределены по пяти уровням.
Рассмотрим назначение программных блоков на примере симуляции ВС Airbus серии А300-600.
Компьютер GouldSEL 32/87 сервер, запускающий визуальные сцены для тренажера.
Все программные модули в системе тренажера распределены по уровням взаимодействия и представления информации.
Опишем программные блоки первого уровня архитектуры ПО тренажера.
START.
Главный программный блок загружаемого программного модуля MAIN.LM.
Используется для объявления массива и передачи данных в главную подпрограмму.
MAIN.
Управляющая программа  для нелинейной симуляции полета в реальном времени.
INCO.
Главный программный блок загружаемого программного модуля INCO.LM.
Используется для выделения памяти для обмена информацией между модулями MAIN.LM и INCO.LM, а также между INCO.LM и AERO.LM.
В фазе инициализации начальные условия вычисляются посредством модуля FINCO, в процессе симуляции выполняется интеграционный модуль FAIRC.
MODL.
Содержит законы управления движением системы подвижности тренажера.
VIDL.
Содержит законы управления, генерирующие входы  для визуальной системы авиационного тренажера.
INSTR.
Интерфейс инструментов ПО для запуска пилотажных приборов внутри авиационного тренажера.
Назовем программные блоки второго уровня.
FSIDS.
Подпрограмма, обеспечивающая набор входных параметров для главного программного модуля MAIN и определяющая описания переменных самолета.
FINER.
Подпрограмма, рассчитывающая параметры инерции в уравнениях движения.
FSTAT.
Подпрограмма, рассчитывающая плотность воздуха на заданной высоте полета, использующая модель стандартной атмосферы.
FINCO.
Подпрограмма, рассчитывающая начальные условия и использующая нелинейные уравнения движения самолета.
Данный программный блок применяется прежде всего для актуальной симуляции.
INPUT Z-CARD.
Интерфейс информационного обмена между Gould SEL32/87 и системами симуляции полета.
Программный блок Z-CARD конвертирует 32-битные сигналы в корректный выходной сигнал.
FAIRC.
OUTPUT Z-CARD.
Подпрограмма, преобразующая входные сигналы от системы управления полетом в бортовую систему тренажера  в 32-разрядные сигналы для Gould 32/87.
Перечислим программные модули третьего, четвертого и пятого уровней.
AERO.
Главная процедура данного программного модуля.
Aero.LM используется для выделения области памяти для обмена информацией между подпрограммами INCO.LM и AERO.LM.
FENG4.
Подпрограмма, рассчитывающая безразмерные силы и моменты, полученные от работы двигателей самолета.
Номер показывает тип самолета.
LAGM4.
Подпрограмма, рассчитывающая силы и моменты во время режимов авиатакси, взлета и посадки.
FDERI.
FCOMY.
FAIR4.
Подпрограмма, вычисляющая аэродинамические силы и моменты, действующие на самолет.
FDBRD.
FTABINT.
Подпрограмма, представляющая линейную интерполяционную таблицу в виде таблиц или 1.
Таким образом, из рассмотренных примеров можно сделать вывод, что при проектировании архитектуры ПО авиационных тренажеров используется модульный метод, где каждый логический блок взаимодействует с другим посредством программного описания интерфейса обмена данными, действиями с входной и выходной информацией и может быть выражен в нескольких программных модулях.
Все программные модули расположены по уровням взаимодействия в соответствии с логической структурой.
Традиционно техническое обслуживание ВС воспринимается на основе аппаратных средств.
ПО часто рассматривается как часть аппаратного оборудования, которое при обслуживании не требует дополнительного персонала и усилий.
Исторически первоначально использование программных средств для управления и функционирования бортового оборудования самолета не требовалось.
Необходимость в использовании электроники в авиации возникла во время Второй мировой войны.
Развитие бортовых  с использованием магнетрона и связанных с ними технологий происходило в стремительном темпе [6].
В конце 1950начале 1960-х гг.транзисторы вытеснили термоионные клапаны для многих применений.
В военной боевой авиации улучшенная экономическая эффективность транзисторов привела к разработке в 19601970-х гг.цифровых систем ВС.
Они использовались для систем навигации и атаки.
Развитие электронных ламп позволило создать цифровые ЭВМ, но за счет огромного количества аппаратных средств [7].
Машина была огромной и практически неприменимой для полетов.
Первым самолетом, разработанным с использованием цифровых технологий, был А-5 Vigilante, бомбардировщик ВМС США, введенный в эксплуатацию в 1960-е гг.В конце 1970начале 1980-х гг.цифровые технологии стали все шире применяться как в авиационных системах управления, так и в системах боевых действий.
Решающим фактором для применения было наличие экономически выгодных цифровых шин данных, таких как ARINC 429, MIL-STD-1553B и ARINC629.
Эта технология в сочетании с дешевыми микропроцессорами и более совершенными инструментами разработки ПО привели к ее широкому применению на борту самолета в общемировой практике [7].
С появлением понятия загружаемых программных модулей технологии, применяемой на борту гражданских ВС, ПО больше не воспринимается как часть аппаратных средств, не требующих дополнительных навыков и средств для создания и управления.
С развитием авиационной индустрии число программных модулей, разработанных для систем управления самолетом и корректного функционирования полета, возрастает экспоненциально.
Такие ВС, как Boeing 737 и Airbus320, содержали примерно 30 программных блоков, которые модифицировались довольно редко.
С разработкой Boeing 777 в середине 1990-х гг.их число возросло более чем на 120 модулей [8].
Производство таких самолетов, как Boeing 787, увеличило количество ПО до 500 модулей, которые, в свою очередь, загружаются в 800900 частей аппаратных средств [8].
На сегодняшний день управление ПО ВС является довольно сложной задачей.
При неправильно скомпилированном или загруженном в аппаратную часть ПО самолет не может совершать полеты.
Программные модули могут быть загружены в аппаратные части несколькими способами: с помощью как постоянно установленной программы-загрузчика на борту самолета, так и дополнительного оборудования вне борта.
Большинство современных самолетов, таких как Боинг 737, 747, 767, 777, на борту имеют так называемые загружаемые программные части .
Авиационные бортовые системы, использующие технологию модульной загрузки ПО, позволяют техническому персоналу, обслуживающему ВС, изменять конфигурацию загружаемых систем без замены аппаратной части.
Изменение функциональности системы посредством нового  программного блока дает возможность сократить количество заменяемых аппаратных частей, повысить унификацию аппаратных частей, снизить время обслуживания.
Загружаемое ПО, предназначенное для использования в бортовой аппаратуре ВС гражданского назначения, как правило, разделяется на несколько категорий в соответствии с выполняемыми функциями: операционная система легкозаменяемых аппаратных блоков, настройки действующего ПО, БД, изменяемая информация авиалиний [9].
заменяемого аппаратного блока ВС оперирует данными, содержащимися в конфигурационных файлах файлах настройки для определения функции конкретного аппаратного блока.
Операционная система обычно самый большой и сложный программный модуль как по объему содержащейся в нем информации, так и по времени его загрузки в аппаратную часть.
Этот программный модуль специализированная БД, которая определяет конфигурацию  и функцию аппаратного блока, позволяя или запрещая те или иные опциональные функции, содержащиеся в операционной системе.
Информация о настройках может передаваться по дискретным каналам связи во многие заменяемые аппаратные блоки.
Примерами БД, используемых в аппаратных блоках с возможностью загрузки модульного ПО, могут служить БД: навигации ЭВМ управления полетом; краткого справочника взлетных скоростей ЭВМ управления полетом; адресно-отчетной системы авиационной связи; системы индикации для общего дисплея.
Навигационная БД база, содержащая данные о навигации и маршруте полета, которые используются ЭВМ управления полетом для выполнения задач навигации.
Как правило, навигационные базы обновляются каждые 28 дней и становятся доступными для загрузки за неделю до их актуализации.
это также небольшой файл данных, который предоставляет информацию в операционную систему заменяемых аппаратных блоков.
Оператор, загружающий ПО на борт самолета, формирует  файл данных информации авиалинии для спецификации таких функций, как формирование отчетов или предоставление сервисов для различных пассажирских зон.
Например, на некоторых ВС операционная система обращается к файлу изменяемой информации авиалиний, когда необходимо сформировать отчет, записать или отформатировать данные.
Файл изменяемой информации авиалиний файл данных, а не программа или исполняемый файл.
Тем не менее данный файл для некоторых систем содержит логические блоки, которые являются программным кодом высокого уровня.
Степень изменения/модификации файла изменяемой информации авиалиний контролируется сертифицированной операционной системой заменяемых аппаратных блоков, которая не позволяет вносить оператору изменения, влияющие на безопасность полета, даже если изменения были правильными.
Технологии загрузки информации вышеописанных программных модулей в аппаратную часть борта самолета и ее обмена регламентированы соответствующими стандартами ARINC.
Наравне с методами проектирования и разработки модульной архитектуры ПО в авиационной промышленности создание ПО с применением такой технологии используется в промышленной автоматизации.
Примером может служить ПО процессов управления рецептурным производством.
Компания Rockwell Automation предлагает применять термины и рекомендации производственного стандарта ISA 88.01 при разработке ПО и показывает, что для создания модульной архитектуры ПО логически всю систему следует разделить на управляющие модули, модули управления оборудованием, программные модули взаимодействия между ними [10].
Это направлено на обеспечение безопасности полетов, надежности и качества программных продуктов.
К ПО авиационных тренажеров данные стандарты неприменимы либо применимы частично .
Несмотря на отличие требований к разработке ПО гражданского ВС и авиационного тренажера общей является технология построения архитектуры ПО.
Модульность присуща как ПО ВС, так и ПО симулятора.
При разработке ПО авиационного тренажера предъявляются не такие высокие требования по отказоустойчивости и обеспечению информационного обмена, как при проектировании и разработке ПО ВС.
Обобщая подход к построению модульной архитектуры по авиационной тематике, можно сделать вывод, что для корректного проектирования архитектуры следует сформировать матрицу необходимых программных модулей, распределив их по уровням взаимодействия в зависимости от сложности разрабатываемой системы, применения и типа  информационного обмена.
Логически графический пользовательский интерфейс должен находиться на самом верхнем уровне.
Тем не менее, как показывают исследования построения архитектуры ПО авиационных симуляторов [1, 3, 5], управляющие программные модули связаны с графическим пользовательским интерфейсом и находятся на одном уровне.
Безусловно, графический пользовательский интерфейс является отдельным программным модулем либо набором программных модулей.
Взаимодействие управляющих программных модулей с программными блоками нижних уровней, как и графическое отображение операций, происходящих в системе, а также реакции системы обратной связи на действия пользователя тесно связаны, поэтому данные программные модули находятся на одном уровне.
В таблице, которая является графическим представлением проектирования модульной архитектуры ПО на уровне информационного обмена, в качестве примера представлены два наиболее распространенных в авиационных приложениях вида обмена информацией ARINC 429 и MIL-STD 1553.
Следовательно, для корректного функционирования данной системы необходимо разработать два программных модуля обмена, логически соответствующих выбранным стандартам.
Например, при разработке системного ПО уровень графического пользовательского интерфейса не применяется, но управляющие программные модули все равно присутствуют.
Поэтому при проектировании такого типа ПО также необходимо оставить пять уровней, где модуль графического пользовательского интерфейса будет отсутствовать, а основные управляющие модули  нет.
Также при проектировании сложных систем общая матрица архитектура сложной программной системы может включать составные блоки.
Главным преимуществом применения данной технологии в бортовом ПО ВС является изменение функциональности без изменения аппаратной части, что позволяет сократить количество заменяемых аппаратных частей, которые должны хранить как компании, обслуживающие ВС, так и компании-производители ВС.
Можно также выделить следующие преимущества при разработке ПО с использованием модульной архитектуры построения для разработчиков ПО.
Снижение времени на конструирование  архитектуры новых программных продуктов.
Используя при создании ПО данную технологию и при необходимости производственный стандарт ISA 88.01, разработчики могут сконцентрироваться на функциональности управляющих программных модулей, специфических для конкретной машины, а не на технике реализации, тем самым сокращая время разработки.
Данный подход к разработке также может способствовать синхронной разработке программных блоков группой разработчиков, что, в свою очередь, дополнительно ускорит выполнение каждого цикла разработки и, как результат, сократит общее время на разработку программной системы.
В дополнение к сокращению времени на разработку использование технологии модульной архитектуры и разработки ПО также помогает снизить затраты в течение всего его жизненного цикла, включающего конструирование  архитектуры, программирование, тестирование, введение в эксплуатацию, сопровождение.
Возможность вносить больше инноваций в машиностроение, увеличивать производительность создаваемой техники.
Преимуществами использования разработчиками ПО технологии модульной архитектуры ПО для производителей аппаратной части оборудования являются следующие: гибкость процесса производства: возможность адаптировать существующие ресурсы к нуждам и требованиям нового продукта с минимальными экономическими затратами и затратами времени; улучшение существующих ресурсов и повышение производительности: возможность упростить непрерывное усовершенствование путем вертикальной интеграции существующих ресурсов оборудования; безопасность и соответствие нормативным правилам: модульное программирование упрощает соблюдение нормативных и сертификационных требований, а также проверку за счет сокращения объема усилий по проверке только модифицированных модулей для аппаратной части, а не целых программных приложений [10].
Данный подход позволяет снизить трудозатраты на обслуживание уже разработанного ПО посредством замены или доработки программного модуля, не изменяя при этом всю структуру системы, повысить эффективность и качество разрабатываемого ПО, так как при модульном подходе к разработке снижается вероятность появления ошибок, которые сложно отследить в программном коде.
Метод проектирования ПО с помощью модульной архитектуры стимулирует и облегчает непрерывное совершенствование программных продуктов, снижая риск отрицательного эффекта на всю программную систему в целом.
Преимуществами применения модульной архитектуры также является возможность применения при наукоемких вычислениях и решении задач параллельных вычислений.
Таким образом, при проектировании сложных систем необходимо учитывать и проектировать интерфейсы информационного взаимодействия, вносить необходимые дополнения с учетом имеющихся программных модулей для корректного функционирования всей системы в целом и располагать как программные модули взаимодействия, так и проектируемые программные модули в соответствии с предложенной матрицей.
1.
Чижикова Л.А.
2017.
Т.
30.
2.
С.
291300; -235X.030.2.291-300.
2.
2017, vol.
30, no.
2, pp.
