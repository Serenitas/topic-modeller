При проектировании программных продуктов
необходимо учитывать требования, пожелания, а
также знания и возможности потенциального контингента пользователей, которые отражаются в
техническом задании на ПО. Для получения единого представления о создаваемом ПО предусматривается активное взаимодействие разработчика с
заказчиком. Заказчики разрабатывают концепцию
(часто подсознательную и неполную) того, как их
приложение будет работать. Разработчикам же
необходимо учитывать аппаратные ресурсы, базовое ПО, операционную систему и другое. Кроме
того, требуется знать возможности целевой аудитории пользователей, варианты использования ПО
или сценарии работы, которые формируются из
пользовательских историй. Одним из способов взаимодействия с заказчиком и получения единого видения ПО является разработка прототипа интерфейса . Прототип пользовательского интерфейса
представляет собой макет (черновую, пробную
версию) интерфейса, разрабатываемый с целью
проверки пригодности предлагаемых для применения концепций, технологических решений, а также
для представления программы заказчику на ранних
стадиях процесса разработки.

Постановка задачи
Задача заключается в разработке программного
средства с функцией поддержки принятия решения
по подборке альтернативного варианта шаблона
интерфейса на основании экспертной оценки и теории нечетких множеств. Для автоматизации принятия решения необходимо разработать шаблоны
пользовательского интерфейса с учетом целевой
аудитории .
Под шаблоном пользовательского интерфейса
будем понимать сочетание одного или нескольких
элементов, широко используемых для предоставления навигации, команд и содержимого, которые
используются большинством приложений и служат основой для разработки собственного пользовательского интерфейса.
Характеристиками контингента пользователей
являются их уровень знаний, физические и психологические качества. Каждая из характеристик оценивается по трехбалльной шкале: высокий, низкий
и средний уровень развития.
С учетом разных градаций выделенных характеристик пользователи разделены на пять групп

Декомпозиция функций программной системы
представлена в нотации IDEF0 (Integrated DEFinition) на рисунке 1.

Входными данными программной системы являются характеристики групп пользователей, требования заказчика, лицензия разработчика, лицензия заказчика, шаблоны интерфейсов.
В качестве управляющего воздействия выступают Федеральный закон «О персональных данных», ГОСТ 19.201-78, экспертные оценки специалистов в данной предметной области, нечеткие отношения.
На выходе программной системы формируется
фрагмент технического задания на разработку ПО
с прототипом интерфейса.
Реализация
поставленной задачи
Входные данные для задачи проектирования
интерфейса программных средств характеризуются той или иной степенью неопределенности,
обусловленной неполнотой, внутренней противоречивостью, неоднозначностью, и представляют
собой приближенные количественные или качественные оценки параметров процессов проектирования и управления проектированием .
Таким образом, так как исходные данные задачи трудно формализуемы, целесообразно применить один из методов искусственного интеллекта,
основанный на нечеткой логике.
Нечеткие алгоритмы, оперирующие лингвистическими переменными, значения которых задаются
нечеткими множествами, удобны для описания
слабо формализуемых процессов. Такие алгоритмы
интуитивно более понятны. Их автоматизация позволяет повысить объективность и оперативность
решений, принимаемых разработчиком ПО .
Методология нечеткого логического вывода достаточно успешно применяется при построении систем управления объектами , в частности, при
разработке компонентов ПО  и минимизации
рисков программных проектов .
Этап 1. Формирование и оценка компетентности группы экспертов.
Экспертная оценка – процедура получения
оценки проблемы на основе мнения специалистов
с целью принятия решения. Экспертное оценивание предполагает создание некоего разума, обладающего большими способностями по сравнению с
отдельным человеком. Основной сложностью
этого метода является подбор экспертов, которые
должны иметь опыт в соответствующих решаемым
задачам областях. При подборе экспертов следует
учитывать личную заинтересованность, которая
может стать существенным препятствием для получения объективного суждения.
При формировании группы экспертов на стадии
выявления знаний учитывались следующие характеристики:
 компетентность (степень квалификации эксперта в данной области знаний);
 креативность (способность решать творческие задачи);
 отношение к экспертизе (негативное или
пассивное отношение, занятость, существенно влияющие на качество работы эксперта в группе);
 конформизм (подверженность влиянию авторитетов, при котором их мнение может подавлять лиц, обладающих более высокой компетентностью);
 коллективизм и самокритичность.
Авторами реализован один из возможных путей
количественного описания характеристик эксперта, основанный на вычислении относительных
коэффициентов компетентности по результатам
высказываний специалистов о составе экспертной
группы.
Суть методики сводится к тому, что ряду специалистов предлагается высказать мнение о списочном составе экспертной группы. Если в этом
списке появляются лица, не вошедшие в исходный
список, им тоже предлагается назвать специалистов для участия в экспертизе. После нескольких
этапов будет получен достаточно полный список
кандидатов в группу .
По результатам опроса составляется матрица,
по строкам и столбцам которой записываются фамилии экспертов, а элементами таблицы являются
переменные:
 если j -й эксперт назвал i-го;

если j -й эксперт не назвал i-го.
При этом эксперт может включать или не включать себя в экспертную группу 
По данной таблице можно вычислить относительные коэффициенты компетентности, используя алгоритм решения задач о лидере.
Относительные коэффициенты компетентности
h-порядка для каждого эксперта имеют следующий
вид: где m – число экспертов в списке (размерность матрицы ║xij║); h – номер порядка коэффициента компетентности.
Коэффициенты компетентности нормированы
так, что их сумма равна единице:
По формуле можно вычислить значение
компетентности для различных порядков, начиная
с первого.
При выражение будет иметь Таким образом, коэффициент компетентности
первого порядка – это относительное число экспертов, высказавшихся за включение i-го эксперта в
группу.
Относительный коэффициент компетентности
второго порядка получаем из для при условии, что  определены по:
Коэффициенты второго порядка представляют
собой относительное количество голосов взвешенных коэффициентов компетентности первого порядка.
Последовательно вычисляя относительные
коэффициенты компетентности более высокого
порядка, можно убедиться, что процесс быстро
сходится после 3-4 вычислений, то есть относительные коэффициенты быстро стабилизируются .
В общем случае коэффициенты относительной
компетентности определяются как 
Этап 2. Групповая экспертная оценка объектов при непосредственном оценивании.
Пусть m экспертов провели оценку n объектов
по  показателям. Результаты оценивания представлены величинами , где  – номер объекта;  – номер эксперта;  – номер показателя. Величины ,
полученные методом непосредственного оценивания, представляют собой числа из некоторого отрезка числовой оси или баллы.
В качестве групповой оценки для каждого из
объектов можно принять среднее взвешенное значение его оценки:


где  – коэффициенты весов показателей сравнения объектов;  – коэффициенты компетентности
экспертов.
Величины  и  являются нормированными
Коэффициенты  могут быть определены экспертным путем как средний коэффициент веса
При алгоритм вычисления групповых оценок и коэффициентов компетентности экспертов
имеет вид:
а) начальные условия при то есть начальное значение ко
эффициентов компетентности для всех экспертов
принимается одинаковым;
б) рекуррентные соотношения для 
представлены в 
Этап 3. Построение нечеткой модели на бинарных нечетких отношениях.
Пусть имеются два множества: совокупность
групп пользователей и совокупность шаблонов интерфейсов, которые нужно максимально эффективно подобрать для пользователей с заданными
характеристиками. Таким образом, входными данными являются указанные множества, а выходными – степени соответствия шаблонов интерфейсов пользователям.
В общем случае нечетким отношением или,
точнее, нечетким -арным отношением, заданным
на множествах (универсумах)  называется некоторое фиксированное нечеткое подмножество декартова произведения этих универсумов.
Другими словами, если обозначить произвольное
нечеткое отношение через , то по определению

 функция принадлежности данного нечеткого отношения, которая определяется как отображение Здесь через
обозначен кортеж из  элементов, каждый из
которых выбирается из своего универсума:
Бинарное нечеткое отношение задается на базисных множествах  и определяется как нечеткое отношение  Здесь
функция принадлежности бинарного
нечеткого отношения, которая определяется как
отображение, а через обозначен кортеж из двух элементов, при этом 
Кроме того, для построения решения задачи
необходимы композиции нечетких бинарных отношений.
Пусть  и  – конечные или бесконечные бинарные нечеткие отношения. Причем нечеткое отношение задано на декартовом произведении универсумов, а нечеткое
отношение – на декартовом произведении универсумов. Нечеткое
бинарное отношение, заданное на декартовом произведении и обозначаемое через, называется композицией бинарных нечетких отношений  и , а его функция принадлежности определяется следующим выражением:
Определенную таким образом композицию бинарных нечетких отношений называют композицией или максиминной сверткой нечетких
отношений.
Нечеткое бинарное отношение, заданное на декартовом произведении и обозначаемое через, называется композицией бинарных нечетких отношений  и , если его функция
принадлежности определяется следующим выражением:

В частности, если в этом выражении вместо
операции использовать операцию алгебраического умножения, получим определение композиции.
Нечеткое бинарное отношение, заданное на декартовом произведении и обозначаемое
через , называется композицией бинарных нечетких отношений  и , если его функция принадлежности определяется следующим
выражением:


С учетом введенных понятий построим нечеткую модель, основанную на двух бинарных нечетких отношениях  и . Первое из этих нечетких отношений строится на двух базисных множествах 
и , а второе – на двух базисных множествах  и .
Здесь описывает множество интерфейсов
множество характеристик пользователей, множество групп пользователей.
В данном контексте нечеткое отношение  содержательно описывает характеристики интерфейсов, а характеристики пользователей.
Элементы универсумов имеют следующий содержательный смысл:
 – шаблон интерфейса  – шаблон интерфейса  – шаблон интерфейса  – шаблон интерфейса  – шаблон интерфейса 
 – компьютерная грамотность, – системный опыт, – опыт работы с подобными программами, – машинопись, – мышление, – память,
– моторика, – дальтонизм, – концентрация
внимания,  – эмоциональная устойчивость;
 – новичок, – обычный пользователь, –
уверенный пользователь, – квалифицированный,
– программист, хакер, администратор.
Для определения соответствия интерфейса
группе пользователей воспользовались композициями исходных нечетких отношений. Так, композиции дают информацию
о степени соответствия шаблона интерфейса
группе пользователей, а композиция
позволяет определить шаблон, который не подходит для данной группы пользователей .
Таким образом, применяются три модели:
Способы для определения результата композиции нечетких отношений могут быть следующими.

Результаты применения
разработанной методики
Рассмотренная методика реализована в программном средстве «Автоматизированная информационная система составления технического задания с экспертной оценкой принятия решения»,
предназначенном для поддержки руководителя
программного проекта при разработке технического задания на ПО с подбором альтернативного
варианта интерфейса . Главное окно программного средства показано на рисунке 2.

Одной из функций разработанного программного средства является тестирование пользователя, реализованное в форме «Оценка пользователем», в которой можно выбрать характеристику и
ее градацию из ниспадающих меню 
Оценка пользователя экспертами (выбор его характеристик и их градаций) основывается на результатах тестирования пользователя и проводится

в форме «Оценка пользователя экспертами» 
Результаты вычислений выводятся в окне «Анализ»  По нажатии кнопки «Сохранить
отчет» генерируется документ, в котором заполнены следующие разделы: наименование ПО, материально ответственное лицо (руководитель проекта), наименование заказчика, характеристики
пользователя, рекомендуемый шаблон интерфейса,
назначение и область применения ПО, требования
к функциональным характеристикам ПО, требования к составу и параметрам технических средств,
требования к информационной и программной совместимости, состав программной документации,
стадии, этапы разработки и сроки сдачи ПО.
Во вкладке «Справочники» обеспечивается работа с информацией: должности, тип юридического лица, тип предметной области, тип характеристик пользователя, тип шаблона, физическое
лицо, группа пользователей, единицы измерения.
Эту информацию можно корректировать, добавлять и удалять.
Заключение
Разработанное программное средство ведет
базу знаний о различных категориях пользователей
с учетом их компьютерной грамотности, моторики,
памяти, мышления, дальтонизма, концентрации
внимания и др. На основе этих характеристик разрабатываются различные варианты пользовательского интерфейса, которые согласуются с заказчиком и реализуются в конечном ПО.
Основными результатами работы является программное и математическое обеспечение для решения задач интеллектуального проектирования
пользовательского интерфейса ПО с учетом индивидуальных характеристик пользователей.
Решены следующие научно-практические задачи:
 выявлены основные параметры, по которым
можно классифицировать пользователей при разработке интерфейсов ПО;
 разработана методика проектирования адаптированных пользовательких интерфейсов с элементами искусственного интеллекта;
 разработана нечеткая модель на бинарных
нечетких отношениях для подбора альтернативного шаблона интерфейса ПО.
Предложенная методика позволит автоматизировать процесс проектирования пользовательского
интерфейса, конкретизировать техническое задание на ПО, что в конечном итоге повысит объективность и оперативность решений, принимаемых
разработчиками.