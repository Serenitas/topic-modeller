Задача поиска кратчайшего пути в графе
(Shortest-Paths, SP) – хорошо известная задача теории графов, имеющая многие реальные приложения, такие как планирование маршрута в веб-структурах, навигационные системы, моделирование
трафика, логистическая оптимизация. Задача SP
состоит в поиске кратчайшего пути в заданном
графе между двумя его вершинами s и t (стартовой
и целевой соответственно), в котором минимизируется сумма длин ребер, составляющих (s, t)-путь
. Существует много классических алгоритмов
решения задачи SP. Самый известный из них – алгоритм Дейкстры, который равномерно расширяет
пространство поиска решения, начиная от стартовой вершины s и далее последовательно до целевой
вершины t, присваивает каждой пройденной вершине v временную метку – верхнюю оценку кратчайшего (s, v)-пути, и превращает временную
метку в постоянную, когда ее значение совпадает с
кратчайшим (s, v)-путем. Алгоритм A* добавляет в
алгоритм Дейкстры потенциальную функцию, которая оценивает снизу кратчайший (v, t)-путь. Данные алгоритмы находят точное решение задачи SP
за полиномиальное время .
Во многих случаях требуется вычислить за несколько секунд кратчайший (s, t)-путь в графе
большой размерности. Типичным примером является поиск кратчайшего маршрута в дорожной сети, насчитывающей несколько десятков или сотен тысяч узлов. В этих условиях классические алгоритмы начинают работать неприемлемо долго.
Чтобы справиться с этой проблемой, используют
различные приемы ускорения . Большинство
этих приемов основаны на двухфазном подходе решения задачи SP, который содержит фазу предобработки и фазу выполнения (s, t)-запроса – запроса
на вычисление (s, t)-пути в исходном графе.
На фазе предобработки выполняется просмотр
графа с целью извлечения информации, позволяющий ускорить классические алгоритмы точного решения задачи SP. На второй фазе выполняется
(s, t)-запрос с применением извлеченной на первой
фазе информации. Известно много различных реализаций двухфазного подхода на основе алгоритма
Дейкстры: ALT, Arc-Flags, SHARC и другие. Так,
алгоритм ALT (A* with Landmarks & Triangle) устанавливает определенным образом ориентиры (подмножество множества вершин графа) и вычисляет
на их основе потенциальную функцию . Алгоритм Arc-Flags разбивает исходный граф по некоторому правилу на несколько подграфов и задает
для ребер графа набор меток - «флагов». Алгоритм
SHARC основывается на алгоритме Arc-Flags, но
дополнительно использует технику сжатия графа
. Во всех этих алгоритмах, кроме алгоритма
ALT, ускорение достигается за счет максимального
использования особенностей структуры входного
графа.
В данной работе рассматривается алгоритм
ALT, в котором на фазе предобработки не происходит трансформация входного графа, что значительно сокращает время исполнения этой фазы. Ускорение достигается путем применения потенциальной функции, вычисляемой для каждой
вершины графа, исходя из выбранного набора ориентиров. Задача SP решается в классической постановке - нахождение кратчайшего пути для заданной пары вершин в ориентированном взвешенном
графе с неотрицательными весами ребер. Предлагается адаптивная эвристика размещения ориентиров на фазе предобработки алгоритма ALT. Приводятся результаты экспериментального сравнения
модифицированного алгоритма ALT с классическим алгоритмом Дейкстры.
Формулировка задачи о кратчайшем пути
и обоснование алгоритма ALT
Введем необходимые определения и обозначения из теории графов . Ориентированный граф
определяется как пара , где V – конечное
множество вершин, а – множество ориентированных ребер, называемых также дугами.
Всякая дуга  представляет собой упорядоченную пару вершин, причем. Ориентированный граф взвешенный, если на множестве
его дуг задана вещественная функция весов :
 ставящая в соответствие каждой дуге
 ее вес  . Путь из вершины u в
вершину v, или (u, v)-путь, определяется как последовательность вершин , в которой  для .
Данный путь содержит вершины  и дуги
. Вершину u называют
началом (u, v)-пути, а вершину v – его концом. Если
в G существует (u, v)-путь P, то говорят, что вершина v достижима из вершины u по пути P, и пишут . Весом пути P называется сумма весов
всех дуг, входящих в этот путь, и обозначается через . Вес кратчайшего (u, v)-пути равен, по
определению, , если в
G существует хотя бы один (u, v)-путь P. Величину
 называют часто расстоянием между вершинами u и v. Очевидно, что . Если 
- неориентированный граф, то E – множество
неупорядоченных пар вершин u. Всегда возможен переход от неориентированного к
ориентированному графу путем замены всякого ребра двумя дугами противоположной направленности с весом исходного ребра.
В этом случае. Далее везде полагаем, что исходный граф ориентированный.
Теперь сформулируем задачу SP в приведенных
терминах. Задан граф с неотрицательной
вещественной функцией весов. Требуется найти путь наименьшего веса (кратчайший
путь) от заданной стартовой вершины до целевой вершины. Решение данной задачи всегда существует, если вершина t достижима из вершины s в графе G.
Задачу SP рассматриваем при следующих условиях. Исходный граф  имеет большие размеры (большое число вершин) и хранится в виде
БД. К этой БД последовательно поступают (s, t)-запросы в виде пары вершин s и t, которые играют
роль стартовой и целевой вершин соответственно.
Алгоритм решения задачи SP должен выдавать
кратчайший (s, t)-путь для каждого отдельного запроса. Эффективность алгоритма оценивается по
времени обработки возможной последовательности запросов. Эта последовательность запросов
целиком заранее не известна: обрабатывая поступивший запрос, мы не знаем, какой запрос будет
следующим. Кроме того, считаем, что заданная
функция весов w такова, что при любых 
всегда выполнимо неравенство треугольника:.
Алгоритм ALT находит точное решение задачи
SP при всех вышеперечисленных условиях.
Он представляет собой версию алгоритма A*, главная идея которого заключается в применении ориентиров и неравенства треугольника для определения допустимой и преемственной потенциальной
функции . Согласно ALT, вначале выбирается
множество вершин графа, в которых будут
установлены ориентиры. Затем для каждой вершины и всякого ориентира значение потенциальной функции  вычисляется по формулам:
Согласно формулам  и неравенству треугольника, справедливы оценки.
Действительно, для первой оценки имеем.
Аналогично получается вторая оценка.
Формула учитывает тот факт, что при различной ориентации дуг графа возможна ситуация,
когда. В формуле максимум берется по всем. Таким образом, вычисленное
по формулам значение определяет потенциал текущей вершины v как наибольшую нижнюю оценку кратчайшего пути от этой вершины до
целевой вершины t.

Потенциальная функция, удовлетворяющая,
называется допустимой . Такая потенциальная
функция не переоценивает значение кратчайшего
(v, t)-пути. Из приведенных выше рассуждений следует, что неравенство треугольника и формулы гарантируют допустимость потенциальной
функции.
Неравенство треугольника и формулы
также гарантируют выполнимость другого важного свойства потенциальной функции – свойства
преемственности (или монотонности). Потенциальная функция называется преемственной, если
для любых вершин справедливо условие
Условие - своеобразная форма записи неравенства треугольника для стартовой вершины s, текущей вершины v и целевой вершины t через потенциальные функции. Справедливость условия
для неориентированного графа, то есть при вытекает из цепочки неравенств: .
Это иллюстрирует рисунок 2. Аналогично доказывается условие для ориентированного графа
путем рассмотрения различных вариантов направленности дуг, образующих анализируемый треугольник.
Известно, что алгоритм A* находит точное решение задачи SP для графа , если потенциальная функция удовлетворяет условиям и
, то есть является допустимой и преемственной
. При  время работы алгоритма A* составляет . Однако на практике за счет использования нижних оценок  алгоритм A* способен значительно уменьшить время нахождения кратчайшего (s, t)-пути по сравнению с алгоритмом
Дейкстры. Чем лучше (больше по значению) нижние оценки, тем быстрее работает алгоритм A*.

Задача оптимального выбора
ориентиров в графе и подходы к ее решению
Очевидно, что различное расположение ориентиров порождает различные потенциальные функции и соответствующие им оценки . Из неравенства треугольника следует, что ориентир дает лучшую оценку  для текущей вершины v, если его
расположение отвечает правилу «тупого угла»:
ориентир должен находиться как можно ближе к
вершине v и как можно дальше от целевой вершины t или наоборот, ближе всего к t и как можно
дальше от v.

Таким образом, расстановка ориентиров в вершинах графа на фазе предобработки – фактор, существенно влияющий на быстродействие алгоритма ALT . Естественны следующие требования к множеству ориентиров L:
 в качестве множества L может выступать
любое подмножество множества V, включая крайние случаи , хотя при L =  алгоритм
ALT вырождается в алгоритм Дейкстры;
 любая вершина, в которой установлен ориентир, может выступать в роли стартовой и целевой вершины;
 ориентиров должно быть разумное число;
чем больше мощность L, тем больше времени требуется для вычисления значения потенциальной
функции.
Задача оптимального выбора ориентиров в
графе заключается в определении числа ориентиров и мест их расстановки. Данная задача носит
комбинаторный характер и является труднорешаемой. Доказано, что в частном случае, когда число
ориентиров фиксированное, данная задача является NP-трудной . Поэтому для ее решения
обычно прибегают к эвристическим алгоритмам.
С помощью эвристик определяются число ориентиров и места из расстановки. В настоящее время
уже экспериментально установлено разумное
число ориентиров, одинаково эффективное как на
малых, так и на больших графах . Таким образом, задача выбора ориентиров сведена к задаче
расстановки заданного числа ориентиров в
исходном графе. Чаще всего эта задача решается
именно в такой постановке и применительно к
взвешенным графам, заданным координатами вершин и весами ребер со свойствами евклидовой метрики .
Для решения задачи расстановки заданного
числа ориентиров в графе на сегодняшний день используются следующие эвристики :
случайная расстановка ориентиров в
вершинах графа перед выполнением первого
(s, t)-запроса; найденный вариант размещения ориентиров остается неизменным для всех последующих запросов;
выбор первого ориентира осуществляется случайным образом, а каждый следующий
ориентир выбирается как можно дальше от ранее
выбранных; найденный вариант размещения ориентиров остается неизменным для всех последующих запросов;
случайная расстановка ориентиров на
границе графа перед выполнением первого (s, t)-запроса (под границей графа здесь понимается выпуклая оболочка этого графа ); найденный вариант размещения ориентиров остается неизменным
для всех последующих запросов.
Все эти эвристики выполняются за полиномиальное время, и в этом их достоинство. Основные
недостатки указанных эвристик: применимы лишь
для взвешенных графов с евклидовой метрикой;
определяют места расстановки ориентиров сразу
для всей возможной последовательности запросов;
не учитывают особенности каждого отдельного
(s, t)-запроса; не используют информацию об истории процесса обработки запросов. В настоящей работе предлагается полиномиальная по времени эвристика, лишенная этих недостатков. Однако для
ее реализации требуются дополнительные вычислительные ресурсы (время и память), которые в
итоге окупаются за счет достигаемого ускорения
по сравнению с алгоритмом Дейкстры.
Адаптивная эвристика
расстановки ориентиров
и модифицированный алгоритм ALT
Суть предлагаемой адаптивной эвристики состоит в следующем. Перед выполнением первого (s, t)-запроса выполняется случайная расстановка
заданного числа ориентиров в вершинах
графа. Далее выбранное множество ориентиров периодически обновляется через каждые запросов.
При выполнении запросов накапливается статистика об эффективности текущих ориентиров, которая далее используется для перемещения неэффективных ориентиров в новые места их установки. Для определения новых мест применяется
стратегия, схожая со стратегиями эвристик H2 и H3.
Потенциальная функция определяется так: для
всякого ориентира и для каждой вершины
вычисляется информация обо всех кратчайших (l, v)-путях и (v, l)-путях; с помощью вычисленной информации значения потенциальной
функции находятся по формулам. Заметим,
что в случае задания графа координатами вершин и
использования евклидовой метрики кратчайшие
(l, v)-пути находятся непосредственно без привлечения процедур нахождения кратчайших путей.
Перед первым (s, t)-запросом ориентиров случайным образом размещаются на V. После
выполнения каждого (s, t)-запроса выполняется обновление истории процесса обработки запросов:
добавление вершин, получивших временные метки, если эти вершины еще не были просмотрены
предыдущими (s, t)-запросами; удаление вершин,
сменивших временные метки на постоянные.
При выполнении (s, t)-запроса собирается статистика об эффективности ориентиров: всякий раз,
когда ориентир предлагает наилучшую оценку
пути среди всего набора ориентиров, он получает
очко. Как только выполнится запрос, начинается процедура обновления ориентиров. Ориентир с наименьшим количеством очков подлежит замене на вершину, удовлетворяющую одновременно двум условиям: наибольшая удаленность от
текущего набора ориентиров, за исключением заменяемого ориентира (требование правила «тупого
угла»); наличие временной метки. После обновления множества L статистика об эффективности
ориентиров начинает формироваться заново.
Модифицированный алгоритм ALT, названный
ALT_Adapt, реализует классический алгоритм ALT
и описанную эвристику. Схема работы алгоритма
ALT_Adapt приведена на рисунке 4.
Время работы и объем требуемой памяти для
алгоритма ALT_Adapt составляют.
В описании ALT_Adapt, приведенном на рисунке 4,
величина dmark определяет
среднее расстояние от текущего набора ориентиров
L до вершины v и характеризует удаленность этой
вершины от L. Массив Landmark служит для хранения и формирования набора ориентиров L, при
этом i-й элемент массива содержит номер вершины, где установлен этот ориентир. Массив
Passed предназначен для хранения номеров вершин, получивших постоянные метки при выполнении предшествующих (s, t)-запросов. Массив Space
содержит все вершины, сохранившие временную
метку на протяжении всех ранее выполненных
(s, t)-запросов. Элементы данного массива являются кандидатами на установку в них нового ориустановление рациональных значений числа ориентира. Объединение массивов Passed, Space определяет пространство поиска решения, а мощность этого пространства – один из факторов эффективности алгоритма ALT_Adapt. В массив Stat записываются очки для каждого i-го ориентира. Массивы Passed, Space, Stat характеризуют в целом историю процесса обработки запросов.
Результаты вычислительных экспериментов
Алгоритм ALT_Adapt реализован в виде комплекса программ на языке программирования С++
в
среде
разработки
Code::Blocks. С помощью
данного комплекса программ были выполнены
вычислительные эксперименты.
Эксперименты
осуществлялись на компьютере с процессором
Intel® Core™ i3 CPU 
2.40 GHz и ОЗУ размером
3 Гб.
Традиционно эффективность различных приемов ускорения алгоритма
Дейкстры оценивается по
отношению к оригиналу,
то есть классической его
реализации . В данной работе, следуя этой
традиции,
алгоритм
ALT_Adapt сравнивался с
классическим алгоритмом
Дейкстры по ряду показателей на различных случайных последовательностях запросов. В процессе
выполнения вычислительных экспериментов было
установлено, что наборы
вершин, получивших временные метки для различных запросов к одному и
тому же графу, имеют
схожую мощность. Поэтому сопоставление алгоритмов осуществлялось
лишь по двум показателям: P - среднее число
вершин, получивших постоянные метки при выполнении одного (s, t)-запроса; T - среднее время
выполнения одного запроса в секундах. Были проведены две серии экспериментов.
Целью первой серии экспериментов являлось
установление рациональных значений числа ориентиров и частоты их обновления. Данная серия экспериментов проводилась на связных графах с 10 000 вершин и на последовательностях запросов длиной 1 000. Исходный граф и последовательность запросов были заранее сгенерированы случайным образом и оставались неизменными в процессе проведения экспериментов. Изменению подвергались только . Результаты первой серии экспериментов приведены в таблицах.
Как видно из таблицы, на практике число ориентиров K целесообразно брать в диапазоне. Превышение верхней границы этого диапазона, то есть числа 16, резко увеличивает время
предобработки и не изменяет должным образом
значения показателей P и T. Примечательно, что
подобный факт отмечен для приемов ускорения алгоритма Дейкстры, описанных в работах .
Из таблицы и рисунка следует, что частоту обновления для больших графов на практике разумно
полагать.

Цель второй серии экспериментов – непосредственное сопоставление алгоритма ALT_Adapt с
классическим алгоритмом Дейкстры по времени
работы при фиксированных значениях  и
на случайных связных n-вершинных графах.
Результаты этих экспериментов при различных
значениях n приведены в таблице и на рисунке.

Из результатов вычислительных экспериментов
можно сделать вывод, что алгоритм ALT_Adapt
примерно в три раза быстрее алгоритма Дейкстры,
а предложенная эвристика выбора ориентиров на
порядок сокращает размер пространства поиска
кратчайшего пути в графе. Программная реализация алгоритма ALT_Adapt может быть использована при решении практических задач поиска оптимальных маршрутов в графах и транспортных сетях большой размерности.
На сегодняшний день, когда объемы исследуемых данных достигают огромных размеров, востребованы алгоритмы и программы, способные обрабатывать эти данные за реальное время. Подобные алгоритмы необходимы и для решения задач
маршрутизации на графах большой размерности.
В статье рассмотрены хорошо известная задача о
кратчайшем пути в графе и алгоритмы ее решения
в условиях, когда исходный граф достигает нескольких десятков и сотен тысяч вершин и когда
классические алгоритмы начинают работать неприемлемо долго. Чтобы справиться с этой проблемой, в настоящее время широко используют различные приемы ускорения классических алгоритмов. В статье предложена модификация известного
алгоритма ALT (алгоритм ALT_Adapt) в виде двухфазной процедуры, в которой ускорение достигается за счет применения множества ориентиров,
устанавливаемых в некоторых вершинах исходного графа. Алгоритм ALT_Adapt отличается от
ранее известных версий алгоритма ALT оригинальной эвристикой по расстановке ориентиров. Перспективны дальнейшие усовершенствования алгоритмов решения задачи о кратчайшем пути направлены на интерактивный режим их исполнения на
графе большой размерности с учетом возможного
изменения в течение времени состава вершин и весов дуг этого графа.


