Задача кластеризации – одна из главных задач
интеллектуального анализа данных . Она особенно значима, когда выступает одним из этапов
анализа данных, построения законченного аналитического решения. Аналитику обычно легче выделить в группу схожие объекты, изучить их особенности и построить для каждой группы отдельную
модель данных. Таким приемом постоянно пользуются для обработки банков данных .
Новизна разработанных методов и подходов к
решению задачи кластеризации заключается в использовании методов, инспирированных природными системами: генетическим, муравьиным и
пчелиным алгоритмами. Они позволяют ускорить
процесс обработки банков данных. Применение
таких подходов дает преимущество в решении
NP-полных, трудных задач . Рассмотрим постановку задачи кластеризации.

Эту выборку необходимо разбить на непересекающиеся подмножества, называемые кластерами,
так, чтобы каждый из них состоял из объектов,
близких по метрике , а объекты разных кластеров
существенно отличались. При этом каждому объекту  приписывается метка кластера .
Алгоритм кластеризации – это функция , которая любому объекту ставит в соответствие номер кластера.
Множество  в некоторых случаях известно заранее, однако чаще ставится задача определения
оптимального числа кластеров с точки зрения того
или иного критерия качества кластеризации. При
решении задачи кластеризации метки исходных
объектов  изначально не заданы, и даже само множество  может быть неизвестно .
В рамках данной работы банк данных имеет величину в 500 элементов, полученных случайным
образом (см. таблицу).

Постановка задачи кластеризации

Пусть  – множество объектов,  – множество
меток кластеров и задана функция расстояния
между объектами
где характеристики объектов. Тогда существует конечная обучающая выборка объектов.

Требуется разбить его на  кластеров, но при этом уже существует некоторое разбиение, которое необходимо оптимизировать, минимизировав среднее внутреннее кластерное расстояние или целевую функцию (ЦФ),

где характеристики центра кластера; 
усредненные характеристики объектов.
В данной работе для оптимального решения задачи кластеризации производится случайное разбиение на кластеры, которое представляет собой
вектор (рис. 1). Длина вектора равна количеству
элементов банка данных, а также n элементов со
значением 0, означающих конец одного кластера
или начало другого .

Для подсчета ЦФ необходимо найти центр каждого кластера. Для этого подсчитываются усредненные значения каждой характеристики для кластера в целом
где А – значение характеристики; n – количество
всех значений характеристики А.
На рисунке 2 приведены усредненные значения
характеристик для каждого кластера в целом. После нахождения центров кластеров подсчитываем
ЦФ по формуле  и получаем.

Классические последовательные алгоритмы переставляют один случайный элемент из одного кластера в другой и снова производят подсчет, что является трудоемким процессом. Действия повторяются до тех пор, пока кластеры не будут полностью
заполнены, а ЦФ не станет квазиминимальной
. Рассмотрим алгоритмы, разработанные
для оптимизации процесса разбиения на кластеры.
Описание алгоритмов
и программного комплекса
Особенностью предложенного подхода является использование алгоритмов, моделирующих
процесс живой природы. Разработанные алгоритмы моделируют различные аспекты эволюции.
Генетический алгоритм (ГА) моделирует процесс образования хромосом путем скрещивания,
мутации и отбора . Это основная составляющая в природе. Муравьиный и пчелиный
алгоритмы являются методами роевого интеллекта, главная составляющая которого – моделирование поведения живых организмов при коллективном взаимодействии . Случайное
разбиение на кластеры в алгоритмах, инспирированных природными системами, формирует хромосому (набор альтернативных решений).
Основная цель ГА – минимизировать число
внутрикластерных связей между элементами или
максимизировать число внешних связей кластеров.
При решении оптимизационных задач ГА имеет
ряд преимуществ. Одно их них – адаптация к изменяющейся внешней среде. В процессе решения поставленная задача может подвергаться изменениям. Использование традиционных методов приводит к большим затратам машинного времени.
Алгоритмы роевого интеллекта (муравьиный и
пчелиный) описывают поведение в многоагентных
системах . Цель пчелиного алгоритма –
разбить предоставленную информацию на участки.
Путем исследований с помощью агентов производится поиск эффективного решения в центрах полученных участков. Если решение было найдено в
окрестностях данной точки, агенты отправляются
для полного и точного поиска эффективных решений.
Муравьиный алгоритм моделирует поведение
муравьев в колонии. Поиск участков пищи производится сообща группой агентов. Проходя некоторый путь, агент помечает его феромоном – отличительное свойство агентов не возвращаться в точку,
в которой уже были. Путем накопления феромона
после прохождения всей группы происходит формирование кластера, и решения, попавшие в замкнутый участок, являются эффективными.
Для реализации задачи кластеризации был создан программный комплекс, к основным параметрам которого относятся количество элементов и
настройки разработанных алгоритмов. Размеры
кластеров генерируются случайно. После того, как
кластеры созданы (или загружены из файла), необходимо произвести настройку разработанных алгоритмов.
Генетический алгоритм
Для эффективного использования ГА необходимо определить метод генерации начальной
популяции. Существует множество методов построения начальной популяции . В данной работе используется решето Эратосфена. Это
алгоритм нахождения всех простых чисел до некоторого целого числа n. Решето подразумевает
фильтрацию всех чисел, за исключением простых.
По мере прохождения списка нужные числа остаются, а ненужные (они называются составными)
исключаются. Рассмотрим модифицированные генетические операторы, используемые для решения
задачи кластеризации.
Оператор кроссинговера. Процесс, при котором происходят сближение двух гомологичных
хромосом при созревании половых клеток и обмен
частями. Существуют различные модификации
оператора кроссинговера. Из-за большой информационной нагрузки в данной работе используется
упорядоченный оператор кроссинговера, при котором у родителей выбирается точка разрезания, относительно которой будет происходить копирование элементов. Выбираются элементы из левого
сегмента первого родителя и копируются в первого
ребенка, а остальные позиции копируются из второго родителя в упорядоченном виде слева
направо, но исключаются элементы, уже попавшие
в первого ребенка .
Операторы вставки и удаления. Данные операторы являются модификацией оператора мутации.
Оператор удаления позволяет удалять строительные блоки из родительских хромосом, тем самым создавая хромосому потомка.
Оператор вставки позволяет вставлять строительные блоки в родительскую хромосому для создания потомка.
Данные операторы эффективны для использования в ГА. Применяя оператор удаления, случайный ген со значением 0 удаляется из разбиения, тем
самым расширяет некоторый кластер. Дальше происходит выполнение оператора вставки, который
случайным образом выбирает точку разреза. На месте точки разреза оператор фиксирует разбиение
хромосомы геном со значением 0, образуя новые
кластеры. Эффективность данных операторов показывает их умение быстро анализировать текущую популяцию альтернативных решений .
Оператор селекции. Это процесс, посредством
которого хромосомы (альтернативные решения),
имеющие более высокое значение ЦФ (с лучшими
признаками), получают большую возможность для
воспроизводства (репродукции) потомков, чем
худшие хромосомы. Элементы, выбранные для репродукции, обмениваются генетическим материалом, создавая аналогичных или различных потомков. Различают элитную, один ко многим, многие к
одним, лучшие с худшими, на основе методов ветвей и границ и т.д. селекции . В данной работе
рассматривается селекция лучшие с худшими. При
кластеризации есть остаточный эффект от неправильного попадания в кластеры. Данный оператор
позволяет стабилизировать состояние кластеров.
Основные этапы ГА (рис. 3).
1. Случайным образом генерируется начальная популяция. На построение популяции оказывает влияние внешняя среда в виде ЛПР. Формируется таблица характеристик для каждого гена в
хромосоме.
2. Для каждой хромосомы из популяции вычисляется значение ЦФ.
3. Выполняется элитная селекция – для применения оператора кроссинговера выбираются лучшие решения.
4. Применяются генетические операторы (ГО).
Первым выполняется оператор кроссинговера (ОК)
– получаем потомство для последующего применения оператора мутации (ОМ).
5. К выбранным хромосомам применяется оператор мутации. При этом мутация хромосомы выполняется с некоторой вероятностью мутации, а
точки мутации выбираются случайным образом.
6. Вычисляется значение ЦФ для полученных
после применения оператора мутации хромосом.
Таким образом, после реализации оператора мутации получается новое подмножество решений. Оно
объединяется с первоначальным подмножеством
решений.
7. Выполняется элитная редукция, то есть лучшие решения отбираются в следующую популяцию, а плохие удаляются. Таким образом, размер
популяции остается постоянным.
8. Проверяется, достигнут ли критерий останова. В данной работе рассматривается критерий
останова по времени работы алгоритма.
9. Если данный критерий не достигнут, процесс повторяется итерационно. Он выполняется на
основе блока рекомбинации, который анализирует
текущую популяцию альтернативных решений и
управляет процессом поиска. Иначе выводятся полученные квазиоптимальные решения.
10. Конец работы алгоритма.
Пчелиный алгоритм
Оптимизационный алгоритм, моделирующий
поведение пчел в живой природе, называется пчелиным алгоритмом .
На начальном этапе случайным образом отправляются агенты, пытающиеся отыскать
участки, где есть квазиоптимальное решение. После возвращения агенты особым образом сообщают остальным, где и сколько решений они
нашли. Далее в окрестности найденных решений
отправляются другие агенты, при этом, чем больше
найденных решений, тем больше агентов направляются в данную окрестность. Это означает, что количество агентов в каждом направлении пропорционально значению ЦФ. Агенты продолжают искать
другие квазиоптимальные решения, и процесс повторяется. Агенты живут не в двухмерной плоскости, где, зная две координаты, можно определить
количество решений, а в многомерном пространстве, где один параметр функции представляется
каждой координатой, которую необходимо оптимизировать. Найденное квазиоптимальное решение представляет собой значение ЦФ в этой точке.
Основные этапы работы пчелиного алгоритма
(рис. 4).
1. Генерируется начальное разбиение на кластеры для поиска. Внешняя среда оказывает влияние на построение кластеров для поиска.
2. Определяется значение ЦФ для каждого кластера.
3. Выбираются начальные кластеры, на которых будет осуществляться поиск.
4. Назначается количество агентов для поиска
в окрестностях кластера. При этом количество
агентов обратно пропорционально значению ЦФ.
То есть, чем лучше участок, тем больше пчел для
поиска, чем хуже – тем меньше пчел.
5. Производится поиск на каждом кластере.
Если на кластере найдено лучшее решение, оно
становится кластером для поиска.
6. Выполняется случайный поиск путем генерации новых решений.
7. Проверяется критерий останова: если достигнуто заданное время работы алгоритма, выводится квазиоптимальное решение, иначе продолжается поиск в окрестностях п. 5.
8. Конец работы алгоритма.
В пчелином алгоритме, как и в генетическом,
решение представлено в виде закодированного
вектора. Расположение источника нектара определяется этим решением, то есть решение является
координатами источника. Количество нектара
определяется значением ЦФ. Так как для задачи
кластеризации надо минимизировать значение ЦФ,
количество нектара обратно пропорционально ЦФ.
Кластер имеет начальный размер, фиксируемый
параметром α.
К основным настройкам относятся количество
агентов, количество источников нектара (случайно количество кластеров), размер кластеров
для поиска и время работы как критерий останова.

Муравьиный алгоритм


Метод роевого интеллекта описывает совместное поведение перераспределения самоформируемой системы, которая состоит из множества агентов, естественно взаимодействующих между собой
и с внешней средой. Агенты просты, но, непосредственно взаимодействуя, вместе создают так называемый роевой интеллект .
Идея муравьиного алгоритма заключается в моделировании поведения агентов и связана с их способностью быстро находить кратчайший путь и
адаптироваться к изменяющимся условиям внешней среды, находя новый кратчайший путь. При
своем движении агенты помечают путь, и эта информация используется другими агентами для
выбора пути. Такое элементарное правило поведения и определяет способность агентов находить
новый путь, если старый оказывается недоступным.
При решении оптимизационных задач необходимо разрабатывать или модифицировать нестандартные методы решения. Агенты движутся в пространстве по случайному маршруту. Маршрут разбивается на равнозначные участки. Передвижение
агентов фиксируется весовым коэффициентом, который увеличивается от прохождения агента по
участку маршрута. Дальше необходимо выбрать
эвристику строительства решения и, если эффективное решение не найдено, реализовать оптимальный локальный поиск.
Для определения начального расположения
агентов используется стратегия «Дробовик» – случайное распределение агентов в центрах кластеров,
причем необязательно, чтобы численности агентов
и центров совпадали.
Любой агент получает информацию о весовом
коэффициенте, повышающем вероятность прохождения агента по данному участку маршрута. Весовой коэффициент в момент времени  на участке
будет соответствовать . Начальное значение
коэффициента задается как некоторое ненулевое
натуральное число. Если участок
маршрута не проходят некоторое время , то весовой коэффициент изменяется по формуле,
где m – количество агентов; p – коэффициент изменения.
Задача кластеризации – минимизировать среднюю сумму внутреннего кластерного расстояния,
где Fi – длина вектора, попавшего в замкнутый участок.
Рассмотрим предложенный авторами алгоритм
(рис. 5).
1. Ввод исходных данных – генерация элементов банка данных, ввод количества элементов.
2. Ввод параметров – ввод времени работы алгоритма и количества агентов.
3. Начальное размещение агентов – случайное
распределение агентов в центрах кластеров (производится с использованием стратегии «Дробовик»).
4. Осуществление итераций, количество которых определяется пользователем в п. 2.
5. Перемещение агентов – каждый агент посещает каждый элемент по одному разу.
6. Присвоение весового коэффициента участку
маршрута: начальное значение весового коэффициента задается как некоторое ненулевое натурально число.
7. Изменение весового коэффициента по формуле .
8. Поиск лучшего текущего решения на основании формулы .
Серия вычислительных экспериментов показала, что эффективность муравьиного алгоритма
возрастает с увеличением размера оптимизационных задач. Важной особенностью муравьиного алгоритма является конвергенция альтернативных
решений. После большого числа итераций при одновременном использовании большого количества
решений нет больших задержек в локальных экстремумах. К настройкам муравьиного алгоритма
относят количество агентов, весовые коэффициенты, формирующие представление о приоритете выбранного участка маршрута. Коэффициент изменения показывает степень снижения
приоритетности выбранного участка маршрута.
Разработка программного комплекса
Для эффективного решения задач интеллектуального анализа данных, в частности задачи кластеризации, предлагаются эвристические алгоритмы, преобразующие одно конечное множество
альтернативных решений в другое, используя для
этого механизмы и принципы генетики и эволюции
живой природы .
На рисунке 6 представлена укрупненная архитектура модели биоинспирированного поиска, разработанная в процессе написания программного
комплекса. Данная модель анализирует поведение
ЦФ при использовании трех различных эвристических алгоритмов. Использование модели дает возможность решать задачи кластеризации с любыми
наборами исходных данных.
1. На входе генерируется начальная популяция
альтернативных решений под воздействием внешней среды (ЛПР).
2. Выбирается алгоритм кластеризации элементов (генетический алгоритм – ГА, муравьиный
алгоритм – МА; пчелиный алгоритм – ПА). На основе выполнения алгоритмов строится популяция
альтернативных решений.
3. Применив отбор, ЛПР получает набор квазиоптимальных решений кластеризации.
4. Если квазиоптимальное решение не удовлетворяет, повторяем шаг 2.
5. Иначе на выходе получаются набор квазиоптимальных решений и функция времени, которая
показывает эффективность представленной модели.
Основная идея данной модели – моделирование
распараллеливания процесса обработки больших
объемов данных с помощью эвристических алгоритмов.
Вычислительный эксперимент
Разработанные алгоритмы относятся к классу
эвристических алгоритмов. Для оценки их эффективности, а именно временной сложности, производится анализ статистических данных, которые
получаются при неоднократном выполнении данных алгоритмов .
Для проведения вычислительного эксперимента кластеризации были выбраны БД со 100, 200,
300, 400, 500 элементами. Перед началом эксперимента проводится настройка алгоритмов. Приведем пользовательские настройки алгоритмов.
Муравьиный алгоритм имеет ряд специфических настроек. Определяется, сколько агентов будут участвовать в поиске квазиоптимальных решений. Весовые коэффициенты параметры,
влияющие на приоритет выбора того или иного
участка маршрута. Параметр  контролирует выбор на текущем шаге. Параметр контролирует
выбор на участке с оптимальным значением весового коэффициента. Коэффициент изменения
определяет время, с которым происходит изменение весового коэффициента на предыдущем
участке.
Для работы пчелиного алгоритма необходимо
определиться с минимальным набором исходных
данных. Количество агентов А – агентов, которые
отправляются в центры кластеров для поиска эффективных решений. Если решение найдено, в него
отправляются агенты для поиска других квазиоптимальных решений в окрестностях найденных
решений. Количество решений является начальным назначением для агентов А. Размер кластеров
измеряется в условных единицах.
Для исследования результатов эффективности в
программном комплексе реализован блок вывода
графика результатов выполнения, а в главном окне
программы выводится квазиоптимальное значение
ЦФ.
Пока не достигнут критерий останова алгоритмов на равнозначных временных участках на основании  минимизируется среднее внутреннее кластерное расстояние. Ось абсцисс отображает временные участки, а ось ординат – значение ЦФ на
каждом участке.
Первая серия тестов: 100 элементов банка данных (рис. 7).
Значение лучших ЦФ: 1) ГА – 618, 2) МА – 583,
3) ПА – 123.
В рамках данной работы ЦФ измеряется в
условных единицах для обозначения расстояния
между кластерами. Из графика видно, что пчелиный алгоритм привел к наилучшему результату ЦФ
за 9,36 сек. Это значение является оптимальным в
рамках данной работы. Муравьиный алгоритм
быстро попал в локальный оптимум. ГА показал
высокую точность в поиске квазиоптимального
разбиения на кластеры, даже уступая другим алгоритмам по времени поиска.
Вторая серия тестов в 200 элементов показала
преимущество ГА и муравьиного алгоритма в решении поставленной задачи.
Третья серия тестов в 300 элементов показала,
что пчелиный алгоритм самый быстрый и точный.
Для точности вычислительных экспериментов
опустим 4-ю серию тестов на 400 элементов. Проведем пятую, заключительную, серию для анализа
полученных данных.
Пятая серия тестов: 500 элементов (рис. 8).
Рассмотрим вычислительный эксперимент подробно. Из графиков видно, что пчелиный и муравьиный алгоритмы практически не уступают друг
другу. ГА в начале своей работы развивает хорошую скорость, но попадает в локальный оптимум
на задачах с большим набором исходных данных.
Данные эксперименты подтверждают способность
пчелиного и муравьиного алгоритмов находить
квазиоптимальное решение на задачах с большим
набором исходных данных .
Таким образом, проведя пять серий экспериментов, можно сделать вывод о преимуществах
каждого из алгоритмов. Использование данных алгоритмов кластеризации в задачах интеллектуального анализа данных зависит от поставленной задачи и исходных данных. Диаграмма на рисунке 9
показывает зависимость ЦФ от количества элементов при кластеризации.
Из диаграммы видно, насколько эффективен
тот или иной алгоритм. Время выполнения каждого
из алгоритмов. Эффективность ГА на
большом наборе данных ниже, чем у пчелиного и
муравиного алгоритмов, но дает разбиение на кластеры, приближенное к оптимальному. Пчелиный
алгоритм имеет ярко выраженное преимущество,
что позволяет говорить о более точном разбиении.
Муравьиный алгоритм показал не намного хуже
пчелиного результат – на 7,5 сек.
В результате выполнения алгоритмов получено
эффективное формирование кластеров с наименьшими ЦФ (рис. 9). Эффективость разработанных
методов исследована на основе проведения серии
экспериментальных вычислений.
Заключение
Разработанные алгоритмы имеют ряд преимуществ. Скорость и качество работы благоприятно
сказываются на дальнейшем использовании данных алгоритмов для решения задачи кластеризации. Проведенный вычислительный эксперимент
показал хорошие результаты каждого из алгоритмов. В ходе серии вычислительных экспериментов
время выполнения кластеризации элементов отличалось в среднем на 3–5 % от оптимального. Под
оптимальным временем поиска эффективного решения в рамках данной работы понимается значение в промежутке 8–9 секунд, полученное в результате выполнения уже разработанных алгоритмов
кластеризации, например k-средних. Временная
сложность разработанных алгоритмов в составе
программного комплекса приблизительно равна
О(n2).
Особенность данного программного комплекса – в разработанных модифицированных алгоритмах. Основной модификацией ГА является применение решета Эратосфена для начальной генерации набора альтернативных решений. Совместное
применение операторов удаления и вставки дает
большое преимущество в поиске квазиоптимальных решений. Модификация пчелиного и муравьиного алгоритмов заключается в модификации математического представления стандартных алгоритмов.
С учетом увеличения объемов банков данных
скорость обработки уменьшается прямо пропорционально количеству элементов, что приводит к
труднорешаемым проблемам. Методы и подходы
эволюционного моделирования являются эффективным способом решения NP-полных, трудных
задач, а модификация и разработка таких методов – актуальным направлением в интеллектуальном анализе данных.
Объединение алгоритмов позволяет улучшить
качество работы программного комплекса и тем самым ускорить процесс поиска квазиоптимальных
решений.
Работа выполнена при поддержке РФФИ,
грант № 15-07-05523.