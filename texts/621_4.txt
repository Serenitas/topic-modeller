В области теории расписаний самым распространенным направлением является исследование
классических однородных распределительных задач . Такие задачи часто применяются в различных сферах человеческой деятельности, например
там, где необходимо эффективно выполнить организацию и планирование каких-либо работ, различных заданий и требований. В общем случае
имеем какое-то количество работ и какое-то количество исполнителей. Выполнение любым работником какой-либо (но только одной) работы происходит с разными (неодинаковыми) затратами.
Необходимо распределить работы таким образом,
чтобы обойтись минимальными затратами. Примером распределительной задачи является задача составления плана выполнения комплекса программ
в многопроцессорных вычислительных системах . Она является минимаксной однородной
распределительной задачей теории расписаний.
Поскольку распределительная задача относится
к классу NP-полных задач, разработка новых, более
эффективных методов, используемых для их решения, является актуальной проблемой теории расписаний. Зарубежными и российскими учеными разработано множество алгоритмов и методов, отличающихся как эксплуатационными свойствами, так
и областью применения и решающих однородные
распределительные задачи. Все методы решения
однородных распределительные задач делятся на
две группы – приближенные и точные.

Самыми известными и наиболее эффективными
из методов точного решения распределительной
задачи являются алгоритмы, в основе которых лежат принципы метода ветвей и границ . Однако следует отметить, что эти алгоритмы имеют
свойство экспоненциального роста сложности искомого решения относительно размерности распределительной задачи. Это особенно заметно, когда распределяемые в задаче задания характеризуются небольшой вариацией значений их размеров.
Основные два дефекта, которые часто возникают в
алгоритмах на основе метода ветвей и границ, указаны в работе . В ней предлагается модификация, которая может уменьшить комбинационную
сложность алгоритма, предложенного Романовским . Главная особенность метода ветвей и
границ состоит в том, что обязательно возникнет
такой пример, при решении которого необходим
полный перебор. Поэтому для задач повышенной
размерности возникнут большие временные затраты, хотя комбинаторная сложность уменьшится.
Алгоритмы приближенного поиска не могут гарантированно найти при решении распределительной задачи глобальный оптимум. Они позволяют
получать некоторое допустимое или приемлемое
решение . Точность алгоритмов этого класса
невысока, но основное достоинство заключается в
высокой скорости получения решения, которая
имеет полиномиальную, а иногда даже линейную
зависимость от заданного порядка задачи.
Наибольшее распространение в классе приближенных алгоритмов получили списочные и эвристические методы. В основном списочные методы
имеют линейную сложность решения (относительно размерности задачи). В связи с этим, с точки
зрения времени построения расписаний, они обладают большой эффективностью. К сожалению, при
получении решений погрешность может достичь
30 %, что неприемлемо к заданным практическим
требованиям. Интерес к использованию эвристических подходов возник в связи с низкой точностью
приближенных списочных алгоритмов и высокими
вычислительными требованиями точных методов.
В литературе  приведены разработанные
ранее алгоритмы (последовательные, итерационные и т.д.). Их обзор, сравнение и анализ показали,
что для разработки более эффективного алгоритма
требуются новые технологии и подходы. Возможности применения генетического алгоритма для
решения однородной распределительной задачи
рассматриваются в . Как показывают исследования, алгоритм лучше срабатывает при значительном увеличении популяции и числа итераций.
В  приведены некоторые возможные модификации использования алгоритма поиска Табу. Эксперименты показывают, что этот алгоритм не всегда способен дать оптимальные решения. Качество
решений возрастает в том случае, если его использовать совместно с алгоритмом случайного поиска.
В  авторами было проведено исследование возможности использования нейронных сетей для решения однородной распределительной задачи и
приведены результаты поставленных экспериментов. Предлагается использовать динамическую
нейронную сеть, основанную на нейронах непрерывного и двоичного типов. Из результатов экспериментальных исследований следует, что метод
позволяет получать решения, результаты которых
могут быть улучшены.
Как показывают эксперименты, приближенные
(эвристические) методы могут давать большую погрешность, неприемлемую в большинстве случаев.
Возникает необходимость в методах, сочетающих
противоречивые свойства: полиномиальная зависимость времени решения задачи от ее размерности и точность, близкая к оптимальной. Таким образом, работа посвящается актуальной научно-технической проблеме: исследованию приближенных
методов решения задачи распределения программ
в многопроцессорных системах с целью повышения точности их работы.
В настоящее время наиболее перспективным
является интенсивно разрабатываемое в последние
годы научное направление, объединяющее различные математические методы, в которых принятие
решений осуществляется на основе принципов, содержащих природные механизмы . Эти методы являются итерационными, эвристическими
методами случайного поиска. Наиболее активно
развиваются методы роевого интеллекта (SwarmIntelligence) . В них совокупность простых
агентов конструирует стратегию своего поведения
без глобального управления.
Одним из новейших и наиболее перспективных
мультиагентных методов интеллектуальной оптимизации является метод муравьиной колонии
. В работе представлен разработанный алгоритм для решения однородной распределительной
задачи, использующий модель адаптивного поведения муравьиной колонии.
Постановка однородной распределительной
задачи теории расписаний
Пусть исполнительная система состоит из n
идентичных, параллельно работающих исполнителей. На вход системы поступает
множество m независимых заданий (работ), которые необходимо распределить
между исполнителями. Известна стоимость (ресурс
выполнения) каждого j-го задания rj, и она одинакова для любого i-го исполнителя ei. Таким образом, множеству W сопоставлено множество стоимостей. l-м решением однородной распределительной задачи является множество, в котором подмножества заданий  отвечают обязательному свойству.

Запланированная вариантом решения Vl загрузка заданиями каждого исполнителя ei оценивается ресурсом.
В качестве оценки решения Vl рассматривается
величина.

Наиболее распространенным критерием оптимизации однородной распределительной задачи
является минимаксный критерий.

Это связано с тем, что в большинстве реальных
распределительных задач наиболее часто возникает задача минимизации времени выполнения
всего комплекса заданий на заданной исполнительной системе. Чем быстрее исполнительная система
обслуживает поступаемые на выполнение задания,
тем выше ее производительность, а значит, выше и
экономическая эффективность предприятия, использующего данную систему.
Представим решение распределительной задачи в виде двудольного графа, где
 множество вершин (первая
доля), соответствующих множеству исполнителей,
а множество вершин (вторая
доля), соответствующих множеству заданий (работ); Ul – множество ребер, связывающих вершины
множества E с вершинами множества W. Для
наглядности представления конкретного решения
Vl сгруппируем множество заданий W в подмножества (рис. 1).

Пусть  – множество ребер двудольного графа
H , связывающих вершину ei с вершинами множества. Отличительной особенностью
представленного двудольного графа 
является то, что число ребер множества  равно
числу вершин множества . Каждое ребро ,
с одной стороны, инцидентно вершине ei, а с другой – инцидентно только одной вершине .
Назовем двудольный граф, представляющий решение Vl, графом-решением Hl. Отметим, что локальная степень любой вершины равна единице,
а локальная степень вершины ei равна мощности
множества , то есть.
В работе поиск решения Vl сводится к поиску на
полном двудольном графе  такого графа-решения Hl, для которого оценка Fl имеет минимальное
значение.
l

Решение однородной распределительной
задачи на основе моделей адаптивного
поведения муравьиной колонии
Предлагаемая для муравьиного алгоритма метаэвристика состоит из комбинации двух техник.
Сначала на базовом методе строится общая схема.
Далее в построенную схему встраивается та или
иная процедура. Следует отметить, что встроенная
процедура – это практически всегда самостоятельный алгоритм решения той же задачи, что и метаэвристический метод в целом. Базовый метод заключается в реализации итерационной процедуры
поиска лучшего решения на основе механизмов
адаптивного поведения муравьиной колонии. Основу встроенной процедуры составляет конструктивный алгоритм построения муравьем некоторой
конкретной интерпретации решения. В оптимизации муравьиными колониями  конструктивный
блок (деятельность искусственных муравьев) играет ключевую роль. В нашем случае в качестве интерпретации решения однородной распределительной задачи служит двудольный граф-решение Hl.
Рассмотрим принципы решения однородной
распределительной задачи методами муравьиной
колонии. Поиск решений осуществляется на полном двудольном графе. Как указывалось выше, базовый метод заключается в реализации итерационной процедуры поиска лучшего решения. Работа
поисковой процедуры начинается с построения в
соответствии со спецификой решаемой задачи
графа поиска решений. Для поиска решений формируется полный двудольный граф. В графе  каждая вершина  связана
со всеми вершинами множества , а каждая вершина  связана со всеми вершинами множества ,
то есть. Задается
размер популяции искусственных муравьев. За
каждым муравьем закрепляется стартовая вершина. В качестве стартовых вершин рассматриваются вершины.
Моделирование поведения муравьев связано с
распределением феромона на ребрах графа . На
начальном этапе на всех ребрах U графа  откладывается одинаковое (небольшое) количество феромона , где . Параметр  задается априори. Будем обозначать граф  после отложения
на нем на итерации t феромона как . После
начального отложения – . Процесс поиска решений итерационный. Каждая итерация t включает
три этапа. На первом этапе каждой итерации t выполняются процедуры муравьиного алгоритма.
Каждый l-й агент формирует на ребрах графа
 свой собственный граф-решение ,
определяется решение , соответствующее графу-решению , и оценка решения .
На втором этапе итерации t каждый муравей откладывает феромон на ребрах графа, соответствующих ребрам построенного графа-решения.
Количество феромона, откладываемое муравьем  на каждом ребре построенного графа-решения , определяется следующим образом, где t – номер итерации; Q – общее
количество феромона, откладываемое муравьем на
ребрах графа-решения ; целевая функция для решения, полученного муравьем на t-й
итерации. Чем меньше , тем больше феромона
откладывается на ребрах построенного графа-решения  и, следовательно, тем больше вероятность выбора этих ребер при построении графа-решения на следующей итерации.
Обозначим суммарное количество феромона, скопившееся на ребре двудольного графа, связывающего вершину  с вершиной после выполнения второго этапа итерации t.
После того как каждый агент сформировал решение и отложил феромон, на третьем этапе итерации t происходит общее испарение феромона на ребрах двудольного графа  в соответствии с
формулой, где коэффициент обновления.
После выполнения всех действий на итерации t
находится агент с лучшим решением, которое запоминается. Далее осуществляется переход на следующую итерацию.
Рассмотрим теперь конструктивный алгоритм
построения муравьем двудольного графа-решения
 на полном двудольном графе.
Последовательно (или случайным образом)
выбираются вершины двудольного графа, начиная с первой (стартовой). Для выбранной вершины  определяется набор ребер
, связывающих  со всеми вершинами  множества . Для каждого ребра, связывающего вершину  с вершиной , определяется параметр суммарный уровень феромона на этом
ребре.
Вероятность  включения ребра  в формируемый граф-решение  определяется соотношением .
Агент с вероятностью  выбирает одно из ребер, которое включается в формируемый граф-решение .
Временная сложность этого алгоритма зависит
от времени жизни колонии t (число итераций), количества исполнителей n и числа работ m и определяется как. Далее приведены алгоритм поведения муравьиной колонии и алгоритм муравья.
Алгоритм поведения муравьиной колонии.
1. Задаются число исполнителей – n, число работ – m, начальное количество феромона – Q.
2. Строится полный двудольный граф, на ребрах которого отложено
начальное количество феромона.
3. За каждым муравьем  закрепляется стартовая вершина.
4. Задаются число итераций, число муравьев, формирующих независимо друг от друга решения на одной итерации.
5.  (t – номер итерации).
6. (l – номер агента).
7. (Алгоритм муравья). Муравей al строит на
полном двудольном графе 
двудольный граф-решение .
8. Рассчитывается оценка  построенного
двудольного графа-решения .
9. Если , то  и переход к пункту 7,
иначе переход к пункту 10.
10..
11. Муравей al откладывает на ребрах полного
двудольного графа , соответствующих ребрам построенного двудольного графа-решения, феромон в количестве .
12. Если , то  и переход к пункту 11,
иначе переход к пункту 13.
13. На третьем этапе итерации t происходит общее испарение феромона на всех ребрах двудольного графа  в соответствии с формулой, где  – коэффициент обновления.
14. Находится агент с лучшим решением F,
полученным после выполнения t итераций, которое
запоминается.
15. Если, то  и переход к пункту 6,
иначе переход к пункту 16.
16. Конец работы алгоритма.
Рассмотрим теперь конструктивный алгоритм
построения муравьем двудольного графа-решения
 на полном двудольном графе.
Алгоритм муравья.
1. (s – индекс списка вершин W(s), указывающий на число удаленных вершин из исходного
списка W).
2. Формируется исходный список вершин, включающий все вершины
множества, то есть .
3. В списке выбирается вершина, которая закреплена за муравьем, и удаляется из
списка. Переход к пункту 5.
4. Случайным образом в списке выбирается вершина , которая удаляется из списка.
5. .
6. Для выбранной вершины  определяется
набор ребер , связывающий  со всеми вершинами  множества ,.
7. Для каждого ребра , связывающего вершину  с вершиной , определяется параметр  –
суммарный уровень феромона на этом ребре.
8. Для каждого ребра  по формуле  рассчитывается вероятность включения
ребра  в формируемый граф-решение .
9. Агент с вероятностью  выбирает одно из ребер, которое включается в формируемый граф-решение .
10. Если , то переход к пункту 4, иначе переход к пункту 11.
11. Двудольный граф-решение  полностью
сформирован. Конец работы алгоритма муравья.
Разработка программы
Алгоритм решения задачи распределения работы программ на многопроцессорных системах
был запрограммирован на языке c# на платформе
Windows. При этом все исследования проводились
на компьютере типа Intel® Core™ i5 CPU 3.33 GHz
и ОЗУ размером 4 Гб.
Язык c# был выбран по нескольким причинам.
Во-первых, он позволяет быстро наладить разработку на начальных этапах, что дает возможность
в короткие сроки спроектировать программный
продукт, который потом можно будет отлаживать с
помощью средств Visual Studio.
Огромное количество библиотек с .NET идет в
базе, плюс к ним множество свободно доступных
библиотек, что покрывает практически все первостепенные задачи разработки под Windows. Наличие большого количества стандартных типов почти
избавляет от библиотек, где базовые типы переопределены. В силу того, что библиотеки С# сравнительно молодые, интерфейсы библиотек, как
правило, лучше вписываются в те или иные шаблоны проектирования.
В Visual Studio есть возможность подключения
системы контроля версий и работы с ней. Эта особенность сильно помогает в процессе коллективной разработки.
Также данный язык изначально инкапсулирован, что позволяет создавать иерархические схемы
наследования и делает возможным использование
компонентно-ориентированного подхода.
Для проектирования программы был выбран
компонентно-ориентированный подход. Это парадигма программирования, опирающаяся на понятие компонента – независимого модуля программного кода и предназначенная для повторного использования и развертывания, реализующегося в
виде множества языковых конструкций.
Кроме того, в платформе .NET реализован компонентно-ориентированный подход, обеспечивающий создание и повторное использование компонентов для любого языка программирования, поддерживаемого платформой.
BaseDisplayer – класс, содержащий в себе виртуальные функции, предназначенные для отрисовки различных статистических элементов на
формах (графиках и т.д.). От него наследуются
классы DrawBestSolution, ProblemDisplayer, RAlgorithmDisplayer. DrawBestSolutions предназначен
для отрисовки графика нахождения лучших решений по итерациям; ProblemDisplayer – для отображения текущей решаемой задачи на форме, предоставляющей возможность подгрузки решения из
файла; RAlgorithmDisplayer – для отображения информации о текущих настройках алгоритма.
Программа содержит набор классов, предназначенных для обеспечения работы алгоритма распределения ресурсов.
Класс BaseAlgorithm. Самый верхний в иерархии наследования, общий для любого алгоритма,
решающего задачу методом моделирования колонии муравьев. Он абстрактен и содержит определенные виртуальные функции GetProblem и
ResetAllParametrs, а также ряд перечислителей с
информацией о способе работы алгоритма.
Класс RDistributionAlgorithmParametrs содержит основные параметры работы алгоритма: количество итераций, количество муравьев, параметры
отложения феромона (начальное, отложение феромона муравьем, параметр затухания, способ отложения феромона). Феромон могут откладывать муравьи, нашедшие лучшее решение, абсолютно все
муравьи, муравьи, нашедшие лучшее решение и решения, находящиеся в определенном оценочном
диапазоне относительно лучшего.
На рисунке 2 приведена структурная схема программы, описывающая компонентное устройство
программы.

Класс RDistributionAlgorithm определяет переписанные функции самого муравьиного алгоритма
и представляет основную программную логику его
работы.
Класс BaseProblem содержит некоторые базовые данные о проблеме, решение которой происходит на момент работы алгоритма. Он верхний в
иерархии наследования.
Класс RproblemData содержит все необходимые
исходные данные для работы алгоритма.
Класс RdistributionAlgorithm наследуется от
RproblemData. Это сделано для более упрощенного
доступа ко всем исходным данным. Класс содержит реализацию всех механизмов, необходимых
для работы алгоритма моделирования поведения
колонии муравьев.
Класс BaseFormReader. Базовый класс, предназначенный для считывания информации об исходных данных с формы. Содержит только виртуальные функции.

Класс ProblemConfugurer. Конфигуратор исходных данных. Наследуется от BaseFormReader.
Также имеет доступ к RdistributionProblem. Преобразует исходные данные задачи в формат, использующийся внутри программы.
Класс BaseLoader предназначен для загрузки
файлов. Содержит только виртуальные функции.
Класс RdistributionLoader. Предназначен для загрузки данных с привязкой к задаче распределения
программ в многопроцессорных системах. Реализует возможность подгрузки файлов из формата
.xml или сериализованного бинарного файла.
Класс BaseSolution. Представляет базовое построенное решение задачи внутри программы. Содержит только виртуальные функции.
Класс RdistributionSolution. Содержит информацию о полученном решении с привязкой к задаче
распределения программ в многопроцессорных системах. Наследуется от BaseSolution.
Как видно из описания, программа содержит
несколько полностью виртуальных классов, что
позволяет использовать данный шаблон для последующих разработок.
Программная реализация алгоритма
Рассмотрим реализацию алгоритма моделирования поведения колонии муравьев (рис. 3).

Вначале производится формирование исходных
данных. На этом шаге или загружается информация из файла, или специальными генераторами создается множество работ с заданным временем выполнения. Также задаются количество итераций
работы алгоритма и количество агентов (муравьев). Задаются параметры, обеспечивающие непрямой обмен (стигмержи), такие как начальное
количество феромона и количество феромона, которое способен отложить каждый отдельный агент
системы. Существует ряд параметров, определяющих некоторые системы поведения муравьев. Каждый агент может двигаться, начиная с первой вершины, начиная со своей вершины, также он может
выбирать вершины, по которым осуществляется
движение в случайном порядке, руководствуясь генератором псевдослучайных чисел.
Затем осуществляется генерация первичной
матрицы альтернатив. Матрица содержит значение
вероятности, с которой муравей может выбрать какую-то конкретную вершину для своего движения.
На первой итерации каждый элемент множества
альтернатив приравнивается к начальному количеству феромона.
Если не все итерации алгоритма выполнены и
не все агенты осуществили процедуру построения
решения, выбирается определенный агент, который реализует его построение. Далее оценивается
решение. Оценка происходит по выбору максимально загруженного процессора.
Если все агенты на текущей итерации выполнили построение решений, производится изменение множества альтернатив. При этом каждое решение сравнивается с найденным лучшим решением на данной итерации. Чем хуже решение, тем
меньшее количество феромона откладывает агент,
который данное решение получил. Откладывание
феромона в матрицу альтернатив осуществляется
по формуле 

Проведение
экспериментальных исследований
При проведении экспериментальных исследований необходимо было определить две характеристики: эффективность полученного алгоритма и
качество разработанных на основе муравьиной колонии механизмов, которые были применены для
решения однородной распределительной задачи.
Для этого была применена процедура формирования контрольных тестовых примеров с уже известными результатами (оптимумом).
Первая исследуемая характеристика – влияние
(на полученный результат) управляющих параметров, таких как размер популяции муравьев, количество итераций, параметров, управляющих отложением и испарением феромона.
Для получения достоверных выводов была проведена серия тестов-экспериментов. Временная зависимость разработанного алгоритма определяется
временем жизни колонии t (количество генераций),
числом исполнителей n и числом работ m и определяется как. Тестирование показало, что в
97 % случаев сформированное пространство решений содержит глобальное оптимальное решение.
Тестирование, определяющее сходимость алгоритма, выполнялось следующим образом. Для каждого теста запоминался номер итерации, после которой улучшения оценки не происходило. Проводилась серия из 50 тестов, в которой находились
минимальный и максимальный номера итерации.
Также выполнялся расчет среднего значения количества итераций, улучшения оценки после которых
не происходило. Фактически в каждой серии тестов определялось лучшее решение, которое являлось оптимальным. Тестовые эксперименты показали, что схождение алгоритма происходит на
120-й генерации при объеме популяции.
Сравнение значений критерия, полученных муравьиным алгоритмом на бенчмарках, у которых
оптимум уже известен, показало, что у 80 % тестов
полученный результат был оптимальным, у 15 %
тестов результаты были на 3 % хуже оптимального,
а у 5 % тестов результаты были хуже не более, чем
на 2 %. На основании проведенных экспериментальных исследований можно сделать вывод, что
разработанный алгоритм позволяет получить результаты на 2–3 % лучше тех, что получены имеющимися алгоритмами .
В процессе разработки в программу была добавлена возможность построения гистограмм для
наилучшего определения итерации, на которой
происходят сходимость алгоритма и нахождение
лучшего решения. Пример гистограммы для некоторых вариантов решений приведен на рисунке 4.
Для сравнения эффективности были выбраны
генетический алгоритм, селективно-перестановочный алгоритм (СПА) , алгоритм моделирования поведения колонии муравьев
(ACO).
Эти алгоритмы были выбраны в силу перспективности и хороших результатов, показанных ими
при проведении экспериментов .
Сравнивался алгоритм адаптивного поведения
муравьиной колонии с различными алгоритмами
решения однородной распределительной задачи.
В качестве оптимальных настроек для алгоритма
моделирования поведения колонии муравьев использовались следующие параметры: размерность колонии, количество итераций
для каждого эксперимента. Работа алгоритма была
смоделирована без учета элитных особей. Подобные параметры также использовались для алгоритма селективных перестановок.
Каждый проведенный эксперимент содержал
три параметра: m – количество работников, n – количество работ, U – интервал работ, использующийся для генерации списка работ на каждой итерации. Для каждого набора работ использовались
100 задач. Суммарно для сравнения методов ACO
и DJMS было проанализировано 1 900 решений.
Для оценки решений использовалась нижняя
граница (Lower bound).

Сравним эффективность метода моделирования
поведения адаптивной колонии с эффективностью
методов DJMS и LPT (табл. 1). Результаты экспериментов метода DJMS взяты из. Для каждого
метода в каждой строчке таблицы показано количество оптимальных решений из проведенных 100
экспериментов.

Из таблицы 1 видно, что алгоритм DJMS опережает стандартный LPT. Стоит отметить, что этот алгоритм использует связку концепций LPT и MF.
Очевидно, что такая связка дает более хороший результат. В свою очередь, алгоритм ACO опережает
DJMS, что обусловлено использованием вероятностного подхода и выцветанием отдельных альтернативных выборов решений.
Сравним алгоритмы АСО и СПА.
Для исследования эффективности этих алгоритмов проведены вычислительные эксперименты при
разных значениях параметров задачи. В задаче приводятся такие же параметры, как и в предыдущем
опыте, за исключением диапазона работ. В качестве параметра, характеризующего ресурсно-точностные свойства, выбран Pопт – доля оптимальных решений.
Таблица 2 позволяет сравнить алгоритмы СПА
и АСО. В данном случае применялся алгоритм селективных перестановок, использующий одинарные перестановки. Данные для СПА взяты из .

Алгоритм муравьиной колонии показал эффективность 98,6 %, в то время как эффективность алгоритма ListSchedng составила 21,9 %, ThresholdHeuristic – 79,1 % и Scattersearch – 97,7 % (результаты были взяты из ).
Стоит отметить, что алгоритм моделирования
поведения колонии муравьев показывает хорошие
результаты на абсолютно различных диапазонах
мощностей работ, что связано с имитацией откладывания феромона во время работы алгоритма.
По сравнению с алгоритмом DJMS метод показывает гораздо более хороший результат благодаря
использованию более мощной эвристики.
Методы СПА и ACO показывают приблизительно равные результаты с преимуществом метода ACO около 2,5 %. Также стоит отметить, что
метод ACO показывает более хороший результат
на большом диапазоне работ. В целом данный метод имеет преимущество.
Заключение
В работе предложена новая парадигма комбинаторной оптимизации, которая базируется на моделировании адаптивного поведения муравьиной
колонии и представляет графическое решение однородной распределительной задачи в виде двудольного графа. Также для решения однородных
распределительных задач предложены новые механизмы. Муравьем на графе поиска решений строится двудольный граф в отличие от канонической
парадигмы муравьиного алгоритма. В оптимизационных задачах, допускающих представление решения в виде двудольных графов, этот способ поиска
рациональных решений является наиболее эффективным.
В частности, путем незначительной модификации конструктивного алгоритма муравья разработанный алгоритм, решающий однородные распределительные задачи, может также решать задачу о
назначениях.
Подбор наиболее адекватных управляющих
параметров может стать источником усовершенствования данного алгоритма. Решением другой
проблемы, которая может улучшить критерий качества, является установление очередности рассматриваемых работ. Улучшение качества можно
получить с помощью интеграции различных методов роевого интеллекта.
Работа выполнена при финансовой поддержке
РФФИ, грант № 17-07-00997.