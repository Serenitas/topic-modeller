В условиях современного общества актуальна
задача получения правильных прогнозов о поведении сложных систем в будущем на основании их
прошлого состояния. Для решения данной задачи
обычно применяют методы машинного обучения,
которые анализируют имеющиеся данные об истории поведения сложных технических систем и принимают во внимание примеры предыдущих прогнозов как для первоначального формирования
схем обучения, так и для улучшения их функциональных характеристик. Одной из фундаментальных проблем задачи машинного обучения является
проблема классификации, имеющая сходство с задачей прогнозирования. При решении задач как
классификации, так и прогнозирования используется двухэтапный процесс: создание модели на основе обучающей выборки и реализация модели для
предсказания значений зависимой переменной .
Задача прогнозирования требует разработки быстрых алгоритмов анализа данных. Необходима замена существующих методов классификации на
более эффективные в связи с требованием повышения точности работы разрабатываемой системы.
На замену существующим методам приходит алгоритм машинного обучения «случайный лес» (далее
RF). Он основан на построении ансамбля деревьев
решений, где каждый элемент строится на выборке, которая получается при помощи бустрепинга – метода исследования распределения статистик распределений вероятности исходной обучающей выборки . Существующие алгоритмы
недостаточно эффективны для использования в
разрабатываемой системе, поэтому для выработки

оптимального решения была введена нечеткая экспертная компонента. На основе метода RF разработан алгоритм классификации, позволяющий улучшить эффективность нахождения классифицированного решения.
Описание метода классификации
Приведем постановку задачи классификации.
Имеется множество классов, где 
– мощность данного множества, характеризующая
число классов, допустимых для данной задачи .
Пространство признаков класса является N-мерным векторным пространством. Для некоторого
вектора  необходимо провести процедуру принятия решения о принадлежности данного вектора к некоторому классу из заданного
множества F . Для решения данной задачи будем
использовать алгоритм RF. Этот алгоритм был
представлен Лео Брейманом и Адель Катлер . Он
основан на построении ансамбля классификационно-регрессионных деревьев, каждое из которых
строится по выборке, получаемой из исходной обучающей выборки с использованием бэггинга – метода формирования ансамблей классификаторов
. Этот метод позволяет решить как проблему
классификации, так и проблему регрессии. При помощи RF также можно производить отбор предикторов и поиск отклонений при анализе данных. RF
вместе с бэггингом представляют собой ансамбль
моделей классификаторов. У большинства методов
формирования ансамблей в задачах машинного
обучения имеются общие черты :
конструируются несколько различающихся
прогнозных моделей из адаптированных вариантов
элементов обучающей выборки;
комбинируются предсказания с использованием различных методов, включая простое усреднение или взвешенное голосование.
Основной идеей RF является объединение результатов работы базовых классификаторов и выделение неточностей при их работе. Приведем основные шаги работы модифицированного, разработанного авторами алгоритма MRF. В алгоритме
используется методика Дональда Кнута «грамотное программирование»  для описания функционала в виде кода и документирования.


где B – количество деревьев. Алгоритм позволяет
построить ансамбль деревьев решений для выработки наиболее качественного решения.
Для выполнения прогнозирования для следующей точки X оценка регрессии высчитывается по

формуле 
прогнозирования b-го дерева из ансамбля деревьев.
Тогда оценка качества классификации будет рассчитываться по формуле 
Основным недостатком RF является большой
размер структуры данных. Это приводит к большому расходу памяти. Временная сложность алгоритма количество деревьев. Достоинство применения MRF в способности к параллелизации вычислений. Проектируя класс на языке
Java, получим следующую структуру
где BoolTrain – функция обучения самого RF;
FloatPredict(inputData) позволяет на основе входных данных прогнозировать значения. Также присутствует функция нечеткого прогноза, называемая FloatFuzzyPredict.
Рассмотрим пример использования алгоритма
случайного леса на примере системы статистического анализа и визуализации данных, которая состоит из языка программирования R, большого
набора функций и алгоритмов обработки данных.
На вход алгоритма подаются некоторые данные
(в данном случае обобщенное значение) в виде таблицы (табл. 1). Каждая колонка имеет соответствие
с некоторым параметром, а строка – с некоторым
элементом данных.


Например, данная таблица может определять
состояние модулей информационной системы, где
1 – признак отсутствия ошибок; 0 – признак наличия сбоев; N – количество значений во времени; m
– количество модулей в системе.
Можно случайным образом выбрать некоторое
количество столбцов и строк и построить по ним
дерево принятия решений (ДПР). ДПР является одним из основных средств поддержки принятия решений. Оно используется как основа для рекурсивного создания случайного леса, состоящего из деревьев решений и экспертной компоненты, которая
управляет всеми ансамблями моделей. Далее, при
повторении процедуры построения дерева принятия решения N раз, получаем множество деревьев.
Принцип формирования деревьев случаен, что позволяет получить значения в глобальной области видимости .
Пример построения ансамблей деревьев решений с помощью этого алгоритма позволяет сделать
вывод о целесообразности выбора данного алгоритма для классификации, являющейся одним из
основных методов решения задачи прогнозирования.
Алгоритм обучения MRF для выработки
оптимального решения
Проблемы классификации могут быть рассмотрены как задачи оптимизации для нахождения лучшей целевой функции, что представляет собой прогнозируемое партнерство определенной области
данных.
Для решения данной задачи будем использовать алгоритм случайного леса.
1. Имеется определенная обучающая выборка,
состоящая из элементов, вес которых в корневой
вершине равен 1.
2. В любом корне N, который может быть расширен, вычислить количество образцов каждого
класса. Классы распределены по частям или ответвлениям.
3. Выбрать подходящие образцы из обучающей
выборки.
4. На каждой вершине вариантов поиска
выбрать некоторый критерий, который является атрибутом для разделения узла;
выполнить функцию обучения;
выбрать искомое значение атрибута, в котором есть подходящий критерий по информационному наполнению.
5. Разделить N на поддеревья в соответствии с
возможными выводами атрибута, выделенного на
предыдущем шаге.
6. Повторять шаги 2–5 до тех пор, пока поиск в
дереве не будет выполнен.
Задача прогнозирования такова: дан временной
ряд значений параметров исследуемого процесса,
например, работы программной системы :

Формула  является моделью временного
ряда, где – горизонт прогнозирования;
W – вектор параметров модели; x – единица статистического материала . Иными словами, можно
сказать, что интеллектуальная система получает в
реальном времени некоторую последовательность
числовых значений исходов. При этом системе не
предлагается описание процесса генерации значений исходов . Разработанный алгоритм обучения MRF решает задачу классификации и регрессии с минимальным процентом ошибок. Это
позволяет применять данный алгоритм в задаче
прогнозирования.
Применение разработанного алгоритма
для прогнозирования временных рядов
Вход: временной ряд предыдущего состояния
системы определенной длины L.
Выход: прогнозируемое значение.
Для каждой итерации прогнозирования временного ряда TS
генерируем обучающую выборку; обучаем
векторы X и Y;
применяем алгоритм для вычисления прогнозируемого значения и получаемое значение;
временно сохраняем текущее состояние временного ряда .
Представленное решение задачи прогнозирования применяется в задаче анализа работоспособности программной системы в реальном времени.
Большинство программных систем, работающих в
данном режиме, требуют поддержки работоспособности в течение всего рабочего времени. Подсистема прогнозирования позволяет предотвратить
выход из строя различных подсистем или предупредить пользователя и выполнить дополнительные действия по обеспечению резервного копирования и корректности завершения остальных подсистем, зависящих от сбойной. Для моделирования
рабочего процесса программной системы используется дискретная темпоральная логика (DTL).
Один из примеров DTL – RTTL (Real-Time Temporal Logic). Главной идеей RTTL является представление вычисления в виде последовательности
состояний, в которой единственный временной
промежуток рассчитывается как переход из одного
состояния в другое . В качестве спецификации
для реализации RTTL используются временные автоматы. Временным автоматом является конечный
автомат, реализующий также поддержку множества значений, выражающихся в часах. Состояние
временного автомата состоит из текущей позиции
автомата и текущих значений множества часов
. То есть, описывая временной автомат, можно
выделить следующие характеристики: временной
автомат содержит конечное множество состояний
управления, а также таймеры, которые принимают
действительные значения и связаны с поведением
системы.
Разработка ПО поддержки
структуры данных «случайный лес»
Разработаны структура данных и программное
средство поддержки данной структуры для его
применения в системе прогнозирования. Программное средство имеет определенный функционал:
 построение случайного леса на основе обучающей выборки;
 обучение классификаторов ;
 решение задачи прогнозирования.
Программное средство разработано при помощи языка программирования Java .
Рассмотрим пример описания свойства класса
private float regression_accuracy. Знак private является атрибутом, который характеризует элемент,
доступный только внутри класса; regression_accuracy – наименование свойства класса; float – обозначение фундаментального типа данных свойства
в нотации используемого языка высокого уровня.
Для обеспечения осуществления принципов инкапсуляции данных доступ к свойствам класса осуществляется при помощи методов (функций):
Private float getRegression_accuracy – метод, выдающий значение свойства класса regression_accuracy, Public void setRegression_accuracy – метод,
задающий значение свойства класса.
Приведем класс RTree, где инкапсулированы
все свойства класса

Экспериментальные исследования
Испытания проводились на основе разработанного ПО с использованием открытых тестовых
выборок. Основным критерием исследования является классификация. Как видим из таблицы 2, классификация с использованием разработанных моделей случайных лесов достаточно эффективна.
Согласно полученным результатам (эксперименты 1–4, 6, 7), процент правильности классификации объектов довольно высок. График на

рисунке говорит о том, что лишь при большом размере тестовой выборки процент некорректно классифицируемых объектов начинает расти.


Данный график основывается на данных, полученных по результатам экспериментов, где ось X –
значение элемента временного ряда, а ось Y – процент правильно классифицированных объектов.


По итогам работы можно сделать вывод об эффективности классификатора в виде случайного
леса. Произведено исследование классификационных структур данных. Описан алгоритм случайного леса. Разработан модифицированный алгоритм формирования случайного леса. Разработано
программное средство MRFapplication на языке
программирования Java. Проведены экспериментальные исследования, показавшие эффективность
данного способа классификации и возможность его
применения в реальных задачах прогнозирования.